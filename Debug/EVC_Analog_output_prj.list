
EVC_Analog_output_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004adc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004b9c  08004b9c  00005b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d18  08004d18  00006074  2**0
                  CONTENTS
  4 .ARM          00000000  08004d18  08004d18  00006074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d18  08004d18  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d18  08004d18  00005d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d1c  08004d1c  00005d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08004d20  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000074  08004d94  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08004d94  000062fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e78e  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b47  00000000  00000000  0001482a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00017378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f4  00000000  00000000  00017f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015510  00000000  00000000  00018834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011358  00000000  00000000  0002dd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a416  00000000  00000000  0003f09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b94b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000306c  00000000  00000000  000b94f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000bc564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b84 	.word	0x08004b84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004b84 	.word	0x08004b84

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <HAL_UART_TxCpltCallback>:
}

/*
 * Interrupt handling for sent Data
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	sio_setUartEvent();
 8000410:	4b03      	ldr	r3, [pc, #12]	@ (8000420 <HAL_UART_TxCpltCallback+0x18>)
 8000412:	2201      	movs	r2, #1
 8000414:	701a      	strb	r2, [r3, #0]
}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	20000090 	.word	0x20000090

08000424 <dac161s997_spi_xfer>:
.cs_num  = CS__Pin

};

int dac161s997_spi_xfer(dac161s997_dev_t *dev, uint8_t *tx_buf,
		uint8_t *rx_buf, size_t size) {
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b089      	sub	sp, #36	@ 0x24
 8000428:	af02      	add	r7, sp, #8
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	603b      	str	r3, [r7, #0]
	int err = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
    HAL_GPIO_WritePin(dev->cs_port, dev->cs_num, GPIO_PIN_RESET);
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	6858      	ldr	r0, [r3, #4]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	b29b      	uxth	r3, r3
 8000440:	2200      	movs	r2, #0
 8000442:	0019      	movs	r1, r3
 8000444:	f001 fa2c 	bl	80018a0 <HAL_GPIO_WritePin>
    err = HAL_SPI_TransmitReceive(dev->hspi, tx_buf, rx_buf, size, 5000);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	6818      	ldr	r0, [r3, #0]
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	b29b      	uxth	r3, r3
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	68b9      	ldr	r1, [r7, #8]
 8000454:	4c09      	ldr	r4, [pc, #36]	@ (800047c <dac161s997_spi_xfer+0x58>)
 8000456:	9400      	str	r4, [sp, #0]
 8000458:	f001 ff62 	bl	8002320 <HAL_SPI_TransmitReceive>
 800045c:	0003      	movs	r3, r0
 800045e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_WritePin(dev->cs_port, dev->cs_num, GPIO_PIN_SET);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	6858      	ldr	r0, [r3, #4]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	b29b      	uxth	r3, r3
 800046a:	2201      	movs	r2, #1
 800046c:	0019      	movs	r1, r3
 800046e:	f001 fa17 	bl	80018a0 <HAL_GPIO_WritePin>

    return err;
 8000472:	697b      	ldr	r3, [r7, #20]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b007      	add	sp, #28
 800047a:	bd90      	pop	{r4, r7, pc}
 800047c:	00001388 	.word	0x00001388

08000480 <HAL_GPIO_EXTI_Rising_Callback>:


void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	0002      	movs	r2, r0
 8000488:	1dbb      	adds	r3, r7, #6
 800048a:	801a      	strh	r2, [r3, #0]
	data_rcv = 1;
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 800048e:	2201      	movs	r2, #1
 8000490:	701a      	strb	r2, [r3, #0]
	start_time = HAL_GetTick();
 8000492:	f000 feab 	bl	80011ec <HAL_GetTick>
 8000496:	0003      	movs	r3, r0
 8000498:	001a      	movs	r2, r3
 800049a:	4b04      	ldr	r3, [pc, #16]	@ (80004ac <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 800049c:	601a      	str	r2, [r3, #0]

}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	200000a9 	.word	0x200000a9
 80004ac:	2000009c 	.word	0x2000009c

080004b0 <HAL_GPIO_EXTI_Falling_Callback>:


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	0002      	movs	r2, r0
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	801a      	strh	r2, [r3, #0]

	if(data_rcv)
 80004bc:	4b21      	ldr	r3, [pc, #132]	@ (8000544 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d03a      	beq.n	800053a <HAL_GPIO_EXTI_Falling_Callback+0x8a>
	{
		data_rcv = 0;
 80004c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000544 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
		end_time = HAL_GetTick();
 80004ca:	f000 fe8f 	bl	80011ec <HAL_GetTick>
 80004ce:	0003      	movs	r3, r0
 80004d0:	001a      	movs	r2, r3
 80004d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000548 <HAL_GPIO_EXTI_Falling_Callback+0x98>)
 80004d4:	601a      	str	r2, [r3, #0]
		pulse_time = end_time - start_time;
 80004d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <HAL_GPIO_EXTI_Falling_Callback+0x98>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	1ad2      	subs	r2, r2, r3
 80004e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 80004e2:	601a      	str	r2, [r3, #0]
		if(pulse_time >= byte_cmplt_time_ms && pulse_time < data_cmplt_time_ms)
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	2396      	movs	r3, #150	@ 0x96
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	429a      	cmp	r2, r3
 80004ee:	db0f      	blt.n	8000510 <HAL_GPIO_EXTI_Falling_Callback+0x60>
 80004f0:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	23fa      	movs	r3, #250	@ 0xfa
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	429a      	cmp	r2, r3
 80004fa:	da09      	bge.n	8000510 <HAL_GPIO_EXTI_Falling_Callback+0x60>
		{
			i++;
 80004fc:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <HAL_GPIO_EXTI_Falling_Callback+0xa4>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	3301      	adds	r3, #1
 8000502:	b2da      	uxtb	r2, r3
 8000504:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <HAL_GPIO_EXTI_Falling_Callback+0xa4>)
 8000506:	701a      	strb	r2, [r3, #0]
			pulse_time = 0;
 8000508:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
		else
		{
			conv.B[i] = pulse_time;
		}
	}
}
 800050e:	e014      	b.n	800053a <HAL_GPIO_EXTI_Falling_Callback+0x8a>
		else if(pulse_time >= data_cmplt_time_ms)
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	23fa      	movs	r3, #250	@ 0xfa
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	429a      	cmp	r2, r3
 800051a:	db06      	blt.n	800052a <HAL_GPIO_EXTI_Falling_Callback+0x7a>
			end = 1;
 800051c:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
			pulse_time = 0;
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	e007      	b.n	800053a <HAL_GPIO_EXTI_Falling_Callback+0x8a>
			conv.B[i] = pulse_time;
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 800052c:	6819      	ldr	r1, [r3, #0]
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <HAL_GPIO_EXTI_Falling_Callback+0xa4>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	001a      	movs	r2, r3
 8000534:	b2c9      	uxtb	r1, r1
 8000536:	4b09      	ldr	r3, [pc, #36]	@ (800055c <HAL_GPIO_EXTI_Falling_Callback+0xac>)
 8000538:	5499      	strb	r1, [r3, r2]
}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	200000a9 	.word	0x200000a9
 8000548:	200000a0 	.word	0x200000a0
 800054c:	2000009c 	.word	0x2000009c
 8000550:	200000a4 	.word	0x200000a4
 8000554:	200000a8 	.word	0x200000a8
 8000558:	20000098 	.word	0x20000098
 800055c:	200000ac 	.word	0x200000ac

08000560 <app_main>:

void app_main()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

	dac161s997_init(&dac_dev);
 8000564:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <app_main+0x68>)
 8000566:	0018      	movs	r0, r3
 8000568:	f000 f83a 	bl	80005e0 <dac161s997_init>
    dac161s997_set_output(&dac_dev, 4000000);
 800056c:	4a17      	ldr	r2, [pc, #92]	@ (80005cc <app_main+0x6c>)
 800056e:	4b16      	ldr	r3, [pc, #88]	@ (80005c8 <app_main+0x68>)
 8000570:	0011      	movs	r1, r2
 8000572:	0018      	movs	r0, r3
 8000574:	f000 f898 	bl	80006a8 <dac161s997_set_output>
	dac161s997_get_status(&dac_dev, &status);
 8000578:	4a15      	ldr	r2, [pc, #84]	@ (80005d0 <app_main+0x70>)
 800057a:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <app_main+0x68>)
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f000 f904 	bl	800078c <dac161s997_get_status>
	while(1)
	{
		if(end)
 8000584:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <app_main+0x74>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d010      	beq.n	80005ae <app_main+0x4e>
		{
			end = 0;
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <app_main+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
			i=0;
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <app_main+0x78>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
		    dac161s997_set_output(&dac_dev, (int32_t)conv.L);
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <app_main+0x7c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	001a      	movs	r2, r3
 800059e:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <app_main+0x68>)
 80005a0:	0011      	movs	r1, r2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 f880 	bl	80006a8 <dac161s997_set_output>
			conv.L = 0;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <app_main+0x7c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
		}
		dac161s997_get_status(&dac_dev, &status);
 80005ae:	4a08      	ldr	r2, [pc, #32]	@ (80005d0 <app_main+0x70>)
 80005b0:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <app_main+0x68>)
 80005b2:	0011      	movs	r1, r2
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 f8e9 	bl	800078c <dac161s997_get_status>
		HAL_Delay(400);
 80005ba:	23c8      	movs	r3, #200	@ 0xc8
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 fe1e 	bl	8001200 <HAL_Delay>
		if(end)
 80005c4:	e7de      	b.n	8000584 <app_main+0x24>
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	20000000 	.word	0x20000000
 80005cc:	003d0900 	.word	0x003d0900
 80005d0:	20000094 	.word	0x20000094
 80005d4:	20000098 	.word	0x20000098
 80005d8:	200000a8 	.word	0x200000a8
 80005dc:	200000ac 	.word	0x200000ac

080005e0 <dac161s997_init>:

/******************************************************************************/
/* Functions                                                                  */
/******************************************************************************/
int dac161s997_init(dac161s997_dev_t *dev)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    int err = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]

    err =
        dac161s997_write_reg(dev, DAC161S997_RESET_REG, _DAC_CHIP_RESET_CODE);
 80005ec:	4a2c      	ldr	r2, [pc, #176]	@ (80006a0 <dac161s997_init+0xc0>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2108      	movs	r1, #8
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 f956 	bl	80008a4 <dac161s997_write_reg>
 80005f8:	0003      	movs	r3, r0
 80005fa:	60fb      	str	r3, [r7, #12]
    if (err == -ENOEXEC) {
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	3308      	adds	r3, #8
 8000600:	d102      	bne.n	8000608 <dac161s997_init+0x28>
        return -ENXIO;
 8000602:	2306      	movs	r3, #6
 8000604:	425b      	negs	r3, r3
 8000606:	e047      	b.n	8000698 <dac161s997_init+0xb8>
    }
    if (err) {
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <dac161s997_init+0x32>
        return err;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	e042      	b.n	8000698 <dac161s997_init+0xb8>
    }



    if (err) {
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <dac161s997_init+0x3c>
         return err;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	e03d      	b.n	8000698 <dac161s997_init+0xb8>
     }
    /* We should not worry about protecting as we can catch errors and it
     * shouldn't be sharing communication with other devices.
     */
    err = dac161s997_write_reg(dev, DAC161S997_PROTECT_REG_WR_REG,
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	2103      	movs	r1, #3
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f93e 	bl	80008a4 <dac161s997_write_reg>
 8000628:	0003      	movs	r3, r0
 800062a:	60fb      	str	r3, [r7, #12]
                               _NOT_PROTECTED);
    if (err) {
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <dac161s997_init+0x56>
        return err;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	e030      	b.n	8000698 <dac161s997_init+0xb8>
    }

    err = dac161s997_write_reg(dev, DAC161S997_ERR_CONFIG_REG,
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	221f      	movs	r2, #31
 800063a:	2105      	movs	r1, #5
 800063c:	0018      	movs	r0, r3
 800063e:	f000 f931 	bl	80008a4 <dac161s997_write_reg>
 8000642:	0003      	movs	r3, r0
 8000644:	60fb      	str	r3, [r7, #12]
                               _ERR_CONFIG_SPI_TIMOUT_400MS | (1<<0) | (1 << 4));
    if (err) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <dac161s997_init+0x70>
        return err;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	e023      	b.n	8000698 <dac161s997_init+0xb8>
    }

    err =
        dac161s997_write_reg(dev, DAC161S997_ERR_LOW_REG, _NA_TO_DAC_TICKS(
 8000650:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <dac161s997_init+0xc4>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2106      	movs	r1, #6
 8000656:	0018      	movs	r0, r3
 8000658:	f000 f924 	bl	80008a4 <dac161s997_write_reg>
 800065c:	0003      	movs	r3, r0
 800065e:	60fb      	str	r3, [r7, #12]
                                 DAC161S997_FAIL_LO_ALARM_NA));
    if (err) {
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <dac161s997_init+0x8a>
        return err;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	e016      	b.n	8000698 <dac161s997_init+0xb8>
    }

    err =
        dac161s997_write_reg(dev, DAC161S997_ERR_HIGH_REG, _NA_TO_DAC_TICKS(
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2225      	movs	r2, #37	@ 0x25
 800066e:	2107      	movs	r1, #7
 8000670:	0018      	movs	r0, r3
 8000672:	f000 f917 	bl	80008a4 <dac161s997_write_reg>
 8000676:	0003      	movs	r3, r0
 8000678:	60fb      	str	r3, [r7, #12]
                                 DAC161S997_FAIL_HI_ALARM_NA));
    if (err) {
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <dac161s997_init+0xa4>
        return err;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	e009      	b.n	8000698 <dac161s997_init+0xb8>
    }

    err = dac161s997_set_alarm(dev, DAC161S997_ALARM_LOW_FAIL);
 8000684:	2380      	movs	r3, #128	@ 0x80
 8000686:	005a      	lsls	r2, r3, #1
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 f831 	bl	80006f4 <dac161s997_set_alarm>
 8000692:	0003      	movs	r3, r0
 8000694:	60fb      	str	r3, [r7, #12]
    return err;
 8000696:	68fb      	ldr	r3, [r7, #12]
}
 8000698:	0018      	movs	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	b004      	add	sp, #16
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	0000c33c 	.word	0x0000c33c
 80006a4:	0000266c 	.word	0x0000266c

080006a8 <dac161s997_set_output>:

int dac161s997_set_output(dac161s997_dev_t *dev, int32_t n_amps)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
    if (n_amps < DAC161S997_MIN_NA || n_amps > DAC161S997_MAX_NA) {
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <dac161s997_set_output+0x44>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d903      	bls.n	80006c2 <dac161s997_set_output+0x1a>
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	4a0c      	ldr	r2, [pc, #48]	@ (80006f0 <dac161s997_set_output+0x48>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d902      	bls.n	80006c8 <dac161s997_set_output+0x20>
        return -EINVAL;
 80006c2:	2316      	movs	r3, #22
 80006c4:	425b      	negs	r3, r3
 80006c6:	e00d      	b.n	80006e4 <dac161s997_set_output+0x3c>
    }
    return dac161s997_write_reg(dev, DAC161S997_DACCODE_REG,
                                _NA_TO_DAC_TICKS(n_amps));
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	22b7      	movs	r2, #183	@ 0xb7
 80006cc:	0051      	lsls	r1, r2, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff fdae 	bl	8000230 <__divsi3>
 80006d4:	0003      	movs	r3, r0
    return dac161s997_write_reg(dev, DAC161S997_DACCODE_REG,
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2104      	movs	r1, #4
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 f8e1 	bl	80008a4 <dac161s997_write_reg>
 80006e2:	0003      	movs	r3, r0
}
 80006e4:	0018      	movs	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b002      	add	sp, #8
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	001e847f 	.word	0x001e847f
 80006f0:	016e3600 	.word	0x016e3600

080006f4 <dac161s997_set_alarm>:

int dac161s997_set_alarm(dac161s997_dev_t *dev, DAC161S997_ALARM_t alarm)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	000a      	movs	r2, r1
 80006fe:	1cbb      	adds	r3, r7, #2
 8000700:	801a      	strh	r2, [r3, #0]
    if (alarm == DAC161S997_ALARM_LOW_FAIL) {
 8000702:	1cbb      	adds	r3, r7, #2
 8000704:	881a      	ldrh	r2, [r3, #0]
 8000706:	2380      	movs	r3, #128	@ 0x80
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	429a      	cmp	r2, r3
 800070c:	d107      	bne.n	800071e <dac161s997_set_alarm+0x2a>
        return dac161s997_write_reg(dev, DAC161S997_DACCODE_REG,
 800070e:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <dac161s997_set_alarm+0x8c>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2104      	movs	r1, #4
 8000714:	0018      	movs	r0, r3
 8000716:	f000 f8c5 	bl	80008a4 <dac161s997_write_reg>
 800071a:	0003      	movs	r3, r0
 800071c:	e02b      	b.n	8000776 <dac161s997_set_alarm+0x82>
                                    _NA_TO_DAC_TICKS(DAC161S997_FAIL_LO_ALARM_NA));
    }
    else if (alarm == DAC161S997_ALARM_LOW_SAT) {
 800071e:	1cbb      	adds	r3, r7, #2
 8000720:	881a      	ldrh	r2, [r3, #0]
 8000722:	2380      	movs	r3, #128	@ 0x80
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	429a      	cmp	r2, r3
 8000728:	d107      	bne.n	800073a <dac161s997_set_alarm+0x46>
        return dac161s997_write_reg(dev, DAC161S997_DACCODE_REG,
 800072a:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <dac161s997_set_alarm+0x90>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2104      	movs	r1, #4
 8000730:	0018      	movs	r0, r3
 8000732:	f000 f8b7 	bl	80008a4 <dac161s997_write_reg>
 8000736:	0003      	movs	r3, r0
 8000738:	e01d      	b.n	8000776 <dac161s997_set_alarm+0x82>
                                    _NA_TO_DAC_TICKS(DAC161S997_SAT_LO_ALARM_NA));
    }
    else if (alarm == DAC161S997_ALARM_HIGH_SAT) {
 800073a:	1cbb      	adds	r3, r7, #2
 800073c:	881a      	ldrh	r2, [r3, #0]
 800073e:	2380      	movs	r3, #128	@ 0x80
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	429a      	cmp	r2, r3
 8000744:	d107      	bne.n	8000756 <dac161s997_set_alarm+0x62>
        return dac161s997_write_reg(dev, DAC161S997_DACCODE_REG,
 8000746:	4a10      	ldr	r2, [pc, #64]	@ (8000788 <dac161s997_set_alarm+0x94>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2104      	movs	r1, #4
 800074c:	0018      	movs	r0, r3
 800074e:	f000 f8a9 	bl	80008a4 <dac161s997_write_reg>
 8000752:	0003      	movs	r3, r0
 8000754:	e00f      	b.n	8000776 <dac161s997_set_alarm+0x82>
                                    _NA_TO_DAC_TICKS(DAC161S997_SAT_HI_ALARM_NA));
    }
    else if (alarm == DAC161S997_ALARM_HIGH_FAIL) {
 8000756:	1cbb      	adds	r3, r7, #2
 8000758:	881a      	ldrh	r2, [r3, #0]
 800075a:	2380      	movs	r3, #128	@ 0x80
 800075c:	015b      	lsls	r3, r3, #5
 800075e:	429a      	cmp	r2, r3
 8000760:	d107      	bne.n	8000772 <dac161s997_set_alarm+0x7e>
        return dac161s997_write_reg(dev, DAC161S997_DACCODE_REG,
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2225      	movs	r2, #37	@ 0x25
 8000766:	2104      	movs	r1, #4
 8000768:	0018      	movs	r0, r3
 800076a:	f000 f89b 	bl	80008a4 <dac161s997_write_reg>
 800076e:	0003      	movs	r3, r0
 8000770:	e001      	b.n	8000776 <dac161s997_set_alarm+0x82>
                                    _NA_TO_DAC_TICKS(DAC161S997_FAIL_HI_ALARM_NA));
    }
    return -EINVAL;
 8000772:	2316      	movs	r3, #22
 8000774:	425b      	negs	r3, r3
}
 8000776:	0018      	movs	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	0000266c 	.word	0x0000266c
 8000784:	0000288e 	.word	0x0000288e
 8000788:	0000daca 	.word	0x0000daca

0800078c <dac161s997_get_status>:

int dac161s997_get_status(dac161s997_dev_t *dev, uint32_t *status)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
    uint16_t data;
    uint16_t alarm;
    int err = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]

    /* Reset status each call so errors are not sticky */
    *status = 0;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]

    err = dac161s997_read_reg(dev, DAC161S997_STATUS_REG, &data);
 80007a0:	230a      	movs	r3, #10
 80007a2:	18fa      	adds	r2, r7, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2109      	movs	r1, #9
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 f8a9 	bl	8000900 <dac161s997_read_reg>
 80007ae:	0003      	movs	r3, r0
 80007b0:	60fb      	str	r3, [r7, #12]

    if (err == -ENOEXEC) {
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3308      	adds	r3, #8
 80007b6:	d105      	bne.n	80007c4 <dac161s997_get_status+0x38>
        *status |= DAC161S997_STATUS_ABSENT;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2201      	movs	r2, #1
 80007be:	431a      	orrs	r2, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	601a      	str	r2, [r3, #0]
    }
    if (err) {
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <dac161s997_get_status+0x42>
        return err;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	e066      	b.n	800089c <dac161s997_get_status+0x110>
    }

    if (data & DAC161S997_STATUS_REG_LOOP_STS) {
 80007ce:	230a      	movs	r3, #10
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	001a      	movs	r2, r3
 80007d6:	2303      	movs	r3, #3
 80007d8:	4013      	ands	r3, r2
 80007da:	d005      	beq.n	80007e8 <dac161s997_get_status+0x5c>
        *status |= DAC161S997_STATUS_LOOP_ERR;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2202      	movs	r2, #2
 80007e2:	431a      	orrs	r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	601a      	str	r2, [r3, #0]
    }
    if (data & DAC161S997_STATUS_REG_SPI_TIMEOUT_ERR) {
 80007e8:	230a      	movs	r3, #10
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	001a      	movs	r2, r3
 80007f0:	2304      	movs	r3, #4
 80007f2:	4013      	ands	r3, r2
 80007f4:	d005      	beq.n	8000802 <dac161s997_get_status+0x76>
        *status |= DAC161S997_STATUS_COM_TIMEOUT;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2204      	movs	r2, #4
 80007fc:	431a      	orrs	r2, r3
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	601a      	str	r2, [r3, #0]
    }
    if (data & DAC161S997_STATUS_REG_FERR_STS) {
 8000802:	230a      	movs	r3, #10
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	001a      	movs	r2, r3
 800080a:	2308      	movs	r3, #8
 800080c:	4013      	ands	r3, r2
 800080e:	d005      	beq.n	800081c <dac161s997_get_status+0x90>
        *status |= DAC161S997_STATUS_FRAME_ERR;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2208      	movs	r2, #8
 8000816:	431a      	orrs	r2, r3
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	601a      	str	r2, [r3, #0]
    }

    err = dac161s997_read_reg(dev, DAC161S997_DACCODE_REG, &data);
 800081c:	230a      	movs	r3, #10
 800081e:	18fa      	adds	r2, r7, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2104      	movs	r1, #4
 8000824:	0018      	movs	r0, r3
 8000826:	f000 f86b 	bl	8000900 <dac161s997_read_reg>
 800082a:	0003      	movs	r3, r0
 800082c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <dac161s997_get_status+0xac>
        return err;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	e031      	b.n	800089c <dac161s997_get_status+0x110>
    }

    err = dac161s997_read_reg(dev, DAC161S997_ERR_LOW_REG, &alarm);
 8000838:	2408      	movs	r4, #8
 800083a:	193a      	adds	r2, r7, r4
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2106      	movs	r1, #6
 8000840:	0018      	movs	r0, r3
 8000842:	f000 f85d 	bl	8000900 <dac161s997_read_reg>
 8000846:	0003      	movs	r3, r0
 8000848:	60fb      	str	r3, [r7, #12]
    if (data == alarm) {
 800084a:	230a      	movs	r3, #10
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	881a      	ldrh	r2, [r3, #0]
 8000850:	193b      	adds	r3, r7, r4
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	429a      	cmp	r2, r3
 8000856:	d105      	bne.n	8000864 <dac161s997_get_status+0xd8>
        *status |= DAC161S997_LO_ALARM_ERR;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2210      	movs	r2, #16
 800085e:	431a      	orrs	r2, r3
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	601a      	str	r2, [r3, #0]
    }
    if (err) {
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <dac161s997_get_status+0xe2>
        return err;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	e016      	b.n	800089c <dac161s997_get_status+0x110>
    }

    err = dac161s997_read_reg(dev, DAC161S997_ERR_HIGH_REG, &alarm);
 800086e:	2408      	movs	r4, #8
 8000870:	193a      	adds	r2, r7, r4
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2107      	movs	r1, #7
 8000876:	0018      	movs	r0, r3
 8000878:	f000 f842 	bl	8000900 <dac161s997_read_reg>
 800087c:	0003      	movs	r3, r0
 800087e:	60fb      	str	r3, [r7, #12]
    if (data == alarm) {
 8000880:	230a      	movs	r3, #10
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	881a      	ldrh	r2, [r3, #0]
 8000886:	193b      	adds	r3, r7, r4
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	429a      	cmp	r2, r3
 800088c:	d105      	bne.n	800089a <dac161s997_get_status+0x10e>
        *status |= DAC161S997_HI_ALARM_ERR;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2220      	movs	r2, #32
 8000894:	431a      	orrs	r2, r3
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	601a      	str	r2, [r3, #0]
    }
    return err;
 800089a:	68fb      	ldr	r3, [r7, #12]
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b005      	add	sp, #20
 80008a2:	bd90      	pop	{r4, r7, pc}

080008a4 <dac161s997_write_reg>:
/******************************************************************************/
/* Functions                                                                  */
/******************************************************************************/
int dac161s997_write_reg(dac161s997_dev_t *dev,
                             uint8_t addr, uint16_t data)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	0008      	movs	r0, r1
 80008ae:	0011      	movs	r1, r2
 80008b0:	1cfb      	adds	r3, r7, #3
 80008b2:	1c02      	adds	r2, r0, #0
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	003b      	movs	r3, r7
 80008b8:	1c0a      	adds	r2, r1, #0
 80008ba:	801a      	strh	r2, [r3, #0]
    int err;
    uint16_t expect_data = data;
 80008bc:	230e      	movs	r3, #14
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	003a      	movs	r2, r7
 80008c2:	8812      	ldrh	r2, [r2, #0]
 80008c4:	801a      	strh	r2, [r3, #0]

    err = _dac161s997_op_reg(dev, addr, &data);
 80008c6:	003a      	movs	r2, r7
 80008c8:	1cfb      	adds	r3, r7, #3
 80008ca:	7819      	ldrb	r1, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 f830 	bl	8000934 <_dac161s997_op_reg>
 80008d4:	0003      	movs	r3, r0
 80008d6:	60bb      	str	r3, [r7, #8]
    if (err) {
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <dac161s997_write_reg+0x3e>
        return err;
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	e00a      	b.n	80008f8 <dac161s997_write_reg+0x54>
    }
    if (data != expect_data) {
 80008e2:	003b      	movs	r3, r7
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	220e      	movs	r2, #14
 80008e8:	18ba      	adds	r2, r7, r2
 80008ea:	8812      	ldrh	r2, [r2, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d002      	beq.n	80008f6 <dac161s997_write_reg+0x52>
        return -ENOEXEC;
 80008f0:	2308      	movs	r3, #8
 80008f2:	425b      	negs	r3, r3
 80008f4:	e000      	b.n	80008f8 <dac161s997_write_reg+0x54>
    }

    return err;
 80008f6:	68bb      	ldr	r3, [r7, #8]
}
 80008f8:	0018      	movs	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b004      	add	sp, #16
 80008fe:	bd80      	pop	{r7, pc}

08000900 <dac161s997_read_reg>:

int dac161s997_read_reg(dac161s997_dev_t *dev, uint8_t addr,
                            uint16_t *data)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	200b      	movs	r0, #11
 800090c:	183b      	adds	r3, r7, r0
 800090e:	1c0a      	adds	r2, r1, #0
 8000910:	701a      	strb	r2, [r3, #0]
    return _dac161s997_op_reg(dev, addr | _SPI_READ_MASK, data);
 8000912:	183b      	adds	r3, r7, r0
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	4252      	negs	r2, r2
 800091a:	4313      	orrs	r3, r2
 800091c:	b2d9      	uxtb	r1, r3
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	0018      	movs	r0, r3
 8000924:	f000 f806 	bl	8000934 <_dac161s997_op_reg>
 8000928:	0003      	movs	r3, r0
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	b004      	add	sp, #16
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <_dac161s997_op_reg>:

static int _dac161s997_op_reg(dac161s997_dev_t *dev, uint8_t addr,
                                  uint16_t *data)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b089      	sub	sp, #36	@ 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	200b      	movs	r0, #11
 8000940:	183b      	adds	r3, r7, r0
 8000942:	1c0a      	adds	r2, r1, #0
 8000944:	701a      	strb	r2, [r3, #0]
    int err = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    uint8_t in_buf[3] = { 0 };
 800094a:	2318      	movs	r3, #24
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	4a39      	ldr	r2, [pc, #228]	@ (8000a34 <_dac161s997_op_reg+0x100>)
 8000950:	8812      	ldrh	r2, [r2, #0]
 8000952:	801a      	strh	r2, [r3, #0]
 8000954:	2202      	movs	r2, #2
 8000956:	2100      	movs	r1, #0
 8000958:	5499      	strb	r1, [r3, r2]
    uint8_t out_buf[3];

    /* Assert addr is in range */
    assert((addr & (~_SPI_READ_MASK)) > 0);
 800095a:	183b      	adds	r3, r7, r0
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	4393      	bics	r3, r2
 8000962:	2b00      	cmp	r3, #0
 8000964:	dc05      	bgt.n	8000972 <_dac161s997_op_reg+0x3e>
 8000966:	4b34      	ldr	r3, [pc, #208]	@ (8000a38 <_dac161s997_op_reg+0x104>)
 8000968:	4a34      	ldr	r2, [pc, #208]	@ (8000a3c <_dac161s997_op_reg+0x108>)
 800096a:	4835      	ldr	r0, [pc, #212]	@ (8000a40 <_dac161s997_op_reg+0x10c>)
 800096c:	2135      	movs	r1, #53	@ 0x35
 800096e:	f003 f939 	bl	8003be4 <__assert_func>
    assert((addr & (~_SPI_READ_MASK)) <= 9);
 8000972:	230b      	movs	r3, #11
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	4393      	bics	r3, r2
 800097c:	2b09      	cmp	r3, #9
 800097e:	dd05      	ble.n	800098c <_dac161s997_op_reg+0x58>
 8000980:	4b30      	ldr	r3, [pc, #192]	@ (8000a44 <_dac161s997_op_reg+0x110>)
 8000982:	4a2e      	ldr	r2, [pc, #184]	@ (8000a3c <_dac161s997_op_reg+0x108>)
 8000984:	482e      	ldr	r0, [pc, #184]	@ (8000a40 <_dac161s997_op_reg+0x10c>)
 8000986:	2136      	movs	r1, #54	@ 0x36
 8000988:	f003 f92c 	bl	8003be4 <__assert_func>

    out_buf[0] = addr;
 800098c:	2114      	movs	r1, #20
 800098e:	187b      	adds	r3, r7, r1
 8000990:	220b      	movs	r2, #11
 8000992:	18ba      	adds	r2, r7, r2
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	701a      	strb	r2, [r3, #0]
    out_buf[1] = (*data >> 8);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b29b      	uxth	r3, r3
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	705a      	strb	r2, [r3, #1]
    out_buf[2] = (*data & 0xFF);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	709a      	strb	r2, [r3, #2]
    err =  dac161s997_spi_xfer(dev, out_buf, in_buf, 3);
 80009b0:	2318      	movs	r3, #24
 80009b2:	18fa      	adds	r2, r7, r3
 80009b4:	1879      	adds	r1, r7, r1
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	2303      	movs	r3, #3
 80009ba:	f7ff fd33 	bl	8000424 <dac161s997_spi_xfer>
 80009be:	0003      	movs	r3, r0
 80009c0:	61fb      	str	r3, [r7, #28]

    _inter_packet_delay();
 80009c2:	f000 f841 	bl	8000a48 <_inter_packet_delay>

    if (err) {
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <_dac161s997_op_reg+0x9c>
        return err;
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	e02c      	b.n	8000a2a <_dac161s997_op_reg+0xf6>
    }

    out_buf[0] = DAC161S997_NOP_REG;
 80009d0:	2114      	movs	r1, #20
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2202      	movs	r2, #2
 80009d6:	701a      	strb	r2, [r3, #0]
    out_buf[1] = 0x00;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2200      	movs	r2, #0
 80009dc:	705a      	strb	r2, [r3, #1]
    out_buf[2] = 0x00;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2200      	movs	r2, #0
 80009e2:	709a      	strb	r2, [r3, #2]
    err =  dac161s997_spi_xfer(dev, out_buf, in_buf, 3);
 80009e4:	2418      	movs	r4, #24
 80009e6:	193a      	adds	r2, r7, r4
 80009e8:	1879      	adds	r1, r7, r1
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	2303      	movs	r3, #3
 80009ee:	f7ff fd19 	bl	8000424 <dac161s997_spi_xfer>
 80009f2:	0003      	movs	r3, r0
 80009f4:	61fb      	str	r3, [r7, #28]
    _inter_packet_delay();
 80009f6:	f000 f827 	bl	8000a48 <_inter_packet_delay>
    if (in_buf[0] != addr) {
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	220b      	movs	r2, #11
 8000a00:	18ba      	adds	r2, r7, r2
 8000a02:	7812      	ldrb	r2, [r2, #0]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d002      	beq.n	8000a0e <_dac161s997_op_reg+0xda>
        return -ENOEXEC;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	425b      	negs	r3, r3
 8000a0c:	e00d      	b.n	8000a2a <_dac161s997_op_reg+0xf6>
    }
    *data = ((uint16_t)in_buf[1] << 8) | in_buf[2];
 8000a0e:	2118      	movs	r1, #24
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	785b      	ldrb	r3, [r3, #1]
 8000a14:	021b      	lsls	r3, r3, #8
 8000a16:	b21a      	sxth	r2, r3
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	789b      	ldrb	r3, [r3, #2]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	801a      	strh	r2, [r3, #0]
    return err;
 8000a28:	69fb      	ldr	r3, [r7, #28]
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b009      	add	sp, #36	@ 0x24
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	08004c08 	.word	0x08004c08
 8000a38:	08004b9c 	.word	0x08004b9c
 8000a3c:	08004c0c 	.word	0x08004c0c
 8000a40:	08004bbc 	.word	0x08004bbc
 8000a44:	08004be8 	.word	0x08004be8

08000a48 <_inter_packet_delay>:

static void _inter_packet_delay()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    /* Simple delay that may not be needed */
    //for (uint32_t i = 0; i < 50; i++) {}
	HAL_Delay(50);
 8000a4c:	2032      	movs	r0, #50	@ 0x32
 8000a4e:	f000 fbd7 	bl	8001200 <HAL_Delay>
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	0018      	movs	r0, r3
 8000a62:	2314      	movs	r3, #20
 8000a64:	001a      	movs	r2, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	f003 f9fa 	bl	8003e60 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <MX_GPIO_Init+0xbc>)
 8000a6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a70:	4b28      	ldr	r3, [pc, #160]	@ (8000b14 <MX_GPIO_Init+0xbc>)
 8000a72:	2101      	movs	r1, #1
 8000a74:	430a      	orrs	r2, r1
 8000a76:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a78:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <MX_GPIO_Init+0xbc>)
 8000a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4013      	ands	r3, r2
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS__GPIO_Port, CS__Pin, GPIO_PIN_SET);
 8000a84:	23a0      	movs	r3, #160	@ 0xa0
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f000 ff07 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2204      	movs	r2, #4
 8000a96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000b18 <MX_GPIO_Init+0xc0>)
 8000a9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	1d3a      	adds	r2, r7, #4
 8000aa6:	23a0      	movs	r3, #160	@ 0xa0
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fd85 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS__Pin;
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2210      	movs	r2, #16
 8000ab6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2201      	movs	r2, #1
 8000abc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS__GPIO_Port, &GPIO_InitStruct);
 8000aca:	1d3a      	adds	r2, r7, #4
 8000acc:	23a0      	movs	r3, #160	@ 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 fd72 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nDAC_ERROR_Pin;
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2280      	movs	r2, #128	@ 0x80
 8000adc:	0052      	lsls	r2, r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(nDAC_ERROR_GPIO_Port, &GPIO_InitStruct);
 8000aec:	1d3a      	adds	r2, r7, #4
 8000aee:	23a0      	movs	r3, #160	@ 0xa0
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 fd61 	bl	80015bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2006      	movs	r0, #6
 8000b00:	f000 fc4e 	bl	80013a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000b04:	2006      	movs	r0, #6
 8000b06:	f000 fc60 	bl	80013ca <HAL_NVIC_EnableIRQ>

}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b006      	add	sp, #24
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	40021000 	.word	0x40021000
 8000b18:	10310000 	.word	0x10310000

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 faf1 	bl	8001106 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f80a 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b28:	f7ff ff96 	bl	8000a58 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b2c:	f000 f850 	bl	8000bd0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b30:	f000 fa0a 	bl	8000f48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8000b34:	f7ff fd14 	bl	8000560 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	e7fd      	b.n	8000b38 <main+0x1c>

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b08d      	sub	sp, #52	@ 0x34
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	2414      	movs	r4, #20
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	0018      	movs	r0, r3
 8000b48:	231c      	movs	r3, #28
 8000b4a:	001a      	movs	r2, r3
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f003 f987 	bl	8003e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b52:	003b      	movs	r3, r7
 8000b54:	0018      	movs	r0, r3
 8000b56:	2314      	movs	r3, #20
 8000b58:	001a      	movs	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f003 f980 	bl	8003e60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2202      	movs	r2, #2
 8000b64:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2280      	movs	r2, #128	@ 0x80
 8000b6a:	0052      	lsls	r2, r2, #1
 8000b6c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2240      	movs	r2, #64	@ 0x40
 8000b78:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 fed7 	bl	8001930 <HAL_RCC_OscConfig>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000b86:	f000 f81c 	bl	8000bc2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b90:	003b      	movs	r3, r7
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	003b      	movs	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b9c:	003b      	movs	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ba8:	003b      	movs	r3, r7
 8000baa:	2101      	movs	r1, #1
 8000bac:	0018      	movs	r0, r3
 8000bae:	f001 f8a3 	bl	8001cf8 <HAL_RCC_ClockConfig>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000bb6:	f000 f804 	bl	8000bc2 <Error_Handler>
  }
}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b00d      	add	sp, #52	@ 0x34
 8000bc0:	bd90      	pop	{r4, r7, pc}

08000bc2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc6:	b672      	cpsid	i
}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	e7fd      	b.n	8000bca <Error_Handler+0x8>
	...

08000bd0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <MX_SPI1_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bdc:	2282      	movs	r2, #130	@ 0x82
 8000bde:	0052      	lsls	r2, r2, #1
 8000be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bea:	22e0      	movs	r2, #224	@ 0xe0
 8000bec:	00d2      	lsls	r2, r2, #3
 8000bee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000bfe:	2280      	movs	r2, #128	@ 0x80
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c06:	2220      	movs	r2, #32
 8000c08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c1e:	2207      	movs	r2, #7
 8000c20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c2e:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <MX_SPI1_Init+0x74>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 fabd 	bl	80021b0 <HAL_SPI_Init>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f7ff ffc2 	bl	8000bc2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000b0 	.word	0x200000b0
 8000c48:	40013000 	.word	0x40013000

08000c4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b091      	sub	sp, #68	@ 0x44
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	232c      	movs	r3, #44	@ 0x2c
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	0018      	movs	r0, r3
 8000c5a:	2314      	movs	r3, #20
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f003 f8fe 	bl	8003e60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	2410      	movs	r4, #16
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	0018      	movs	r0, r3
 8000c6a:	231c      	movs	r3, #28
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	2100      	movs	r1, #0
 8000c70:	f003 f8f6 	bl	8003e60 <memset>
  if(spiHandle->Instance==SPI1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a23      	ldr	r2, [pc, #140]	@ (8000d08 <HAL_SPI_MspInit+0xbc>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d13f      	bne.n	8000cfe <HAL_SPI_MspInit+0xb2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2280      	movs	r2, #128	@ 0x80
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f001 f9a0 	bl	8001fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000c98:	f7ff ff93 	bl	8000bc2 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <HAL_SPI_MspInit+0xc0>)
 8000c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <HAL_SPI_MspInit+0xc0>)
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	0149      	lsls	r1, r1, #5
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <HAL_SPI_MspInit+0xc0>)
 8000cac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cae:	2380      	movs	r3, #128	@ 0x80
 8000cb0:	015b      	lsls	r3, r3, #5
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_SPI_MspInit+0xc0>)
 8000cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cbc:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <HAL_SPI_MspInit+0xc0>)
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_SPI_MspInit+0xc0>)
 8000cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4013      	ands	r3, r2
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cd0:	212c      	movs	r1, #44	@ 0x2c
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	22e0      	movs	r2, #224	@ 0xe0
 8000cd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2202      	movs	r2, #2
 8000cdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	187a      	adds	r2, r7, r1
 8000cf2:	23a0      	movs	r3, #160	@ 0xa0
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 fc5f 	bl	80015bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b011      	add	sp, #68	@ 0x44
 8000d04:	bd90      	pop	{r4, r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d22:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	2201      	movs	r2, #1
 8000d28:	4013      	ands	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d32:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d34:	2180      	movs	r1, #128	@ 0x80
 8000d36:	0549      	lsls	r1, r1, #21
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_MspInit+0x44>)
 8000d3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d40:	2380      	movs	r3, #128	@ 0x80
 8000d42:	055b      	lsls	r3, r3, #21
 8000d44:	4013      	ands	r3, r2
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	40021000 	.word	0x40021000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	46c0      	nop			@ (mov r8, r8)
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d6c:	46c0      	nop			@ (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 fa22 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d8e:	2004      	movs	r0, #4
 8000d90:	f000 fda4 	bl	80018dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <USART1_IRQHandler+0x14>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f001 fec2 	bl	8002b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000da8:	46c0      	nop			@ (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	20000118 	.word	0x20000118

08000db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  return 1;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_kill>:

int _kill(int pid, int sig)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dca:	f003 f89f 	bl	8003f0c <__errno>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	2216      	movs	r2, #22
 8000dd2:	601a      	str	r2, [r3, #0]
  return -1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	425b      	negs	r3, r3
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_exit>:

void _exit (int status)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000de8:	2301      	movs	r3, #1
 8000dea:	425a      	negs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	0011      	movs	r1, r2
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff ffe5 	bl	8000dc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	e7fd      	b.n	8000df6 <_exit+0x16>

08000dfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e00a      	b.n	8000e22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e0c:	e000      	b.n	8000e10 <_read+0x16>
 8000e0e:	bf00      	nop
 8000e10:	0001      	movs	r1, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	60ba      	str	r2, [r7, #8]
 8000e18:	b2ca      	uxtb	r2, r1
 8000e1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	dbf0      	blt.n	8000e0c <_read+0x12>
  }

  return len;
 8000e2a:	687b      	ldr	r3, [r7, #4]
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b006      	add	sp, #24
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e009      	b.n	8000e5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	60ba      	str	r2, [r7, #8]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	e000      	b.n	8000e54 <_write+0x20>
 8000e52:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	3301      	adds	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dbf1      	blt.n	8000e46 <_write+0x12>
  }
  return len;
 8000e62:	687b      	ldr	r3, [r7, #4]
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b006      	add	sp, #24
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_close>:

int _close(int file)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	425b      	negs	r3, r3
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2280      	movs	r2, #128	@ 0x80
 8000e8e:	0192      	lsls	r2, r2, #6
 8000e90:	605a      	str	r2, [r3, #4]
  return 0;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_isatty>:

int _isatty(int file)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea4:	2301      	movs	r3, #1
}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b004      	add	sp, #16
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	18d3      	adds	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f003 f80a 	bl	8003f0c <__errno>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	425b      	negs	r3, r3
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	18d2      	adds	r2, r2, r3
 8000f12:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <_sbrk+0x64>)
 8000f14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	0018      	movs	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b006      	add	sp, #24
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20003000 	.word	0x20003000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	20000114 	.word	0x20000114
 8000f2c:	20000300 	.word	0x20000300

08000f30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <SystemInit+0x14>)
 8000f36:	2280      	movs	r2, #128	@ 0x80
 8000f38:	0512      	lsls	r2, r2, #20
 8000f3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f4c:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f4e:	4a24      	ldr	r2, [pc, #144]	@ (8000fe0 <MX_USART1_UART_Init+0x98>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f52:	4b22      	ldr	r3, [pc, #136]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f54:	22e1      	movs	r2, #225	@ 0xe1
 8000f56:	0252      	lsls	r2, r2, #9
 8000f58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000f92:	0018      	movs	r0, r3
 8000f94:	f001 fd74 	bl	8002a80 <HAL_UART_Init>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f9c:	f7ff fe11 	bl	8000bc2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f002 fd3d 	bl	8003a24 <HAL_UARTEx_SetTxFifoThreshold>
 8000faa:	1e03      	subs	r3, r0, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fae:	f7ff fe08 	bl	8000bc2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f002 fd74 	bl	8003aa4 <HAL_UARTEx_SetRxFifoThreshold>
 8000fbc:	1e03      	subs	r3, r0, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fc0:	f7ff fdff 	bl	8000bc2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <MX_USART1_UART_Init+0x94>)
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f002 fcf2 	bl	80039b0 <HAL_UARTEx_DisableFifoMode>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fd0:	f7ff fdf7 	bl	8000bc2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	20000118 	.word	0x20000118
 8000fe0:	40013800 	.word	0x40013800

08000fe4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b091      	sub	sp, #68	@ 0x44
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	232c      	movs	r3, #44	@ 0x2c
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	2314      	movs	r3, #20
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f002 ff32 	bl	8003e60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffc:	2410      	movs	r4, #16
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	0018      	movs	r0, r3
 8001002:	231c      	movs	r3, #28
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f002 ff2a 	bl	8003e60 <memset>
  if(uartHandle->Instance==USART1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a26      	ldr	r2, [pc, #152]	@ (80010ac <HAL_UART_MspInit+0xc8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d146      	bne.n	80010a4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001016:	193b      	adds	r3, r7, r4
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800101c:	193b      	adds	r3, r7, r4
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001022:	193b      	adds	r3, r7, r4
 8001024:	0018      	movs	r0, r3
 8001026:	f000 ffd5 	bl	8001fd4 <HAL_RCCEx_PeriphCLKConfig>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800102e:	f7ff fdc8 	bl	8000bc2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001032:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 8001034:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001036:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 8001038:	2180      	movs	r1, #128	@ 0x80
 800103a:	01c9      	lsls	r1, r1, #7
 800103c:	430a      	orrs	r2, r1
 800103e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 8001042:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001044:	2380      	movs	r3, #128	@ 0x80
 8001046:	01db      	lsls	r3, r3, #7
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 8001050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001052:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 8001054:	2101      	movs	r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	635a      	str	r2, [r3, #52]	@ 0x34
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <HAL_UART_MspInit+0xcc>)
 800105c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800105e:	2201      	movs	r2, #1
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001066:	212c      	movs	r1, #44	@ 0x2c
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2203      	movs	r2, #3
 800106c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2202      	movs	r2, #2
 8001072:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2204      	movs	r2, #4
 8001084:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	187a      	adds	r2, r7, r1
 8001088:	23a0      	movs	r3, #160	@ 0xa0
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	0011      	movs	r1, r2
 800108e:	0018      	movs	r0, r3
 8001090:	f000 fa94 	bl	80015bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	201b      	movs	r0, #27
 800109a:	f000 f981 	bl	80013a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800109e:	201b      	movs	r0, #27
 80010a0:	f000 f993 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010a4:	46c0      	nop			@ (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b011      	add	sp, #68	@ 0x44
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40021000 	.word	0x40021000

080010b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b4:	480d      	ldr	r0, [pc, #52]	@ (80010ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b8:	f7ff ff3a 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010be:	e003      	b.n	80010c8 <LoopCopyDataInit>

080010c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80010c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010c6:	3104      	adds	r1, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010c8:	480a      	ldr	r0, [pc, #40]	@ (80010f4 <LoopForever+0xa>)
  ldr r3, =_edata
 80010ca:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <LoopForever+0xe>)
  adds r2, r0, r1
 80010cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010d0:	d3f6      	bcc.n	80010c0 <CopyDataInit>
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <LoopForever+0x12>)
  b LoopFillZerobss
 80010d4:	e002      	b.n	80010dc <LoopFillZerobss>

080010d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  str  r3, [r2]
 80010d8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010da:	3204      	adds	r2, #4

080010dc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <LoopForever+0x16>)
  cmp r2, r3
 80010de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010e0:	d3f9      	bcc.n	80010d6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80010e2:	f002 ff19 	bl	8003f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e6:	f7ff fd19 	bl	8000b1c <main>

080010ea <LoopForever>:

LoopForever:
    b LoopForever
 80010ea:	e7fe      	b.n	80010ea <LoopForever>
  ldr   r0, =_estack
 80010ec:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80010f0:	08004d20 	.word	0x08004d20
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010f8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80010fc:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001100:	200002fc 	.word	0x200002fc

08001104 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC1_IRQHandler>

08001106 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001112:	2003      	movs	r0, #3
 8001114:	f000 f80e 	bl	8001134 <HAL_InitTick>
 8001118:	1e03      	subs	r3, r0, #0
 800111a:	d003      	beq.n	8001124 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e001      	b.n	8001128 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001124:	f7ff fdf4 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	781b      	ldrb	r3, [r3, #0]
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b002      	add	sp, #8
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800113c:	230f      	movs	r3, #15
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <HAL_InitTick+0x88>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d02b      	beq.n	80011a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800114c:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <HAL_InitTick+0x8c>)
 800114e:	681c      	ldr	r4, [r3, #0]
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <HAL_InitTick+0x88>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	0019      	movs	r1, r3
 8001156:	23fa      	movs	r3, #250	@ 0xfa
 8001158:	0098      	lsls	r0, r3, #2
 800115a:	f7fe ffdf 	bl	800011c <__udivsi3>
 800115e:	0003      	movs	r3, r0
 8001160:	0019      	movs	r1, r3
 8001162:	0020      	movs	r0, r4
 8001164:	f7fe ffda 	bl	800011c <__udivsi3>
 8001168:	0003      	movs	r3, r0
 800116a:	0018      	movs	r0, r3
 800116c:	f000 f93d 	bl	80013ea <HAL_SYSTICK_Config>
 8001170:	1e03      	subs	r3, r0, #0
 8001172:	d112      	bne.n	800119a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d80a      	bhi.n	8001190 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	2301      	movs	r3, #1
 800117e:	425b      	negs	r3, r3
 8001180:	2200      	movs	r2, #0
 8001182:	0018      	movs	r0, r3
 8001184:	f000 f90c 	bl	80013a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HAL_InitTick+0x90>)
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e00d      	b.n	80011ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e008      	b.n	80011ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800119a:	230f      	movs	r3, #15
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	e003      	b.n	80011ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a4:	230f      	movs	r3, #15
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	781b      	ldrb	r3, [r3, #0]
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b005      	add	sp, #20
 80011b8:	bd90      	pop	{r4, r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	20000014 	.word	0x20000014
 80011c0:	2000000c 	.word	0x2000000c
 80011c4:	20000010 	.word	0x20000010

080011c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <HAL_IncTick+0x1c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	001a      	movs	r2, r3
 80011d2:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <HAL_IncTick+0x20>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	18d2      	adds	r2, r2, r3
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <HAL_IncTick+0x20>)
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	46c0      	nop			@ (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	20000014 	.word	0x20000014
 80011e8:	200001ac 	.word	0x200001ac

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b02      	ldr	r3, [pc, #8]	@ (80011fc <HAL_GetTick+0x10>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	0018      	movs	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	200001ac 	.word	0x200001ac

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff fff0 	bl	80011ec <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121a:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	001a      	movs	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	189b      	adds	r3, r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	f7ff ffe0 	bl	80011ec <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	46c0      	nop			@ (mov r8, r8)
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b004      	add	sp, #16
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	20000014 	.word	0x20000014

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	0002      	movs	r2, r0
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b7f      	cmp	r3, #127	@ 0x7f
 800125a:	d809      	bhi.n	8001270 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	001a      	movs	r2, r3
 8001262:	231f      	movs	r3, #31
 8001264:	401a      	ands	r2, r3
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <__NVIC_EnableIRQ+0x30>)
 8001268:	2101      	movs	r1, #1
 800126a:	4091      	lsls	r1, r2
 800126c:	000a      	movs	r2, r1
 800126e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001290:	d828      	bhi.n	80012e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001292:	4a2f      	ldr	r2, [pc, #188]	@ (8001350 <__NVIC_SetPriority+0xd4>)
 8001294:	1dfb      	adds	r3, r7, #7
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b25b      	sxtb	r3, r3
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	33c0      	adds	r3, #192	@ 0xc0
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	589b      	ldr	r3, [r3, r2]
 80012a2:	1dfa      	adds	r2, r7, #7
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	0011      	movs	r1, r2
 80012a8:	2203      	movs	r2, #3
 80012aa:	400a      	ands	r2, r1
 80012ac:	00d2      	lsls	r2, r2, #3
 80012ae:	21ff      	movs	r1, #255	@ 0xff
 80012b0:	4091      	lsls	r1, r2
 80012b2:	000a      	movs	r2, r1
 80012b4:	43d2      	mvns	r2, r2
 80012b6:	401a      	ands	r2, r3
 80012b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	019b      	lsls	r3, r3, #6
 80012be:	22ff      	movs	r2, #255	@ 0xff
 80012c0:	401a      	ands	r2, r3
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	0018      	movs	r0, r3
 80012c8:	2303      	movs	r3, #3
 80012ca:	4003      	ands	r3, r0
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d0:	481f      	ldr	r0, [pc, #124]	@ (8001350 <__NVIC_SetPriority+0xd4>)
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	430a      	orrs	r2, r1
 80012dc:	33c0      	adds	r3, #192	@ 0xc0
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012e2:	e031      	b.n	8001348 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <__NVIC_SetPriority+0xd8>)
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	0019      	movs	r1, r3
 80012ec:	230f      	movs	r3, #15
 80012ee:	400b      	ands	r3, r1
 80012f0:	3b08      	subs	r3, #8
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3306      	adds	r3, #6
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	3304      	adds	r3, #4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	1dfa      	adds	r2, r7, #7
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	0011      	movs	r1, r2
 8001304:	2203      	movs	r2, #3
 8001306:	400a      	ands	r2, r1
 8001308:	00d2      	lsls	r2, r2, #3
 800130a:	21ff      	movs	r1, #255	@ 0xff
 800130c:	4091      	lsls	r1, r2
 800130e:	000a      	movs	r2, r1
 8001310:	43d2      	mvns	r2, r2
 8001312:	401a      	ands	r2, r3
 8001314:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	019b      	lsls	r3, r3, #6
 800131a:	22ff      	movs	r2, #255	@ 0xff
 800131c:	401a      	ands	r2, r3
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	0018      	movs	r0, r3
 8001324:	2303      	movs	r3, #3
 8001326:	4003      	ands	r3, r0
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800132c:	4809      	ldr	r0, [pc, #36]	@ (8001354 <__NVIC_SetPriority+0xd8>)
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	001c      	movs	r4, r3
 8001334:	230f      	movs	r3, #15
 8001336:	4023      	ands	r3, r4
 8001338:	3b08      	subs	r3, #8
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	430a      	orrs	r2, r1
 800133e:	3306      	adds	r3, #6
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	18c3      	adds	r3, r0, r3
 8001344:	3304      	adds	r3, #4
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	46c0      	nop			@ (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b003      	add	sp, #12
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	1e5a      	subs	r2, r3, #1
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	045b      	lsls	r3, r3, #17
 8001368:	429a      	cmp	r2, r3
 800136a:	d301      	bcc.n	8001370 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136c:	2301      	movs	r3, #1
 800136e:	e010      	b.n	8001392 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <SysTick_Config+0x44>)
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	3a01      	subs	r2, #1
 8001376:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001378:	2301      	movs	r3, #1
 800137a:	425b      	negs	r3, r3
 800137c:	2103      	movs	r1, #3
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff ff7c 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <SysTick_Config+0x44>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	@ (800139c <SysTick_Config+0x44>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	210f      	movs	r1, #15
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	1c02      	adds	r2, r0, #0
 80013b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	0011      	movs	r1, r2
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff ff5d 	bl	800127c <__NVIC_SetPriority>
}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b004      	add	sp, #16
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	0002      	movs	r2, r0
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff ff33 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b002      	add	sp, #8
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff ffaf 	bl	8001358 <SysTick_Config>
 80013fa:	0003      	movs	r3, r0
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e050      	b.n	80014b8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2225      	movs	r2, #37	@ 0x25
 800141a:	5c9b      	ldrb	r3, [r3, r2]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d008      	beq.n	8001434 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2204      	movs	r2, #4
 8001426:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2224      	movs	r2, #36	@ 0x24
 800142c:	2100      	movs	r1, #0
 800142e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e041      	b.n	80014b8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	210e      	movs	r1, #14
 8001440:	438a      	bics	r2, r1
 8001442:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	491c      	ldr	r1, [pc, #112]	@ (80014c0 <HAL_DMA_Abort+0xbc>)
 8001450:	400a      	ands	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2101      	movs	r1, #1
 8001460:	438a      	bics	r2, r1
 8001462:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <HAL_DMA_Abort+0xc0>)
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	221c      	movs	r2, #28
 800146e:	4013      	ands	r3, r2
 8001470:	2201      	movs	r2, #1
 8001472:	409a      	lsls	r2, r3
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <HAL_DMA_Abort+0xc0>)
 8001476:	430a      	orrs	r2, r1
 8001478:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001482:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00c      	beq.n	80014a6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001496:	490a      	ldr	r1, [pc, #40]	@ (80014c0 <HAL_DMA_Abort+0xbc>)
 8001498:	400a      	ands	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80014a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2225      	movs	r2, #37	@ 0x25
 80014aa:	2101      	movs	r1, #1
 80014ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2224      	movs	r2, #36	@ 0x24
 80014b2:	2100      	movs	r1, #0
 80014b4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	fffffeff 	.word	0xfffffeff
 80014c4:	40020000 	.word	0x40020000

080014c8 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d0:	230f      	movs	r3, #15
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2224      	movs	r2, #36	@ 0x24
 80014dc:	2100      	movs	r1, #0
 80014de:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2224      	movs	r2, #36	@ 0x24
 80014e4:	5c9b      	ldrb	r3, [r3, r2]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_DMA_Abort_IT+0x26>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e05e      	b.n	80015ac <HAL_DMA_Abort_IT+0xe4>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2224      	movs	r2, #36	@ 0x24
 80014f2:	2101      	movs	r1, #1
 80014f4:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2225      	movs	r2, #37	@ 0x25
 80014fa:	5c9b      	ldrb	r3, [r3, r2]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d007      	beq.n	8001512 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2204      	movs	r2, #4
 8001506:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001508:	230f      	movs	r3, #15
 800150a:	18fb      	adds	r3, r7, r3
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	e049      	b.n	80015a6 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	210e      	movs	r1, #14
 800151e:	438a      	bics	r2, r1
 8001520:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2101      	movs	r1, #1
 800152e:	438a      	bics	r2, r1
 8001530:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153c:	491d      	ldr	r1, [pc, #116]	@ (80015b4 <HAL_DMA_Abort_IT+0xec>)
 800153e:	400a      	ands	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001542:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_DMA_Abort_IT+0xf0>)
 8001544:	6859      	ldr	r1, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	221c      	movs	r2, #28
 800154c:	4013      	ands	r3, r2
 800154e:	2201      	movs	r2, #1
 8001550:	409a      	lsls	r2, r3
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_DMA_Abort_IT+0xf0>)
 8001554:	430a      	orrs	r2, r1
 8001556:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001560:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00c      	beq.n	8001584 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001574:	490f      	ldr	r1, [pc, #60]	@ (80015b4 <HAL_DMA_Abort_IT+0xec>)
 8001576:	400a      	ands	r2, r1
 8001578:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001582:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2225      	movs	r2, #37	@ 0x25
 8001588:	2101      	movs	r1, #1
 800158a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2224      	movs	r2, #36	@ 0x24
 8001590:	2100      	movs	r1, #0
 8001592:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	0010      	movs	r0, r2
 80015a4:	4798      	blx	r3
    }
  }
  return status;
 80015a6:	230f      	movs	r3, #15
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	781b      	ldrb	r3, [r3, #0]
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b004      	add	sp, #16
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	fffffeff 	.word	0xfffffeff
 80015b8:	40020000 	.word	0x40020000

080015bc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80015ca:	e153      	b.n	8001874 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2101      	movs	r1, #1
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4091      	lsls	r1, r2
 80015d6:	000a      	movs	r2, r1
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d100      	bne.n	80015e4 <HAL_GPIO_Init+0x28>
 80015e2:	e144      	b.n	800186e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x38>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b12      	cmp	r3, #18
 80015f2:	d125      	bne.n	8001640 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	58d3      	ldr	r3, [r2, r3]
 8001600:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2207      	movs	r2, #7
 8001606:	4013      	ands	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	409a      	lsls	r2, r3
 800160e:	0013      	movs	r3, r2
 8001610:	43da      	mvns	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	4013      	ands	r3, r2
 8001616:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	220f      	movs	r2, #15
 800161e:	401a      	ands	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2107      	movs	r1, #7
 8001624:	400b      	ands	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	6979      	ldr	r1, [r7, #20]
 800163e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	409a      	lsls	r2, r3
 800164e:	0013      	movs	r3, r2
 8001650:	43da      	mvns	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	4013      	ands	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2203      	movs	r2, #3
 800165e:	401a      	ands	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	409a      	lsls	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	4313      	orrs	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d00b      	beq.n	8001694 <HAL_GPIO_Init+0xd8>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d007      	beq.n	8001694 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001688:	2b11      	cmp	r3, #17
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b12      	cmp	r3, #18
 8001692:	d130      	bne.n	80016f6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	409a      	lsls	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	43da      	mvns	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	4013      	ands	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	409a      	lsls	r2, r3
 80016b6:	0013      	movs	r3, r2
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ca:	2201      	movs	r2, #1
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	43da      	mvns	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4013      	ands	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	2201      	movs	r2, #1
 80016e2:	401a      	ands	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d017      	beq.n	800172e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	409a      	lsls	r2, r3
 800170c:	0013      	movs	r3, r2
 800170e:	43da      	mvns	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	4013      	ands	r3, r2
 8001714:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	2380      	movs	r3, #128	@ 0x80
 8001734:	055b      	lsls	r3, r3, #21
 8001736:	4013      	ands	r3, r2
 8001738:	d100      	bne.n	800173c <HAL_GPIO_Init+0x180>
 800173a:	e098      	b.n	800186e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800173c:	4a53      	ldr	r2, [pc, #332]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3318      	adds	r3, #24
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	589b      	ldr	r3, [r3, r2]
 8001748:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2203      	movs	r2, #3
 800174e:	4013      	ands	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	220f      	movs	r2, #15
 8001754:	409a      	lsls	r2, r3
 8001756:	0013      	movs	r3, r2
 8001758:	43da      	mvns	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4013      	ands	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	23a0      	movs	r3, #160	@ 0xa0
 8001764:	05db      	lsls	r3, r3, #23
 8001766:	429a      	cmp	r2, r3
 8001768:	d019      	beq.n	800179e <HAL_GPIO_Init+0x1e2>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a48      	ldr	r2, [pc, #288]	@ (8001890 <HAL_GPIO_Init+0x2d4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0x1de>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a47      	ldr	r2, [pc, #284]	@ (8001894 <HAL_GPIO_Init+0x2d8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00d      	beq.n	8001796 <HAL_GPIO_Init+0x1da>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a46      	ldr	r2, [pc, #280]	@ (8001898 <HAL_GPIO_Init+0x2dc>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d007      	beq.n	8001792 <HAL_GPIO_Init+0x1d6>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a45      	ldr	r2, [pc, #276]	@ (800189c <HAL_GPIO_Init+0x2e0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_GPIO_Init+0x1d2>
 800178a:	2305      	movs	r3, #5
 800178c:	e008      	b.n	80017a0 <HAL_GPIO_Init+0x1e4>
 800178e:	2306      	movs	r3, #6
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x1e4>
 8001792:	2303      	movs	r3, #3
 8001794:	e004      	b.n	80017a0 <HAL_GPIO_Init+0x1e4>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x1e4>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x1e4>
 800179e:	2300      	movs	r3, #0
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	2103      	movs	r1, #3
 80017a4:	400a      	ands	r2, r1
 80017a6:	00d2      	lsls	r2, r2, #3
 80017a8:	4093      	lsls	r3, r2
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80017b0:	4936      	ldr	r1, [pc, #216]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3318      	adds	r3, #24
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80017be:	4a33      	ldr	r2, [pc, #204]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	58d3      	ldr	r3, [r2, r3]
 80017c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	43da      	mvns	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4013      	ands	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	025b      	lsls	r3, r3, #9
 80017d8:	4013      	ands	r3, r2
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80017e4:	4929      	ldr	r1, [pc, #164]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 80017e6:	2280      	movs	r2, #128	@ 0x80
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80017ec:	4a27      	ldr	r2, [pc, #156]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 80017ee:	2384      	movs	r3, #132	@ 0x84
 80017f0:	58d3      	ldr	r3, [r2, r3]
 80017f2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43da      	mvns	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	4013      	ands	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	2380      	movs	r3, #128	@ 0x80
 8001804:	029b      	lsls	r3, r3, #10
 8001806:	4013      	ands	r3, r2
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001812:	491e      	ldr	r1, [pc, #120]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 8001814:	2284      	movs	r2, #132	@ 0x84
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800181a:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43da      	mvns	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	4013      	ands	r3, r2
 8001828:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	2380      	movs	r3, #128	@ 0x80
 8001830:	035b      	lsls	r3, r3, #13
 8001832:	4013      	ands	r3, r2
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800183e:	4b13      	ldr	r3, [pc, #76]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43da      	mvns	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	4013      	ands	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	2380      	movs	r3, #128	@ 0x80
 800185a:	039b      	lsls	r3, r3, #14
 800185c:	4013      	ands	r3, r2
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HAL_GPIO_Init+0x2d0>)
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	3301      	adds	r3, #1
 8001872:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	40da      	lsrs	r2, r3
 800187c:	1e13      	subs	r3, r2, #0
 800187e:	d000      	beq.n	8001882 <HAL_GPIO_Init+0x2c6>
 8001880:	e6a4      	b.n	80015cc <HAL_GPIO_Init+0x10>
  }
}
 8001882:	46c0      	nop			@ (mov r8, r8)
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b006      	add	sp, #24
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021800 	.word	0x40021800
 8001890:	50000400 	.word	0x50000400
 8001894:	50000800 	.word	0x50000800
 8001898:	50000c00 	.word	0x50000c00
 800189c:	50001400 	.word	0x50001400

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	0008      	movs	r0, r1
 80018aa:	0011      	movs	r1, r2
 80018ac:	1cbb      	adds	r3, r7, #2
 80018ae:	1c02      	adds	r2, r0, #0
 80018b0:	801a      	strh	r2, [r3, #0]
 80018b2:	1c7b      	adds	r3, r7, #1
 80018b4:	1c0a      	adds	r2, r1, #0
 80018b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b8:	1c7b      	adds	r3, r7, #1
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018c0:	1cbb      	adds	r3, r7, #2
 80018c2:	881a      	ldrh	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c8:	e003      	b.n	80018d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ca:	1cbb      	adds	r3, r7, #2
 80018cc:	881a      	ldrh	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	0002      	movs	r2, r0
 80018e4:	1dbb      	adds	r3, r7, #6
 80018e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	1dba      	adds	r2, r7, #6
 80018ee:	8812      	ldrh	r2, [r2, #0]
 80018f0:	4013      	ands	r3, r2
 80018f2:	d008      	beq.n	8001906 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80018f6:	1dba      	adds	r2, r7, #6
 80018f8:	8812      	ldrh	r2, [r2, #0]
 80018fa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80018fc:	1dbb      	adds	r3, r7, #6
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	0018      	movs	r0, r3
 8001902:	f7fe fdbd 	bl	8000480 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	1dba      	adds	r2, r7, #6
 800190c:	8812      	ldrh	r2, [r2, #0]
 800190e:	4013      	ands	r3, r2
 8001910:	d008      	beq.n	8001924 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001914:	1dba      	adds	r2, r7, #6
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800191a:	1dbb      	adds	r3, r7, #6
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	0018      	movs	r0, r3
 8001920:	f7fe fdc6 	bl	80004b0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001924:	46c0      	nop			@ (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021800 	.word	0x40021800

08001930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e1d0      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	4013      	ands	r3, r2
 800194a:	d100      	bne.n	800194e <HAL_RCC_OscConfig+0x1e>
 800194c:	e069      	b.n	8001a22 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800194e:	4bc8      	ldr	r3, [pc, #800]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2238      	movs	r2, #56	@ 0x38
 8001954:	4013      	ands	r3, r2
 8001956:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b08      	cmp	r3, #8
 800195c:	d105      	bne.n	800196a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d15d      	bne.n	8001a22 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1bc      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	429a      	cmp	r2, r3
 8001974:	d107      	bne.n	8001986 <HAL_RCC_OscConfig+0x56>
 8001976:	4bbe      	ldr	r3, [pc, #760]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4bbd      	ldr	r3, [pc, #756]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 800197c:	2180      	movs	r1, #128	@ 0x80
 800197e:	0249      	lsls	r1, r1, #9
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e020      	b.n	80019c8 <HAL_RCC_OscConfig+0x98>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	23a0      	movs	r3, #160	@ 0xa0
 800198c:	02db      	lsls	r3, r3, #11
 800198e:	429a      	cmp	r2, r3
 8001990:	d10e      	bne.n	80019b0 <HAL_RCC_OscConfig+0x80>
 8001992:	4bb7      	ldr	r3, [pc, #732]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4bb6      	ldr	r3, [pc, #728]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001998:	2180      	movs	r1, #128	@ 0x80
 800199a:	02c9      	lsls	r1, r1, #11
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	4bb3      	ldr	r3, [pc, #716]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4bb2      	ldr	r3, [pc, #712]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 80019a6:	2180      	movs	r1, #128	@ 0x80
 80019a8:	0249      	lsls	r1, r1, #9
 80019aa:	430a      	orrs	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0x98>
 80019b0:	4baf      	ldr	r3, [pc, #700]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4bae      	ldr	r3, [pc, #696]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 80019b6:	49af      	ldr	r1, [pc, #700]	@ (8001c74 <HAL_RCC_OscConfig+0x344>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	4bac      	ldr	r3, [pc, #688]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4bab      	ldr	r3, [pc, #684]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 80019c2:	49ad      	ldr	r1, [pc, #692]	@ (8001c78 <HAL_RCC_OscConfig+0x348>)
 80019c4:	400a      	ands	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d014      	beq.n	80019fa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fc0c 	bl	80011ec <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80019da:	f7ff fc07 	bl	80011ec <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	@ 0x64
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e17b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ec:	4ba0      	ldr	r3, [pc, #640]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	029b      	lsls	r3, r3, #10
 80019f4:	4013      	ands	r3, r2
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0xaa>
 80019f8:	e013      	b.n	8001a22 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff fbf7 	bl	80011ec <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fbf2 	bl	80011ec <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e166      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a16:	4b96      	ldr	r3, [pc, #600]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	@ 0x80
 8001a1c:	029b      	lsls	r3, r3, #10
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d100      	bne.n	8001a2e <HAL_RCC_OscConfig+0xfe>
 8001a2c:	e086      	b.n	8001b3c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2e:	4b90      	ldr	r3, [pc, #576]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2238      	movs	r2, #56	@ 0x38
 8001a34:	4013      	ands	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d12f      	bne.n	8001a9e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e14c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4a:	4b89      	ldr	r3, [pc, #548]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4a8b      	ldr	r2, [pc, #556]	@ (8001c7c <HAL_RCC_OscConfig+0x34c>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	0019      	movs	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	021a      	lsls	r2, r3, #8
 8001a5a:	4b85      	ldr	r3, [pc, #532]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d112      	bne.n	8001a8c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a66:	4b82      	ldr	r3, [pc, #520]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a85      	ldr	r2, [pc, #532]	@ (8001c80 <HAL_RCC_OscConfig+0x350>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	4b7e      	ldr	r3, [pc, #504]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a7a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0adb      	lsrs	r3, r3, #11
 8001a80:	2207      	movs	r2, #7
 8001a82:	4013      	ands	r3, r2
 8001a84:	4a7f      	ldr	r2, [pc, #508]	@ (8001c84 <HAL_RCC_OscConfig+0x354>)
 8001a86:	40da      	lsrs	r2, r3
 8001a88:	4b7f      	ldr	r3, [pc, #508]	@ (8001c88 <HAL_RCC_OscConfig+0x358>)
 8001a8a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8001c8c <HAL_RCC_OscConfig+0x35c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff fb4f 	bl	8001134 <HAL_InitTick>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d050      	beq.n	8001b3c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e122      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d030      	beq.n	8001b08 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001aa6:	4b72      	ldr	r3, [pc, #456]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a75      	ldr	r2, [pc, #468]	@ (8001c80 <HAL_RCC_OscConfig+0x350>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	4b6e      	ldr	r3, [pc, #440]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001aba:	4b6d      	ldr	r3, [pc, #436]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b6c      	ldr	r3, [pc, #432]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001ac0:	2180      	movs	r1, #128	@ 0x80
 8001ac2:	0049      	lsls	r1, r1, #1
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb90 	bl	80011ec <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fb8b 	bl	80011ec <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0ff      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae4:	4b62      	ldr	r3, [pc, #392]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4013      	ands	r3, r2
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a61      	ldr	r2, [pc, #388]	@ (8001c7c <HAL_RCC_OscConfig+0x34c>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	021a      	lsls	r2, r3, #8
 8001b00:	4b5b      	ldr	r3, [pc, #364]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001b02:	430a      	orrs	r2, r1
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	e019      	b.n	8001b3c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001b08:	4b59      	ldr	r3, [pc, #356]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b58      	ldr	r3, [pc, #352]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001b0e:	4960      	ldr	r1, [pc, #384]	@ (8001c90 <HAL_RCC_OscConfig+0x360>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff fb6a 	bl	80011ec <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff fb65 	bl	80011ec <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0d9      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b30:	4b4f      	ldr	r3, [pc, #316]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	@ 0x80
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2208      	movs	r2, #8
 8001b42:	4013      	ands	r3, r2
 8001b44:	d042      	beq.n	8001bcc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b46:	4b4a      	ldr	r3, [pc, #296]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2238      	movs	r2, #56	@ 0x38
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b18      	cmp	r3, #24
 8001b50:	d105      	bne.n	8001b5e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d138      	bne.n	8001bcc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0c2      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d019      	beq.n	8001b9a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b66:	4b42      	ldr	r3, [pc, #264]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001b68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b6a:	4b41      	ldr	r3, [pc, #260]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff fb3b 	bl	80011ec <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff fb36 	bl	80011ec <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e0aa      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001b8e:	4b38      	ldr	r3, [pc, #224]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	2202      	movs	r2, #2
 8001b94:	4013      	ands	r3, r2
 8001b96:	d0f1      	beq.n	8001b7c <HAL_RCC_OscConfig+0x24c>
 8001b98:	e018      	b.n	8001bcc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b9a:	4b35      	ldr	r3, [pc, #212]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001b9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b9e:	4b34      	ldr	r3, [pc, #208]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	438a      	bics	r2, r1
 8001ba4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fb21 	bl	80011ec <HAL_GetTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fb1c 	bl	80011ec <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e090      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d1f1      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d100      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2a8>
 8001bd6:	e084      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd8:	230f      	movs	r3, #15
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001be0:	4b23      	ldr	r3, [pc, #140]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2238      	movs	r2, #56	@ 0x38
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d000      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2c6>
 8001bf4:	e075      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e074      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d106      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2e0>
 8001c02:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001c04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c06:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c0e:	e01c      	b.n	8001c4a <HAL_RCC_OscConfig+0x31a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d10c      	bne.n	8001c32 <HAL_RCC_OscConfig+0x302>
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001c1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c1c:	4b14      	ldr	r3, [pc, #80]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001c1e:	2104      	movs	r1, #4
 8001c20:	430a      	orrs	r2, r1
 8001c22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001c26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c30:	e00b      	b.n	8001c4a <HAL_RCC_OscConfig+0x31a>
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001c34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001c38:	2101      	movs	r1, #1
 8001c3a:	438a      	bics	r2, r1
 8001c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001c40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_RCC_OscConfig+0x340>)
 8001c44:	2104      	movs	r1, #4
 8001c46:	438a      	bics	r2, r1
 8001c48:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d028      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff facb 	bl	80011ec <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c5a:	e01d      	b.n	8001c98 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fac6 	bl	80011ec <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	4a0b      	ldr	r2, [pc, #44]	@ (8001c94 <HAL_RCC_OscConfig+0x364>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d915      	bls.n	8001c98 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e039      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
 8001c70:	40021000 	.word	0x40021000
 8001c74:	fffeffff 	.word	0xfffeffff
 8001c78:	fffbffff 	.word	0xfffbffff
 8001c7c:	ffff80ff 	.word	0xffff80ff
 8001c80:	ffffc7ff 	.word	0xffffc7ff
 8001c84:	02dc6c00 	.word	0x02dc6c00
 8001c88:	2000000c 	.word	0x2000000c
 8001c8c:	20000010 	.word	0x20000010
 8001c90:	fffffeff 	.word	0xfffffeff
 8001c94:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c98:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <HAL_RCC_OscConfig+0x3bc>)
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d0dc      	beq.n	8001c5c <HAL_RCC_OscConfig+0x32c>
 8001ca2:	e013      	b.n	8001ccc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff faa2 	bl	80011ec <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001cac:	e009      	b.n	8001cc2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7ff fa9d 	bl	80011ec <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <HAL_RCC_OscConfig+0x3c0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e010      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_RCC_OscConfig+0x3bc>)
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ccc:	230f      	movs	r3, #15
 8001cce:	18fb      	adds	r3, r7, r3
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d105      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001cd6:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_RCC_OscConfig+0x3bc>)
 8001cd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <HAL_RCC_OscConfig+0x3bc>)
 8001cdc:	4905      	ldr	r1, [pc, #20]	@ (8001cf4 <HAL_RCC_OscConfig+0x3c4>)
 8001cde:	400a      	ands	r2, r1
 8001ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b006      	add	sp, #24
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	00001388 	.word	0x00001388
 8001cf4:	efffffff 	.word	0xefffffff

08001cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0e9      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b76      	ldr	r3, [pc, #472]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2207      	movs	r2, #7
 8001d12:	4013      	ands	r3, r2
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d91e      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b73      	ldr	r3, [pc, #460]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2207      	movs	r2, #7
 8001d20:	4393      	bics	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	4b70      	ldr	r3, [pc, #448]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff fa5e 	bl	80011ec <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d34:	e009      	b.n	8001d4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d36:	f7ff fa59 	bl	80011ec <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	4a6a      	ldr	r2, [pc, #424]	@ (8001eec <HAL_RCC_ClockConfig+0x1f4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0ca      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d4a:	4b67      	ldr	r3, [pc, #412]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2207      	movs	r2, #7
 8001d50:	4013      	ands	r3, r2
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1ee      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d017      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2204      	movs	r2, #4
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d008      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d6c:	4b60      	ldr	r3, [pc, #384]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a60      	ldr	r2, [pc, #384]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1fc>)
 8001d72:	401a      	ands	r2, r3
 8001d74:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d76:	21b0      	movs	r1, #176	@ 0xb0
 8001d78:	0109      	lsls	r1, r1, #4
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	4a5d      	ldr	r2, [pc, #372]	@ (8001ef8 <HAL_RCC_ClockConfig+0x200>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	4b58      	ldr	r3, [pc, #352]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d055      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001d9c:	4b54      	ldr	r3, [pc, #336]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	221c      	movs	r2, #28
 8001da2:	4393      	bics	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	4b51      	ldr	r3, [pc, #324]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db8:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	029b      	lsls	r3, r3, #10
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d11f      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e08b      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd0:	4b47      	ldr	r3, [pc, #284]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	@ 0x80
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d113      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e07f      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001de8:	4b41      	ldr	r3, [pc, #260]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dec:	2202      	movs	r2, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	d108      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e074      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001df6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e06d      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e04:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2207      	movs	r2, #7
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4b37      	ldr	r3, [pc, #220]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e18:	f7ff f9e8 	bl	80011ec <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e20:	e009      	b.n	8001e36 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e22:	f7ff f9e3 	bl	80011ec <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8001eec <HAL_RCC_ClockConfig+0x1f4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e054      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2238      	movs	r2, #56	@ 0x38
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1ec      	bne.n	8001e22 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	4013      	ands	r3, r2
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d21e      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e68:	f7ff f9c0 	bl	80011ec <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e70:	e009      	b.n	8001e86 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e72:	f7ff f9bb 	bl	80011ec <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001eec <HAL_RCC_ClockConfig+0x1f4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e02c      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e86:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2204      	movs	r2, #4
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d009      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4a16      	ldr	r2, [pc, #88]	@ (8001efc <HAL_RCC_ClockConfig+0x204>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001eb2:	f000 f82b 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001eb6:	0001      	movs	r1, r0
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f00 <HAL_RCC_ClockConfig+0x208>)
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	58d3      	ldr	r3, [r2, r3]
 8001ec8:	221f      	movs	r2, #31
 8001eca:	4013      	ands	r3, r2
 8001ecc:	000a      	movs	r2, r1
 8001ece:	40da      	lsrs	r2, r3
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <HAL_RCC_ClockConfig+0x20c>)
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <HAL_RCC_ClockConfig+0x210>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7ff f92b 	bl	8001134 <HAL_InitTick>
 8001ede:	0003      	movs	r3, r0
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	00001388 	.word	0x00001388
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	ffff84ff 	.word	0xffff84ff
 8001ef8:	fffff0ff 	.word	0xfffff0ff
 8001efc:	ffff8fff 	.word	0xffff8fff
 8001f00:	08004c20 	.word	0x08004c20
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	20000010 	.word	0x20000010

08001f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f12:	4b1c      	ldr	r3, [pc, #112]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2238      	movs	r2, #56	@ 0x38
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d10f      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f1c:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0adb      	lsrs	r3, r3, #11
 8001f22:	2207      	movs	r2, #7
 8001f24:	4013      	ands	r3, r2
 8001f26:	2201      	movs	r2, #1
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	0013      	movs	r3, r2
 8001f2c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f2e:	6839      	ldr	r1, [r7, #0]
 8001f30:	4815      	ldr	r0, [pc, #84]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001f32:	f7fe f8f3 	bl	800011c <__udivsi3>
 8001f36:	0003      	movs	r3, r0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	e01e      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2238      	movs	r2, #56	@ 0x38
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x80>)
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2238      	movs	r2, #56	@ 0x38
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d103      	bne.n	8001f62 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	e00b      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2238      	movs	r2, #56	@ 0x38
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b18      	cmp	r3, #24
 8001f6c:	d103      	bne.n	8001f76 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f6e:	23fa      	movs	r3, #250	@ 0xfa
 8001f70:	01db      	lsls	r3, r3, #7
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	e001      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001f7a:	687b      	ldr	r3, [r7, #4]
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	02dc6c00 	.word	0x02dc6c00
 8001f8c:	007a1200 	.word	0x007a1200

08001f90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f94:	4b02      	ldr	r3, [pc, #8]	@ (8001fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	2000000c 	.word	0x2000000c

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001fa8:	f7ff fff2 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fac:	0001      	movs	r1, r0
 8001fae:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0b1b      	lsrs	r3, r3, #12
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001fba:	0092      	lsls	r2, r2, #2
 8001fbc:	58d3      	ldr	r3, [r2, r3]
 8001fbe:	221f      	movs	r2, #31
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	40d9      	lsrs	r1, r3
 8001fc4:	000b      	movs	r3, r1
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08004c60 	.word	0x08004c60

08001fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001fdc:	2313      	movs	r3, #19
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fe4:	2312      	movs	r3, #18
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	@ 0x80
 8001ff2:	029b      	lsls	r3, r3, #10
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d100      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ff8:	e079      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2011      	movs	r0, #17
 8001ffc:	183b      	adds	r3, r7, r0
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002002:	4b64      	ldr	r3, [pc, #400]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002004:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002006:	2380      	movs	r3, #128	@ 0x80
 8002008:	055b      	lsls	r3, r3, #21
 800200a:	4013      	ands	r3, r2
 800200c:	d110      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200e:	4b61      	ldr	r3, [pc, #388]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002010:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002012:	4b60      	ldr	r3, [pc, #384]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002014:	2180      	movs	r1, #128	@ 0x80
 8002016:	0549      	lsls	r1, r1, #21
 8002018:	430a      	orrs	r2, r1
 800201a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800201c:	4b5d      	ldr	r3, [pc, #372]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800201e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	055b      	lsls	r3, r3, #21
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202a:	183b      	adds	r3, r7, r0
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002030:	4b58      	ldr	r3, [pc, #352]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002032:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002034:	23c0      	movs	r3, #192	@ 0xc0
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4013      	ands	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d019      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	d014      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800204c:	4b51      	ldr	r3, [pc, #324]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800204e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002050:	4a51      	ldr	r2, [pc, #324]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002052:	4013      	ands	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002056:	4b4f      	ldr	r3, [pc, #316]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002058:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800205a:	4b4e      	ldr	r3, [pc, #312]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800205c:	2180      	movs	r1, #128	@ 0x80
 800205e:	0249      	lsls	r1, r1, #9
 8002060:	430a      	orrs	r2, r1
 8002062:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002064:	4b4b      	ldr	r3, [pc, #300]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002066:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002068:	4b4a      	ldr	r3, [pc, #296]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800206a:	494c      	ldr	r1, [pc, #304]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800206c:	400a      	ands	r2, r1
 800206e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002070:	4b48      	ldr	r3, [pc, #288]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2201      	movs	r2, #1
 800207a:	4013      	ands	r3, r2
 800207c:	d016      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7ff f8b5 	bl	80011ec <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002086:	e00c      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7ff f8b0 	bl	80011ec <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	4a43      	ldr	r2, [pc, #268]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d904      	bls.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002098:	2313      	movs	r3, #19
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	2203      	movs	r2, #3
 800209e:	701a      	strb	r2, [r3, #0]
          break;
 80020a0:	e004      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	2202      	movs	r2, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	d0ed      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80020ac:	2313      	movs	r3, #19
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b6:	4b37      	ldr	r3, [pc, #220]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ba:	4a37      	ldr	r2, [pc, #220]	@ (8002198 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020ca:	e005      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020cc:	2312      	movs	r3, #18
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	2213      	movs	r2, #19
 80020d2:	18ba      	adds	r2, r7, r2
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020d8:	2311      	movs	r3, #17
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d105      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020e8:	492e      	ldr	r1, [pc, #184]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2201      	movs	r2, #1
 80020f4:	4013      	ands	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f8:	4b26      	ldr	r3, [pc, #152]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fc:	2203      	movs	r2, #3
 80020fe:	4393      	bics	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	4b23      	ldr	r3, [pc, #140]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002108:	430a      	orrs	r2, r1
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2240      	movs	r2, #64	@ 0x40
 8002112:	4013      	ands	r3, r2
 8002114:	d009      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002116:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	4a23      	ldr	r2, [pc, #140]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002126:	430a      	orrs	r2, r1
 8002128:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	01db      	lsls	r3, r3, #7
 8002132:	4013      	ands	r3, r2
 8002134:	d008      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	0899      	lsrs	r1, r3, #2
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002144:	430a      	orrs	r2, r1
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	@ 0x80
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	4013      	ands	r3, r2
 8002152:	d009      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002154:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002158:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002164:	430a      	orrs	r2, r1
 8002166:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	da09      	bge.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	22e0      	movs	r2, #224	@ 0xe0
 8002176:	4393      	bics	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002184:	2312      	movs	r3, #18
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	781b      	ldrb	r3, [r3, #0]
}
 800218a:	0018      	movs	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	b006      	add	sp, #24
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	40021000 	.word	0x40021000
 8002198:	fffffcff 	.word	0xfffffcff
 800219c:	fffeffff 	.word	0xfffeffff
 80021a0:	00001388 	.word	0x00001388
 80021a4:	efffffff 	.word	0xefffffff
 80021a8:	ffffcfff 	.word	0xffffcfff
 80021ac:	ffff3fff 	.word	0xffff3fff

080021b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0a8      	b.n	8002314 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	2382      	movs	r3, #130	@ 0x82
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d009      	beq.n	80021ea <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	61da      	str	r2, [r3, #28]
 80021dc:	e005      	b.n	80021ea <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	225d      	movs	r2, #93	@ 0x5d
 80021f4:	5c9b      	ldrb	r3, [r3, r2]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	225c      	movs	r2, #92	@ 0x5c
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f7fe fd20 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	225d      	movs	r2, #93	@ 0x5d
 8002210:	2102      	movs	r1, #2
 8002212:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2140      	movs	r1, #64	@ 0x40
 8002220:	438a      	bics	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	23e0      	movs	r3, #224	@ 0xe0
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	429a      	cmp	r2, r3
 800222e:	d902      	bls.n	8002236 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e002      	b.n	800223c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002236:	2380      	movs	r3, #128	@ 0x80
 8002238:	015b      	lsls	r3, r3, #5
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	23f0      	movs	r3, #240	@ 0xf0
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	429a      	cmp	r2, r3
 8002246:	d008      	beq.n	800225a <HAL_SPI_Init+0xaa>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	23e0      	movs	r3, #224	@ 0xe0
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	429a      	cmp	r2, r3
 8002252:	d002      	beq.n	800225a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	2382      	movs	r3, #130	@ 0x82
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	401a      	ands	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6899      	ldr	r1, [r3, #8]
 8002268:	2384      	movs	r3, #132	@ 0x84
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	400b      	ands	r3, r1
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2102      	movs	r1, #2
 8002276:	400b      	ands	r3, r1
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	2101      	movs	r1, #1
 8002280:	400b      	ands	r3, r1
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6999      	ldr	r1, [r3, #24]
 8002288:	2380      	movs	r3, #128	@ 0x80
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	400b      	ands	r3, r1
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	2138      	movs	r1, #56	@ 0x38
 8002296:	400b      	ands	r3, r1
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	2180      	movs	r1, #128	@ 0x80
 80022a0:	400b      	ands	r3, r1
 80022a2:	431a      	orrs	r2, r3
 80022a4:	0011      	movs	r1, r2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	401a      	ands	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	2204      	movs	r2, #4
 80022c0:	401a      	ands	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	2110      	movs	r1, #16
 80022c8:	400b      	ands	r3, r1
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d0:	2108      	movs	r1, #8
 80022d2:	400b      	ands	r3, r1
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68d9      	ldr	r1, [r3, #12]
 80022da:	23f0      	movs	r3, #240	@ 0xf0
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	400b      	ands	r3, r1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	0011      	movs	r1, r2
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	015b      	lsls	r3, r3, #5
 80022ea:	401a      	ands	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4907      	ldr	r1, [pc, #28]	@ (800231c <HAL_SPI_Init+0x16c>)
 8002300:	400a      	ands	r2, r1
 8002302:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	225d      	movs	r2, #93	@ 0x5d
 800230e:	2101      	movs	r1, #1
 8002310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b004      	add	sp, #16
 800231a:	bd80      	pop	{r7, pc}
 800231c:	fffff7ff 	.word	0xfffff7ff

08002320 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	001a      	movs	r2, r3
 800232e:	1cbb      	adds	r3, r7, #2
 8002330:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002332:	2301      	movs	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002336:	2323      	movs	r3, #35	@ 0x23
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	225c      	movs	r2, #92	@ 0x5c
 8002342:	5c9b      	ldrb	r3, [r3, r2]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_SPI_TransmitReceive+0x2c>
 8002348:	2302      	movs	r3, #2
 800234a:	e21f      	b.n	800278c <HAL_SPI_TransmitReceive+0x46c>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	225c      	movs	r2, #92	@ 0x5c
 8002350:	2101      	movs	r1, #1
 8002352:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002354:	f7fe ff4a 	bl	80011ec <HAL_GetTick>
 8002358:	0003      	movs	r3, r0
 800235a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800235c:	201b      	movs	r0, #27
 800235e:	183b      	adds	r3, r7, r0
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	215d      	movs	r1, #93	@ 0x5d
 8002364:	5c52      	ldrb	r2, [r2, r1]
 8002366:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800236e:	2312      	movs	r3, #18
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	1cba      	adds	r2, r7, #2
 8002374:	8812      	ldrh	r2, [r2, #0]
 8002376:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 8002378:	2310      	movs	r3, #16
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	1cba      	adds	r2, r7, #2
 800237e:	8812      	ldrh	r2, [r2, #0]
 8002380:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002382:	183b      	adds	r3, r7, r0
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d011      	beq.n	80023ae <HAL_SPI_TransmitReceive+0x8e>
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	2382      	movs	r3, #130	@ 0x82
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	429a      	cmp	r2, r3
 8002392:	d107      	bne.n	80023a4 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d103      	bne.n	80023a4 <HAL_SPI_TransmitReceive+0x84>
 800239c:	183b      	adds	r3, r7, r0
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d004      	beq.n	80023ae <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_BUSY;
 80023a4:	2323      	movs	r3, #35	@ 0x23
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	2202      	movs	r2, #2
 80023aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80023ac:	e1e3      	b.n	8002776 <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_SPI_TransmitReceive+0xa2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_SPI_TransmitReceive+0xa2>
 80023ba:	1cbb      	adds	r3, r7, #2
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d104      	bne.n	80023cc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80023c2:	2323      	movs	r3, #35	@ 0x23
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80023ca:	e1d4      	b.n	8002776 <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	225d      	movs	r2, #93	@ 0x5d
 80023d0:	5c9b      	ldrb	r3, [r3, r2]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d003      	beq.n	80023e0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	225d      	movs	r2, #93	@ 0x5d
 80023dc:	2105      	movs	r1, #5
 80023de:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1cba      	adds	r2, r7, #2
 80023f0:	2146      	movs	r1, #70	@ 0x46
 80023f2:	8812      	ldrh	r2, [r2, #0]
 80023f4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1cba      	adds	r2, r7, #2
 80023fa:	2144      	movs	r1, #68	@ 0x44
 80023fc:	8812      	ldrh	r2, [r2, #0]
 80023fe:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1cba      	adds	r2, r7, #2
 800240a:	8812      	ldrh	r2, [r2, #0]
 800240c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1cba      	adds	r2, r7, #2
 8002412:	8812      	ldrh	r2, [r2, #0]
 8002414:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	23e0      	movs	r3, #224	@ 0xe0
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	429a      	cmp	r2, r3
 800242c:	d804      	bhi.n	8002438 <HAL_SPI_TransmitReceive+0x118>
 800242e:	2310      	movs	r3, #16
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d908      	bls.n	800244a <HAL_SPI_TransmitReceive+0x12a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	49cb      	ldr	r1, [pc, #812]	@ (8002770 <HAL_SPI_TransmitReceive+0x450>)
 8002444:	400a      	ands	r2, r1
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	e008      	b.n	800245c <HAL_SPI_TransmitReceive+0x13c>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2180      	movs	r1, #128	@ 0x80
 8002456:	0149      	lsls	r1, r1, #5
 8002458:	430a      	orrs	r2, r1
 800245a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2240      	movs	r2, #64	@ 0x40
 8002464:	4013      	ands	r3, r2
 8002466:	2b40      	cmp	r3, #64	@ 0x40
 8002468:	d007      	beq.n	800247a <HAL_SPI_TransmitReceive+0x15a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2140      	movs	r1, #64	@ 0x40
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	23e0      	movs	r3, #224	@ 0xe0
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	429a      	cmp	r2, r3
 8002484:	d800      	bhi.n	8002488 <HAL_SPI_TransmitReceive+0x168>
 8002486:	e07f      	b.n	8002588 <HAL_SPI_TransmitReceive+0x268>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_SPI_TransmitReceive+0x17c>
 8002490:	2312      	movs	r3, #18
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d000      	beq.n	800249c <HAL_SPI_TransmitReceive+0x17c>
 800249a:	e069      	b.n	8002570 <HAL_SPI_TransmitReceive+0x250>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a0:	881a      	ldrh	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ac:	1c9a      	adds	r2, r3, #2
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c0:	e056      	b.n	8002570 <HAL_SPI_TransmitReceive+0x250>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2202      	movs	r2, #2
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d11b      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x1e8>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_SPI_TransmitReceive+0x1e8>
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d113      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x1e8>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e4:	881a      	ldrh	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	1c9a      	adds	r2, r3, #2
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2201      	movs	r2, #1
 8002510:	4013      	ands	r3, r2
 8002512:	2b01      	cmp	r3, #1
 8002514:	d11c      	bne.n	8002550 <HAL_SPI_TransmitReceive+0x230>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2246      	movs	r2, #70	@ 0x46
 800251a:	5a9b      	ldrh	r3, [r3, r2]
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <HAL_SPI_TransmitReceive+0x230>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	b292      	uxth	r2, r2
 800252e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	1c9a      	adds	r2, r3, #2
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2246      	movs	r2, #70	@ 0x46
 800253e:	5a9b      	ldrh	r3, [r3, r2]
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b299      	uxth	r1, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2246      	movs	r2, #70	@ 0x46
 800254a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800254c:	2301      	movs	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002550:	f7fe fe4c 	bl	80011ec <HAL_GetTick>
 8002554:	0002      	movs	r2, r0
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800255c:	429a      	cmp	r2, r3
 800255e:	d807      	bhi.n	8002570 <HAL_SPI_TransmitReceive+0x250>
 8002560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002562:	3301      	adds	r3, #1
 8002564:	d004      	beq.n	8002570 <HAL_SPI_TransmitReceive+0x250>
      {
        errorcode = HAL_TIMEOUT;
 8002566:	2323      	movs	r3, #35	@ 0x23
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2203      	movs	r2, #3
 800256c:	701a      	strb	r2, [r3, #0]
        goto error;
 800256e:	e102      	b.n	8002776 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1a3      	bne.n	80024c2 <HAL_SPI_TransmitReceive+0x1a2>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2246      	movs	r2, #70	@ 0x46
 800257e:	5a9b      	ldrh	r3, [r3, r2]
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d19d      	bne.n	80024c2 <HAL_SPI_TransmitReceive+0x1a2>
 8002586:	e0e2      	b.n	800274e <HAL_SPI_TransmitReceive+0x42e>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_SPI_TransmitReceive+0x27c>
 8002590:	2312      	movs	r3, #18
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d000      	beq.n	800259c <HAL_SPI_TransmitReceive+0x27c>
 800259a:	e0cb      	b.n	8002734 <HAL_SPI_TransmitReceive+0x414>
    {
      if (hspi->TxXferCount > 1U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d912      	bls.n	80025cc <HAL_SPI_TransmitReceive+0x2ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025aa:	881a      	ldrh	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b6:	1c9a      	adds	r2, r3, #2
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b02      	subs	r3, #2
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025ca:	e0b3      	b.n	8002734 <HAL_SPI_TransmitReceive+0x414>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f2:	e09f      	b.n	8002734 <HAL_SPI_TransmitReceive+0x414>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d134      	bne.n	800266c <HAL_SPI_TransmitReceive+0x34c>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d02f      	beq.n	800266c <HAL_SPI_TransmitReceive+0x34c>
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	2b01      	cmp	r3, #1
 8002610:	d12c      	bne.n	800266c <HAL_SPI_TransmitReceive+0x34c>
      {
        if (hspi->TxXferCount > 1U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b01      	cmp	r3, #1
 800261a:	d912      	bls.n	8002642 <HAL_SPI_TransmitReceive+0x322>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002620:	881a      	ldrh	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262c:	1c9a      	adds	r2, r3, #2
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b02      	subs	r3, #2
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002640:	e012      	b.n	8002668 <HAL_SPI_TransmitReceive+0x348>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	330c      	adds	r3, #12
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2201      	movs	r2, #1
 8002674:	4013      	ands	r3, r2
 8002676:	2b01      	cmp	r3, #1
 8002678:	d149      	bne.n	800270e <HAL_SPI_TransmitReceive+0x3ee>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2246      	movs	r2, #70	@ 0x46
 800267e:	5a9b      	ldrh	r3, [r3, r2]
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d043      	beq.n	800270e <HAL_SPI_TransmitReceive+0x3ee>
      {
        if (hspi->RxXferCount > 1U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2246      	movs	r2, #70	@ 0x46
 800268a:	5a9b      	ldrh	r3, [r3, r2]
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d924      	bls.n	80026dc <HAL_SPI_TransmitReceive+0x3bc>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	b292      	uxth	r2, r2
 800269e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	1c9a      	adds	r2, r3, #2
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2246      	movs	r2, #70	@ 0x46
 80026ae:	5a9b      	ldrh	r3, [r3, r2]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b02      	subs	r3, #2
 80026b4:	b299      	uxth	r1, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2246      	movs	r2, #70	@ 0x46
 80026ba:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2246      	movs	r2, #70	@ 0x46
 80026c0:	5a9b      	ldrh	r3, [r3, r2]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d820      	bhi.n	800270a <HAL_SPI_TransmitReceive+0x3ea>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2180      	movs	r1, #128	@ 0x80
 80026d4:	0149      	lsls	r1, r1, #5
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	e016      	b.n	800270a <HAL_SPI_TransmitReceive+0x3ea>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	001a      	movs	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2246      	movs	r2, #70	@ 0x46
 80026fc:	5a9b      	ldrh	r3, [r3, r2]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b299      	uxth	r1, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2246      	movs	r2, #70	@ 0x46
 8002708:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800270a:	2301      	movs	r3, #1
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800270e:	f7fe fd6d 	bl	80011ec <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800271a:	429a      	cmp	r2, r3
 800271c:	d802      	bhi.n	8002724 <HAL_SPI_TransmitReceive+0x404>
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	3301      	adds	r3, #1
 8002722:	d102      	bne.n	800272a <HAL_SPI_TransmitReceive+0x40a>
 8002724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <HAL_SPI_TransmitReceive+0x414>
      {
        errorcode = HAL_TIMEOUT;
 800272a:	2323      	movs	r3, #35	@ 0x23
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2203      	movs	r2, #3
 8002730:	701a      	strb	r2, [r3, #0]
        goto error;
 8002732:	e020      	b.n	8002776 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d000      	beq.n	8002740 <HAL_SPI_TransmitReceive+0x420>
 800273e:	e759      	b.n	80025f4 <HAL_SPI_TransmitReceive+0x2d4>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2246      	movs	r2, #70	@ 0x46
 8002744:	5a9b      	ldrh	r3, [r3, r2]
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d000      	beq.n	800274e <HAL_SPI_TransmitReceive+0x42e>
 800274c:	e752      	b.n	80025f4 <HAL_SPI_TransmitReceive+0x2d4>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	0018      	movs	r0, r3
 8002756:	f000 f94d 	bl	80029f4 <SPI_EndRxTxTransaction>
 800275a:	1e03      	subs	r3, r0, #0
 800275c:	d00a      	beq.n	8002774 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 800275e:	2323      	movs	r3, #35	@ 0x23
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	661a      	str	r2, [r3, #96]	@ 0x60
 800276c:	e003      	b.n	8002776 <HAL_SPI_TransmitReceive+0x456>
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	ffffefff 	.word	0xffffefff
  }

error :
 8002774:	46c0      	nop			@ (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	225d      	movs	r2, #93	@ 0x5d
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	225c      	movs	r2, #92	@ 0x5c
 8002782:	2100      	movs	r1, #0
 8002784:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002786:	2323      	movs	r3, #35	@ 0x23
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	781b      	ldrb	r3, [r3, #0]
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b00a      	add	sp, #40	@ 0x28
 8002792:	bd80      	pop	{r7, pc}

08002794 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	1dfb      	adds	r3, r7, #7
 80027a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027a4:	f7fe fd22 	bl	80011ec <HAL_GetTick>
 80027a8:	0002      	movs	r2, r0
 80027aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	18d3      	adds	r3, r2, r3
 80027b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027b4:	f7fe fd1a 	bl	80011ec <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027bc:	4b3a      	ldr	r3, [pc, #232]	@ (80028a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	015b      	lsls	r3, r3, #5
 80027c2:	0d1b      	lsrs	r3, r3, #20
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	4353      	muls	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ca:	e058      	b.n	800287e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	3301      	adds	r3, #1
 80027d0:	d055      	beq.n	800287e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027d2:	f7fe fd0b 	bl	80011ec <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d902      	bls.n	80027e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d142      	bne.n	800286e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	21e0      	movs	r1, #224	@ 0xe0
 80027f4:	438a      	bics	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	2382      	movs	r3, #130	@ 0x82
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	429a      	cmp	r2, r3
 8002802:	d113      	bne.n	800282c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	2380      	movs	r3, #128	@ 0x80
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	429a      	cmp	r2, r3
 800280e:	d005      	beq.n	800281c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	429a      	cmp	r2, r3
 800281a:	d107      	bne.n	800282c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2140      	movs	r1, #64	@ 0x40
 8002828:	438a      	bics	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	019b      	lsls	r3, r3, #6
 8002834:	429a      	cmp	r2, r3
 8002836:	d110      	bne.n	800285a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	491a      	ldr	r1, [pc, #104]	@ (80028ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002844:	400a      	ands	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2180      	movs	r1, #128	@ 0x80
 8002854:	0189      	lsls	r1, r1, #6
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	225d      	movs	r2, #93	@ 0x5d
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	225c      	movs	r2, #92	@ 0x5c
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e017      	b.n	800289e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	3b01      	subs	r3, #1
 800287c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	4013      	ands	r3, r2
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	425a      	negs	r2, r3
 800288e:	4153      	adcs	r3, r2
 8002890:	b2db      	uxtb	r3, r3
 8002892:	001a      	movs	r2, r3
 8002894:	1dfb      	adds	r3, r7, #7
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d197      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b008      	add	sp, #32
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	2000000c 	.word	0x2000000c
 80028ac:	ffffdfff 	.word	0xffffdfff

080028b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	@ 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80028be:	2317      	movs	r3, #23
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80028c6:	f7fe fc91 	bl	80011ec <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	18d3      	adds	r3, r2, r3
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80028d6:	f7fe fc89 	bl	80011ec <HAL_GetTick>
 80028da:	0003      	movs	r3, r0
 80028dc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	330c      	adds	r3, #12
 80028e4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80028e6:	4b41      	ldr	r3, [pc, #260]	@ (80029ec <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	0013      	movs	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	00da      	lsls	r2, r3, #3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	0d1b      	lsrs	r3, r3, #20
 80028f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f8:	4353      	muls	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80028fc:	e068      	b.n	80029d0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	23c0      	movs	r3, #192	@ 0xc0
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	429a      	cmp	r2, r3
 8002906:	d10a      	bne.n	800291e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	2117      	movs	r1, #23
 8002916:	187b      	adds	r3, r7, r1
 8002918:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800291a:	187b      	adds	r3, r7, r1
 800291c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	d055      	beq.n	80029d0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002924:	f7fe fc62 	bl	80011ec <HAL_GetTick>
 8002928:	0002      	movs	r2, r0
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002930:	429a      	cmp	r2, r3
 8002932:	d902      	bls.n	800293a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d142      	bne.n	80029c0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	21e0      	movs	r1, #224	@ 0xe0
 8002946:	438a      	bics	r2, r1
 8002948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	2382      	movs	r3, #130	@ 0x82
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	429a      	cmp	r2, r3
 8002954:	d113      	bne.n	800297e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	2380      	movs	r3, #128	@ 0x80
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	429a      	cmp	r2, r3
 8002960:	d005      	beq.n	800296e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	429a      	cmp	r2, r3
 800296c:	d107      	bne.n	800297e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2140      	movs	r1, #64	@ 0x40
 800297a:	438a      	bics	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	429a      	cmp	r2, r3
 8002988:	d110      	bne.n	80029ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4916      	ldr	r1, [pc, #88]	@ (80029f0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002996:	400a      	ands	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2180      	movs	r1, #128	@ 0x80
 80029a6:	0189      	lsls	r1, r1, #6
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	225d      	movs	r2, #93	@ 0x5d
 80029b0:	2101      	movs	r1, #1
 80029b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	225c      	movs	r2, #92	@ 0x5c
 80029b8:	2100      	movs	r1, #0
 80029ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e010      	b.n	80029e2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d18e      	bne.n	80028fe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b00a      	add	sp, #40	@ 0x28
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	2000000c 	.word	0x2000000c
 80029f0:	ffffdfff 	.word	0xffffdfff

080029f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	23c0      	movs	r3, #192	@ 0xc0
 8002a04:	0159      	lsls	r1, r3, #5
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f7ff ff4e 	bl	80028b0 <SPI_WaitFifoStateUntilTimeout>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d007      	beq.n	8002a28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e027      	b.n	8002a78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	0013      	movs	r3, r2
 8002a32:	2200      	movs	r2, #0
 8002a34:	2180      	movs	r1, #128	@ 0x80
 8002a36:	f7ff fead 	bl	8002794 <SPI_WaitFlagStateUntilTimeout>
 8002a3a:	1e03      	subs	r3, r0, #0
 8002a3c:	d007      	beq.n	8002a4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a42:	2220      	movs	r2, #32
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e014      	b.n	8002a78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	23c0      	movs	r3, #192	@ 0xc0
 8002a52:	00d9      	lsls	r1, r3, #3
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	0013      	movs	r3, r2
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f7ff ff27 	bl	80028b0 <SPI_WaitFifoStateUntilTimeout>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d007      	beq.n	8002a76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e000      	b.n	8002a78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b004      	add	sp, #16
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e046      	b.n	8002b20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2288      	movs	r2, #136	@ 0x88
 8002a96:	589b      	ldr	r3, [r3, r2]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2284      	movs	r2, #132	@ 0x84
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7fe fa9c 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2288      	movs	r2, #136	@ 0x88
 8002ab0:	2124      	movs	r1, #36	@ 0x24
 8002ab2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 fce4 	bl	800349c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 fb62 	bl	80031a0 <UART_SetConfig>
 8002adc:	0003      	movs	r3, r0
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e01c      	b.n	8002b20 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	490d      	ldr	r1, [pc, #52]	@ (8002b28 <HAL_UART_Init+0xa8>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	212a      	movs	r1, #42	@ 0x2a
 8002b02:	438a      	bics	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 fd73 	bl	8003604 <UART_CheckIdleState>
 8002b1e:	0003      	movs	r3, r0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	ffffb7ff 	.word	0xffffb7ff

08002b2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b2c:	b5b0      	push	{r4, r5, r7, lr}
 8002b2e:	b0aa      	sub	sp, #168	@ 0xa8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	22a4      	movs	r2, #164	@ 0xa4
 8002b3c:	18b9      	adds	r1, r7, r2
 8002b3e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	20a0      	movs	r0, #160	@ 0xa0
 8002b48:	1839      	adds	r1, r7, r0
 8002b4a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	249c      	movs	r4, #156	@ 0x9c
 8002b54:	1939      	adds	r1, r7, r4
 8002b56:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b58:	0011      	movs	r1, r2
 8002b5a:	18bb      	adds	r3, r7, r2
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4aa2      	ldr	r2, [pc, #648]	@ (8002de8 <HAL_UART_IRQHandler+0x2bc>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	2298      	movs	r2, #152	@ 0x98
 8002b64:	18bd      	adds	r5, r7, r2
 8002b66:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002b68:	18bb      	adds	r3, r7, r2
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d11a      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2220      	movs	r2, #32
 8002b76:	4013      	ands	r3, r2
 8002b78:	d015      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b7a:	183b      	adds	r3, r7, r0
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	4013      	ands	r3, r2
 8002b82:	d105      	bne.n	8002b90 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b84:	193b      	adds	r3, r7, r4
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	055b      	lsls	r3, r3, #21
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d100      	bne.n	8002b9a <HAL_UART_IRQHandler+0x6e>
 8002b98:	e2dc      	b.n	8003154 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	0010      	movs	r0, r2
 8002ba2:	4798      	blx	r3
      }
      return;
 8002ba4:	e2d6      	b.n	8003154 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ba6:	2398      	movs	r3, #152	@ 0x98
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d100      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x86>
 8002bb0:	e122      	b.n	8002df8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002bb2:	239c      	movs	r3, #156	@ 0x9c
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a8c      	ldr	r2, [pc, #560]	@ (8002dec <HAL_UART_IRQHandler+0x2c0>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d106      	bne.n	8002bcc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002bbe:	23a0      	movs	r3, #160	@ 0xa0
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a8a      	ldr	r2, [pc, #552]	@ (8002df0 <HAL_UART_IRQHandler+0x2c4>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d100      	bne.n	8002bcc <HAL_UART_IRQHandler+0xa0>
 8002bca:	e115      	b.n	8002df8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bcc:	23a4      	movs	r3, #164	@ 0xa4
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d012      	beq.n	8002bfe <HAL_UART_IRQHandler+0xd2>
 8002bd8:	23a0      	movs	r3, #160	@ 0xa0
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4013      	ands	r3, r2
 8002be4:	d00b      	beq.n	8002bfe <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2290      	movs	r2, #144	@ 0x90
 8002bf2:	589b      	ldr	r3, [r3, r2]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2190      	movs	r1, #144	@ 0x90
 8002bfc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bfe:	23a4      	movs	r3, #164	@ 0xa4
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2202      	movs	r2, #2
 8002c06:	4013      	ands	r3, r2
 8002c08:	d011      	beq.n	8002c2e <HAL_UART_IRQHandler+0x102>
 8002c0a:	239c      	movs	r3, #156	@ 0x9c
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2201      	movs	r2, #1
 8002c12:	4013      	ands	r3, r2
 8002c14:	d00b      	beq.n	8002c2e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2290      	movs	r2, #144	@ 0x90
 8002c22:	589b      	ldr	r3, [r3, r2]
 8002c24:	2204      	movs	r2, #4
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2190      	movs	r1, #144	@ 0x90
 8002c2c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c2e:	23a4      	movs	r3, #164	@ 0xa4
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2204      	movs	r2, #4
 8002c36:	4013      	ands	r3, r2
 8002c38:	d011      	beq.n	8002c5e <HAL_UART_IRQHandler+0x132>
 8002c3a:	239c      	movs	r3, #156	@ 0x9c
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2201      	movs	r2, #1
 8002c42:	4013      	ands	r3, r2
 8002c44:	d00b      	beq.n	8002c5e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2290      	movs	r2, #144	@ 0x90
 8002c52:	589b      	ldr	r3, [r3, r2]
 8002c54:	2202      	movs	r2, #2
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2190      	movs	r1, #144	@ 0x90
 8002c5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c5e:	23a4      	movs	r3, #164	@ 0xa4
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2208      	movs	r2, #8
 8002c66:	4013      	ands	r3, r2
 8002c68:	d017      	beq.n	8002c9a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c6a:	23a0      	movs	r3, #160	@ 0xa0
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2220      	movs	r2, #32
 8002c72:	4013      	ands	r3, r2
 8002c74:	d105      	bne.n	8002c82 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002c76:	239c      	movs	r3, #156	@ 0x9c
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a5b      	ldr	r2, [pc, #364]	@ (8002dec <HAL_UART_IRQHandler+0x2c0>)
 8002c7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c80:	d00b      	beq.n	8002c9a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2208      	movs	r2, #8
 8002c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2290      	movs	r2, #144	@ 0x90
 8002c8e:	589b      	ldr	r3, [r3, r2]
 8002c90:	2208      	movs	r2, #8
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2190      	movs	r1, #144	@ 0x90
 8002c98:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c9a:	23a4      	movs	r3, #164	@ 0xa4
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	@ 0x80
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x1a4>
 8002ca8:	23a0      	movs	r3, #160	@ 0xa0
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	2380      	movs	r3, #128	@ 0x80
 8002cb0:	04db      	lsls	r3, r3, #19
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2280      	movs	r2, #128	@ 0x80
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2290      	movs	r2, #144	@ 0x90
 8002cc4:	589b      	ldr	r3, [r3, r2]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2190      	movs	r1, #144	@ 0x90
 8002cce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2290      	movs	r2, #144	@ 0x90
 8002cd4:	589b      	ldr	r3, [r3, r2]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d100      	bne.n	8002cdc <HAL_UART_IRQHandler+0x1b0>
 8002cda:	e23d      	b.n	8003158 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002cdc:	23a4      	movs	r3, #164	@ 0xa4
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d015      	beq.n	8002d14 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ce8:	23a0      	movs	r3, #160	@ 0xa0
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d106      	bne.n	8002d02 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002cf4:	239c      	movs	r3, #156	@ 0x9c
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	055b      	lsls	r3, r3, #21
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d008      	beq.n	8002d14 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	0010      	movs	r0, r2
 8002d12:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2290      	movs	r2, #144	@ 0x90
 8002d18:	589b      	ldr	r3, [r3, r2]
 8002d1a:	2194      	movs	r1, #148	@ 0x94
 8002d1c:	187a      	adds	r2, r7, r1
 8002d1e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2240      	movs	r2, #64	@ 0x40
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b40      	cmp	r3, #64	@ 0x40
 8002d2c:	d004      	beq.n	8002d38 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2228      	movs	r2, #40	@ 0x28
 8002d34:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d36:	d04c      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 fd76 	bl	800382c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2240      	movs	r2, #64	@ 0x40
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b40      	cmp	r3, #64	@ 0x40
 8002d4c:	d13c      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d52:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002d54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d56:	2090      	movs	r0, #144	@ 0x90
 8002d58:	183a      	adds	r2, r7, r0
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d62:	f383 8810 	msr	PRIMASK, r3
}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2140      	movs	r1, #64	@ 0x40
 8002d74:	438a      	bics	r2, r1
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	183b      	adds	r3, r7, r0
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d80:	f383 8810 	msr	PRIMASK, r3
}
 8002d84:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2280      	movs	r2, #128	@ 0x80
 8002d8a:	589b      	ldr	r3, [r3, r2]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d016      	beq.n	8002dbe <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2280      	movs	r2, #128	@ 0x80
 8002d94:	589b      	ldr	r3, [r3, r2]
 8002d96:	4a17      	ldr	r2, [pc, #92]	@ (8002df4 <HAL_UART_IRQHandler+0x2c8>)
 8002d98:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2280      	movs	r2, #128	@ 0x80
 8002d9e:	589b      	ldr	r3, [r3, r2]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7fe fb91 	bl	80014c8 <HAL_DMA_Abort_IT>
 8002da6:	1e03      	subs	r3, r0, #0
 8002da8:	d01c      	beq.n	8002de4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2280      	movs	r2, #128	@ 0x80
 8002dae:	589b      	ldr	r3, [r3, r2]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	2180      	movs	r1, #128	@ 0x80
 8002db6:	5852      	ldr	r2, [r2, r1]
 8002db8:	0010      	movs	r0, r2
 8002dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbc:	e012      	b.n	8002de4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f000 f9d9 	bl	8003178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc6:	e00d      	b.n	8002de4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 f9d4 	bl	8003178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd0:	e008      	b.n	8002de4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 f9cf 	bl	8003178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2290      	movs	r2, #144	@ 0x90
 8002dde:	2100      	movs	r1, #0
 8002de0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002de2:	e1b9      	b.n	8003158 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de4:	46c0      	nop			@ (mov r8, r8)
    return;
 8002de6:	e1b7      	b.n	8003158 <HAL_UART_IRQHandler+0x62c>
 8002de8:	0000080f 	.word	0x0000080f
 8002dec:	10000001 	.word	0x10000001
 8002df0:	04000120 	.word	0x04000120
 8002df4:	080038f9 	.word	0x080038f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d000      	beq.n	8002e02 <HAL_UART_IRQHandler+0x2d6>
 8002e00:	e13e      	b.n	8003080 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e02:	23a4      	movs	r3, #164	@ 0xa4
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2210      	movs	r2, #16
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d100      	bne.n	8002e10 <HAL_UART_IRQHandler+0x2e4>
 8002e0e:	e137      	b.n	8003080 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e10:	23a0      	movs	r3, #160	@ 0xa0
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2210      	movs	r2, #16
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d100      	bne.n	8002e1e <HAL_UART_IRQHandler+0x2f2>
 8002e1c:	e130      	b.n	8003080 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2210      	movs	r2, #16
 8002e24:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2240      	movs	r2, #64	@ 0x40
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b40      	cmp	r3, #64	@ 0x40
 8002e32:	d000      	beq.n	8002e36 <HAL_UART_IRQHandler+0x30a>
 8002e34:	e0a4      	b.n	8002f80 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2280      	movs	r2, #128	@ 0x80
 8002e3a:	589b      	ldr	r3, [r3, r2]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	217e      	movs	r1, #126	@ 0x7e
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002e46:	187b      	adds	r3, r7, r1
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d100      	bne.n	8002e50 <HAL_UART_IRQHandler+0x324>
 8002e4e:	e185      	b.n	800315c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	225c      	movs	r2, #92	@ 0x5c
 8002e54:	5a9b      	ldrh	r3, [r3, r2]
 8002e56:	187a      	adds	r2, r7, r1
 8002e58:	8812      	ldrh	r2, [r2, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d300      	bcc.n	8002e60 <HAL_UART_IRQHandler+0x334>
 8002e5e:	e17d      	b.n	800315c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	187a      	adds	r2, r7, r1
 8002e64:	215e      	movs	r1, #94	@ 0x5e
 8002e66:	8812      	ldrh	r2, [r2, #0]
 8002e68:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2280      	movs	r2, #128	@ 0x80
 8002e6e:	589b      	ldr	r3, [r3, r2]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2220      	movs	r2, #32
 8002e76:	4013      	ands	r3, r2
 8002e78:	d170      	bne.n	8002f5c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e82:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e84:	2301      	movs	r3, #1
 8002e86:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8a:	f383 8810 	msr	PRIMASK, r3
}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	49b4      	ldr	r1, [pc, #720]	@ (800316c <HAL_UART_IRQHandler+0x640>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea6:	f383 8810 	msr	PRIMASK, r3
}
 8002eaa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002eac:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb4:	677b      	str	r3, [r7, #116]	@ 0x74
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ebc:	f383 8810 	msr	PRIMASK, r3
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	438a      	bics	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ed4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed8:	f383 8810 	msr	PRIMASK, r3
}
 8002edc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ede:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ee8:	2301      	movs	r3, #1
 8002eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eee:	f383 8810 	msr	PRIMASK, r3
}
 8002ef2:	46c0      	nop			@ (mov r8, r8)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2140      	movs	r1, #64	@ 0x40
 8002f00:	438a      	bics	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f06:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f0a:	f383 8810 	msr	PRIMASK, r3
}
 8002f0e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	228c      	movs	r2, #140	@ 0x8c
 8002f14:	2120      	movs	r1, #32
 8002f16:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f22:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f28:	2301      	movs	r3, #1
 8002f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f2e:	f383 8810 	msr	PRIMASK, r3
}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2110      	movs	r1, #16
 8002f40:	438a      	bics	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f4a:	f383 8810 	msr	PRIMASK, r3
}
 8002f4e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2280      	movs	r2, #128	@ 0x80
 8002f54:	589b      	ldr	r3, [r3, r2]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7fe fa54 	bl	8001404 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	225c      	movs	r2, #92	@ 0x5c
 8002f66:	5a9a      	ldrh	r2, [r3, r2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	215e      	movs	r1, #94	@ 0x5e
 8002f6c:	5a5b      	ldrh	r3, [r3, r1]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	0011      	movs	r1, r2
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f000 f905 	bl	8003188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f7e:	e0ed      	b.n	800315c <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	225c      	movs	r2, #92	@ 0x5c
 8002f84:	5a99      	ldrh	r1, [r3, r2]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	225e      	movs	r2, #94	@ 0x5e
 8002f8a:	5a9b      	ldrh	r3, [r3, r2]
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	208e      	movs	r0, #142	@ 0x8e
 8002f90:	183b      	adds	r3, r7, r0
 8002f92:	1a8a      	subs	r2, r1, r2
 8002f94:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	225e      	movs	r2, #94	@ 0x5e
 8002f9a:	5a9b      	ldrh	r3, [r3, r2]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d100      	bne.n	8002fa4 <HAL_UART_IRQHandler+0x478>
 8002fa2:	e0dd      	b.n	8003160 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002fa4:	183b      	adds	r3, r7, r0
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d100      	bne.n	8002fae <HAL_UART_IRQHandler+0x482>
 8002fac:	e0d8      	b.n	8003160 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fae:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fb6:	2488      	movs	r4, #136	@ 0x88
 8002fb8:	193a      	adds	r2, r7, r4
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f383 8810 	msr	PRIMASK, r3
}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4967      	ldr	r1, [pc, #412]	@ (8003170 <HAL_UART_IRQHandler+0x644>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f383 8810 	msr	PRIMASK, r3
}
 8002fe4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fea:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fec:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fee:	2484      	movs	r4, #132	@ 0x84
 8002ff0:	193a      	adds	r2, r7, r4
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f383 8810 	msr	PRIMASK, r3
}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	495a      	ldr	r1, [pc, #360]	@ (8003174 <HAL_UART_IRQHandler+0x648>)
 800300c:	400a      	ands	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	193b      	adds	r3, r7, r4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f383 8810 	msr	PRIMASK, r3
}
 800301c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	228c      	movs	r2, #140	@ 0x8c
 8003022:	2120      	movs	r1, #32
 8003024:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003032:	f3ef 8310 	mrs	r3, PRIMASK
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800303a:	2480      	movs	r4, #128	@ 0x80
 800303c:	193a      	adds	r2, r7, r4
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	2301      	movs	r3, #1
 8003042:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003046:	f383 8810 	msr	PRIMASK, r3
}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2110      	movs	r1, #16
 8003058:	438a      	bics	r2, r1
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	193b      	adds	r3, r7, r4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003064:	f383 8810 	msr	PRIMASK, r3
}
 8003068:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003070:	183b      	adds	r3, r7, r0
 8003072:	881a      	ldrh	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	0011      	movs	r1, r2
 8003078:	0018      	movs	r0, r3
 800307a:	f000 f885 	bl	8003188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800307e:	e06f      	b.n	8003160 <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003080:	23a4      	movs	r3, #164	@ 0xa4
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	2380      	movs	r3, #128	@ 0x80
 8003088:	035b      	lsls	r3, r3, #13
 800308a:	4013      	ands	r3, r2
 800308c:	d010      	beq.n	80030b0 <HAL_UART_IRQHandler+0x584>
 800308e:	239c      	movs	r3, #156	@ 0x9c
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	@ 0x80
 8003096:	03db      	lsls	r3, r3, #15
 8003098:	4013      	ands	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2280      	movs	r2, #128	@ 0x80
 80030a2:	0352      	lsls	r2, r2, #13
 80030a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f000 fc68 	bl	800397e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030ae:	e05a      	b.n	8003166 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80030b0:	23a4      	movs	r3, #164	@ 0xa4
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2280      	movs	r2, #128	@ 0x80
 80030b8:	4013      	ands	r3, r2
 80030ba:	d016      	beq.n	80030ea <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80030bc:	23a0      	movs	r3, #160	@ 0xa0
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2280      	movs	r2, #128	@ 0x80
 80030c4:	4013      	ands	r3, r2
 80030c6:	d106      	bne.n	80030d6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80030c8:	239c      	movs	r3, #156	@ 0x9c
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	4013      	ands	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d042      	beq.n	8003164 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	0010      	movs	r0, r2
 80030e6:	4798      	blx	r3
    }
    return;
 80030e8:	e03c      	b.n	8003164 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030ea:	23a4      	movs	r3, #164	@ 0xa4
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2240      	movs	r2, #64	@ 0x40
 80030f2:	4013      	ands	r3, r2
 80030f4:	d00a      	beq.n	800310c <HAL_UART_IRQHandler+0x5e0>
 80030f6:	23a0      	movs	r3, #160	@ 0xa0
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2240      	movs	r2, #64	@ 0x40
 80030fe:	4013      	ands	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	0018      	movs	r0, r3
 8003106:	f000 fc0e 	bl	8003926 <UART_EndTransmit_IT>
    return;
 800310a:	e02c      	b.n	8003166 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800310c:	23a4      	movs	r3, #164	@ 0xa4
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	@ 0x80
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	4013      	ands	r3, r2
 8003118:	d00b      	beq.n	8003132 <HAL_UART_IRQHandler+0x606>
 800311a:	23a0      	movs	r3, #160	@ 0xa0
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	2380      	movs	r3, #128	@ 0x80
 8003122:	05db      	lsls	r3, r3, #23
 8003124:	4013      	ands	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	0018      	movs	r0, r3
 800312c:	f000 fc37 	bl	800399e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003130:	e019      	b.n	8003166 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003132:	23a4      	movs	r3, #164	@ 0xa4
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	045b      	lsls	r3, r3, #17
 800313c:	4013      	ands	r3, r2
 800313e:	d012      	beq.n	8003166 <HAL_UART_IRQHandler+0x63a>
 8003140:	23a0      	movs	r3, #160	@ 0xa0
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	da0d      	bge.n	8003166 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f000 fc1e 	bl	800398e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003152:	e008      	b.n	8003166 <HAL_UART_IRQHandler+0x63a>
      return;
 8003154:	46c0      	nop			@ (mov r8, r8)
 8003156:	e006      	b.n	8003166 <HAL_UART_IRQHandler+0x63a>
    return;
 8003158:	46c0      	nop			@ (mov r8, r8)
 800315a:	e004      	b.n	8003166 <HAL_UART_IRQHandler+0x63a>
      return;
 800315c:	46c0      	nop			@ (mov r8, r8)
 800315e:	e002      	b.n	8003166 <HAL_UART_IRQHandler+0x63a>
      return;
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	e000      	b.n	8003166 <HAL_UART_IRQHandler+0x63a>
    return;
 8003164:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003166:	46bd      	mov	sp, r7
 8003168:	b02a      	add	sp, #168	@ 0xa8
 800316a:	bdb0      	pop	{r4, r5, r7, pc}
 800316c:	fffffeff 	.word	0xfffffeff
 8003170:	fffffedf 	.word	0xfffffedf
 8003174:	effffffe 	.word	0xeffffffe

08003178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003180:	46c0      	nop			@ (mov r8, r8)
 8003182:	46bd      	mov	sp, r7
 8003184:	b002      	add	sp, #8
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	000a      	movs	r2, r1
 8003192:	1cbb      	adds	r3, r7, #2
 8003194:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a8:	231e      	movs	r3, #30
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4aab      	ldr	r2, [pc, #684]	@ (800347c <UART_SetConfig+0x2dc>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	0019      	movs	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4aa6      	ldr	r2, [pc, #664]	@ (8003480 <UART_SetConfig+0x2e0>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a9d      	ldr	r2, [pc, #628]	@ (8003484 <UART_SetConfig+0x2e4>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003222:	220f      	movs	r2, #15
 8003224:	4393      	bics	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a93      	ldr	r2, [pc, #588]	@ (8003488 <UART_SetConfig+0x2e8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d127      	bne.n	800328e <UART_SetConfig+0xee>
 800323e:	4b93      	ldr	r3, [pc, #588]	@ (800348c <UART_SetConfig+0x2ec>)
 8003240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003242:	2203      	movs	r2, #3
 8003244:	4013      	ands	r3, r2
 8003246:	2b03      	cmp	r3, #3
 8003248:	d017      	beq.n	800327a <UART_SetConfig+0xda>
 800324a:	d81b      	bhi.n	8003284 <UART_SetConfig+0xe4>
 800324c:	2b02      	cmp	r3, #2
 800324e:	d00a      	beq.n	8003266 <UART_SetConfig+0xc6>
 8003250:	d818      	bhi.n	8003284 <UART_SetConfig+0xe4>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <UART_SetConfig+0xbc>
 8003256:	2b01      	cmp	r3, #1
 8003258:	d00a      	beq.n	8003270 <UART_SetConfig+0xd0>
 800325a:	e013      	b.n	8003284 <UART_SetConfig+0xe4>
 800325c:	231f      	movs	r3, #31
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e021      	b.n	80032aa <UART_SetConfig+0x10a>
 8003266:	231f      	movs	r3, #31
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2202      	movs	r2, #2
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e01c      	b.n	80032aa <UART_SetConfig+0x10a>
 8003270:	231f      	movs	r3, #31
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	2204      	movs	r2, #4
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e017      	b.n	80032aa <UART_SetConfig+0x10a>
 800327a:	231f      	movs	r3, #31
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2208      	movs	r2, #8
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e012      	b.n	80032aa <UART_SetConfig+0x10a>
 8003284:	231f      	movs	r3, #31
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2210      	movs	r2, #16
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e00d      	b.n	80032aa <UART_SetConfig+0x10a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7f      	ldr	r2, [pc, #508]	@ (8003490 <UART_SetConfig+0x2f0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d104      	bne.n	80032a2 <UART_SetConfig+0x102>
 8003298:	231f      	movs	r3, #31
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e003      	b.n	80032aa <UART_SetConfig+0x10a>
 80032a2:	231f      	movs	r3, #31
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2210      	movs	r2, #16
 80032a8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d000      	beq.n	80032b8 <UART_SetConfig+0x118>
 80032b6:	e06f      	b.n	8003398 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80032b8:	231f      	movs	r3, #31
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d01f      	beq.n	8003302 <UART_SetConfig+0x162>
 80032c2:	dc22      	bgt.n	800330a <UART_SetConfig+0x16a>
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d017      	beq.n	80032f8 <UART_SetConfig+0x158>
 80032c8:	dc1f      	bgt.n	800330a <UART_SetConfig+0x16a>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <UART_SetConfig+0x134>
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d005      	beq.n	80032de <UART_SetConfig+0x13e>
 80032d2:	e01a      	b.n	800330a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7fe fe66 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 80032d8:	0003      	movs	r3, r0
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e01c      	b.n	8003318 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80032de:	4b6b      	ldr	r3, [pc, #428]	@ (800348c <UART_SetConfig+0x2ec>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2207      	movs	r2, #7
 80032e6:	4013      	ands	r3, r2
 80032e8:	3301      	adds	r3, #1
 80032ea:	0019      	movs	r1, r3
 80032ec:	4869      	ldr	r0, [pc, #420]	@ (8003494 <UART_SetConfig+0x2f4>)
 80032ee:	f7fc ff15 	bl	800011c <__udivsi3>
 80032f2:	0003      	movs	r3, r0
 80032f4:	61bb      	str	r3, [r7, #24]
        break;
 80032f6:	e00f      	b.n	8003318 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f8:	f7fe fe08 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 80032fc:	0003      	movs	r3, r0
 80032fe:	61bb      	str	r3, [r7, #24]
        break;
 8003300:	e00a      	b.n	8003318 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003302:	2380      	movs	r3, #128	@ 0x80
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	61bb      	str	r3, [r7, #24]
        break;
 8003308:	e006      	b.n	8003318 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800330e:	231e      	movs	r3, #30
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
        break;
 8003316:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d100      	bne.n	8003320 <UART_SetConfig+0x180>
 800331e:	e097      	b.n	8003450 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003324:	4b5c      	ldr	r3, [pc, #368]	@ (8003498 <UART_SetConfig+0x2f8>)
 8003326:	0052      	lsls	r2, r2, #1
 8003328:	5ad3      	ldrh	r3, [r2, r3]
 800332a:	0019      	movs	r1, r3
 800332c:	69b8      	ldr	r0, [r7, #24]
 800332e:	f7fc fef5 	bl	800011c <__udivsi3>
 8003332:	0003      	movs	r3, r0
 8003334:	005a      	lsls	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	18d2      	adds	r2, r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0019      	movs	r1, r3
 8003344:	0010      	movs	r0, r2
 8003346:	f7fc fee9 	bl	800011c <__udivsi3>
 800334a:	0003      	movs	r3, r0
 800334c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b0f      	cmp	r3, #15
 8003352:	d91c      	bls.n	800338e <UART_SetConfig+0x1ee>
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	2380      	movs	r3, #128	@ 0x80
 8003358:	025b      	lsls	r3, r3, #9
 800335a:	429a      	cmp	r2, r3
 800335c:	d217      	bcs.n	800338e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	b29a      	uxth	r2, r3
 8003362:	200e      	movs	r0, #14
 8003364:	183b      	adds	r3, r7, r0
 8003366:	210f      	movs	r1, #15
 8003368:	438a      	bics	r2, r1
 800336a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	b29b      	uxth	r3, r3
 8003372:	2207      	movs	r2, #7
 8003374:	4013      	ands	r3, r2
 8003376:	b299      	uxth	r1, r3
 8003378:	183b      	adds	r3, r7, r0
 800337a:	183a      	adds	r2, r7, r0
 800337c:	8812      	ldrh	r2, [r2, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	183a      	adds	r2, r7, r0
 8003388:	8812      	ldrh	r2, [r2, #0]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	e060      	b.n	8003450 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800338e:	231e      	movs	r3, #30
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	2201      	movs	r2, #1
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	e05b      	b.n	8003450 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003398:	231f      	movs	r3, #31
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d01f      	beq.n	80033e2 <UART_SetConfig+0x242>
 80033a2:	dc22      	bgt.n	80033ea <UART_SetConfig+0x24a>
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d017      	beq.n	80033d8 <UART_SetConfig+0x238>
 80033a8:	dc1f      	bgt.n	80033ea <UART_SetConfig+0x24a>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <UART_SetConfig+0x214>
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d005      	beq.n	80033be <UART_SetConfig+0x21e>
 80033b2:	e01a      	b.n	80033ea <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b4:	f7fe fdf6 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 80033b8:	0003      	movs	r3, r0
 80033ba:	61bb      	str	r3, [r7, #24]
        break;
 80033bc:	e01c      	b.n	80033f8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80033be:	4b33      	ldr	r3, [pc, #204]	@ (800348c <UART_SetConfig+0x2ec>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2207      	movs	r2, #7
 80033c6:	4013      	ands	r3, r2
 80033c8:	3301      	adds	r3, #1
 80033ca:	0019      	movs	r1, r3
 80033cc:	4831      	ldr	r0, [pc, #196]	@ (8003494 <UART_SetConfig+0x2f4>)
 80033ce:	f7fc fea5 	bl	800011c <__udivsi3>
 80033d2:	0003      	movs	r3, r0
 80033d4:	61bb      	str	r3, [r7, #24]
        break;
 80033d6:	e00f      	b.n	80033f8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d8:	f7fe fd98 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 80033dc:	0003      	movs	r3, r0
 80033de:	61bb      	str	r3, [r7, #24]
        break;
 80033e0:	e00a      	b.n	80033f8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	61bb      	str	r3, [r7, #24]
        break;
 80033e8:	e006      	b.n	80033f8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033ee:	231e      	movs	r3, #30
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
        break;
 80033f6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d028      	beq.n	8003450 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003402:	4b25      	ldr	r3, [pc, #148]	@ (8003498 <UART_SetConfig+0x2f8>)
 8003404:	0052      	lsls	r2, r2, #1
 8003406:	5ad3      	ldrh	r3, [r2, r3]
 8003408:	0019      	movs	r1, r3
 800340a:	69b8      	ldr	r0, [r7, #24]
 800340c:	f7fc fe86 	bl	800011c <__udivsi3>
 8003410:	0003      	movs	r3, r0
 8003412:	001a      	movs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	18d2      	adds	r2, r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	0019      	movs	r1, r3
 8003422:	0010      	movs	r0, r2
 8003424:	f7fc fe7a 	bl	800011c <__udivsi3>
 8003428:	0003      	movs	r3, r0
 800342a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	2b0f      	cmp	r3, #15
 8003430:	d90a      	bls.n	8003448 <UART_SetConfig+0x2a8>
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	025b      	lsls	r3, r3, #9
 8003438:	429a      	cmp	r2, r3
 800343a:	d205      	bcs.n	8003448 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	b29a      	uxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	e003      	b.n	8003450 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003448:	231e      	movs	r3, #30
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	226a      	movs	r2, #106	@ 0x6a
 8003454:	2101      	movs	r1, #1
 8003456:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2268      	movs	r2, #104	@ 0x68
 800345c:	2101      	movs	r1, #1
 800345e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800346c:	231e      	movs	r3, #30
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	781b      	ldrb	r3, [r3, #0]
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b008      	add	sp, #32
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	cfff69f3 	.word	0xcfff69f3
 8003480:	ffffcfff 	.word	0xffffcfff
 8003484:	11fff4ff 	.word	0x11fff4ff
 8003488:	40013800 	.word	0x40013800
 800348c:	40021000 	.word	0x40021000
 8003490:	40004400 	.word	0x40004400
 8003494:	02dc6c00 	.word	0x02dc6c00
 8003498:	08004c80 	.word	0x08004c80

0800349c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a8:	2208      	movs	r2, #8
 80034aa:	4013      	ands	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a4a      	ldr	r2, [pc, #296]	@ (80035e0 <UART_AdvFeatureConfig+0x144>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	0019      	movs	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ca:	2201      	movs	r2, #1
 80034cc:	4013      	ands	r3, r2
 80034ce:	d00b      	beq.n	80034e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4a43      	ldr	r2, [pc, #268]	@ (80035e4 <UART_AdvFeatureConfig+0x148>)
 80034d8:	4013      	ands	r3, r2
 80034da:	0019      	movs	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	2202      	movs	r2, #2
 80034ee:	4013      	ands	r3, r2
 80034f0:	d00b      	beq.n	800350a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4a3b      	ldr	r2, [pc, #236]	@ (80035e8 <UART_AdvFeatureConfig+0x14c>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	0019      	movs	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350e:	2204      	movs	r2, #4
 8003510:	4013      	ands	r3, r2
 8003512:	d00b      	beq.n	800352c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4a34      	ldr	r2, [pc, #208]	@ (80035ec <UART_AdvFeatureConfig+0x150>)
 800351c:	4013      	ands	r3, r2
 800351e:	0019      	movs	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	2210      	movs	r2, #16
 8003532:	4013      	ands	r3, r2
 8003534:	d00b      	beq.n	800354e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a2c      	ldr	r2, [pc, #176]	@ (80035f0 <UART_AdvFeatureConfig+0x154>)
 800353e:	4013      	ands	r3, r2
 8003540:	0019      	movs	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003552:	2220      	movs	r2, #32
 8003554:	4013      	ands	r3, r2
 8003556:	d00b      	beq.n	8003570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4a25      	ldr	r2, [pc, #148]	@ (80035f4 <UART_AdvFeatureConfig+0x158>)
 8003560:	4013      	ands	r3, r2
 8003562:	0019      	movs	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003574:	2240      	movs	r2, #64	@ 0x40
 8003576:	4013      	ands	r3, r2
 8003578:	d01d      	beq.n	80035b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a1d      	ldr	r2, [pc, #116]	@ (80035f8 <UART_AdvFeatureConfig+0x15c>)
 8003582:	4013      	ands	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	035b      	lsls	r3, r3, #13
 800359a:	429a      	cmp	r2, r3
 800359c:	d10b      	bne.n	80035b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a15      	ldr	r2, [pc, #84]	@ (80035fc <UART_AdvFeatureConfig+0x160>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ba:	2280      	movs	r2, #128	@ 0x80
 80035bc:	4013      	ands	r3, r2
 80035be:	d00b      	beq.n	80035d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003600 <UART_AdvFeatureConfig+0x164>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
  }
}
 80035d8:	46c0      	nop			@ (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	ffff7fff 	.word	0xffff7fff
 80035e4:	fffdffff 	.word	0xfffdffff
 80035e8:	fffeffff 	.word	0xfffeffff
 80035ec:	fffbffff 	.word	0xfffbffff
 80035f0:	ffffefff 	.word	0xffffefff
 80035f4:	ffffdfff 	.word	0xffffdfff
 80035f8:	ffefffff 	.word	0xffefffff
 80035fc:	ff9fffff 	.word	0xff9fffff
 8003600:	fff7ffff 	.word	0xfff7ffff

08003604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b092      	sub	sp, #72	@ 0x48
 8003608:	af02      	add	r7, sp, #8
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2290      	movs	r2, #144	@ 0x90
 8003610:	2100      	movs	r1, #0
 8003612:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003614:	f7fd fdea 	bl	80011ec <HAL_GetTick>
 8003618:	0003      	movs	r3, r0
 800361a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2208      	movs	r2, #8
 8003624:	4013      	ands	r3, r2
 8003626:	2b08      	cmp	r3, #8
 8003628:	d12d      	bne.n	8003686 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800362a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800362c:	2280      	movs	r2, #128	@ 0x80
 800362e:	0391      	lsls	r1, r2, #14
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4a47      	ldr	r2, [pc, #284]	@ (8003750 <UART_CheckIdleState+0x14c>)
 8003634:	9200      	str	r2, [sp, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	f000 f88e 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 800363c:	1e03      	subs	r3, r0, #0
 800363e:	d022      	beq.n	8003686 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003640:	f3ef 8310 	mrs	r3, PRIMASK
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003648:	63bb      	str	r3, [r7, #56]	@ 0x38
 800364a:	2301      	movs	r3, #1
 800364c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003650:	f383 8810 	msr	PRIMASK, r3
}
 8003654:	46c0      	nop			@ (mov r8, r8)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2180      	movs	r1, #128	@ 0x80
 8003662:	438a      	bics	r2, r1
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366c:	f383 8810 	msr	PRIMASK, r3
}
 8003670:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2288      	movs	r2, #136	@ 0x88
 8003676:	2120      	movs	r1, #32
 8003678:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2284      	movs	r2, #132	@ 0x84
 800367e:	2100      	movs	r1, #0
 8003680:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e060      	b.n	8003748 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2204      	movs	r2, #4
 800368e:	4013      	ands	r3, r2
 8003690:	2b04      	cmp	r3, #4
 8003692:	d146      	bne.n	8003722 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003696:	2280      	movs	r2, #128	@ 0x80
 8003698:	03d1      	lsls	r1, r2, #15
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4a2c      	ldr	r2, [pc, #176]	@ (8003750 <UART_CheckIdleState+0x14c>)
 800369e:	9200      	str	r2, [sp, #0]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f000 f859 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 80036a6:	1e03      	subs	r3, r0, #0
 80036a8:	d03b      	beq.n	8003722 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036aa:	f3ef 8310 	mrs	r3, PRIMASK
 80036ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80036b0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b4:	2301      	movs	r3, #1
 80036b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f383 8810 	msr	PRIMASK, r3
}
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4922      	ldr	r1, [pc, #136]	@ (8003754 <UART_CheckIdleState+0x150>)
 80036cc:	400a      	ands	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f383 8810 	msr	PRIMASK, r3
}
 80036da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036dc:	f3ef 8310 	mrs	r3, PRIMASK
 80036e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80036e2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036e6:	2301      	movs	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f383 8810 	msr	PRIMASK, r3
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	438a      	bics	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	f383 8810 	msr	PRIMASK, r3
}
 800370c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	228c      	movs	r2, #140	@ 0x8c
 8003712:	2120      	movs	r1, #32
 8003714:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2284      	movs	r2, #132	@ 0x84
 800371a:	2100      	movs	r1, #0
 800371c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e012      	b.n	8003748 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2288      	movs	r2, #136	@ 0x88
 8003726:	2120      	movs	r1, #32
 8003728:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	228c      	movs	r2, #140	@ 0x8c
 800372e:	2120      	movs	r1, #32
 8003730:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2284      	movs	r2, #132	@ 0x84
 8003742:	2100      	movs	r1, #0
 8003744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b010      	add	sp, #64	@ 0x40
 800374e:	bd80      	pop	{r7, pc}
 8003750:	01ffffff 	.word	0x01ffffff
 8003754:	fffffedf 	.word	0xfffffedf

08003758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	1dfb      	adds	r3, r7, #7
 8003766:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003768:	e04b      	b.n	8003802 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	3301      	adds	r3, #1
 800376e:	d048      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003770:	f7fd fd3c 	bl	80011ec <HAL_GetTick>
 8003774:	0002      	movs	r2, r0
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e04b      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2204      	movs	r2, #4
 8003792:	4013      	ands	r3, r2
 8003794:	d035      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2208      	movs	r2, #8
 800379e:	4013      	ands	r3, r2
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d111      	bne.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2208      	movs	r2, #8
 80037aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 f83c 	bl	800382c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2290      	movs	r2, #144	@ 0x90
 80037b8:	2108      	movs	r1, #8
 80037ba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2284      	movs	r2, #132	@ 0x84
 80037c0:	2100      	movs	r1, #0
 80037c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e02c      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69da      	ldr	r2, [r3, #28]
 80037ce:	2380      	movs	r3, #128	@ 0x80
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	401a      	ands	r2, r3
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	429a      	cmp	r2, r3
 80037da:	d112      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2280      	movs	r2, #128	@ 0x80
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f81f 	bl	800382c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2290      	movs	r2, #144	@ 0x90
 80037f2:	2120      	movs	r1, #32
 80037f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2284      	movs	r2, #132	@ 0x84
 80037fa:	2100      	movs	r1, #0
 80037fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00f      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	425a      	negs	r2, r3
 8003812:	4153      	adcs	r3, r2
 8003814:	b2db      	uxtb	r3, r3
 8003816:	001a      	movs	r2, r3
 8003818:	1dfb      	adds	r3, r7, #7
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d0a4      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	0018      	movs	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	b004      	add	sp, #16
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08e      	sub	sp, #56	@ 0x38
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003834:	f3ef 8310 	mrs	r3, PRIMASK
 8003838:	617b      	str	r3, [r7, #20]
  return(result);
 800383a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800383c:	637b      	str	r3, [r7, #52]	@ 0x34
 800383e:	2301      	movs	r3, #1
 8003840:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f383 8810 	msr	PRIMASK, r3
}
 8003848:	46c0      	nop			@ (mov r8, r8)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4926      	ldr	r1, [pc, #152]	@ (80038f0 <UART_EndRxTransfer+0xc4>)
 8003856:	400a      	ands	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f383 8810 	msr	PRIMASK, r3
}
 8003864:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003866:	f3ef 8310 	mrs	r3, PRIMASK
 800386a:	623b      	str	r3, [r7, #32]
  return(result);
 800386c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800386e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003870:	2301      	movs	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	f383 8810 	msr	PRIMASK, r3
}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	491b      	ldr	r1, [pc, #108]	@ (80038f4 <UART_EndRxTransfer+0xc8>)
 8003888:	400a      	ands	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003892:	f383 8810 	msr	PRIMASK, r3
}
 8003896:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d118      	bne.n	80038d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038a0:	f3ef 8310 	mrs	r3, PRIMASK
 80038a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80038a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038aa:	2301      	movs	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			@ (mov r8, r8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2110      	movs	r1, #16
 80038c2:	438a      	bics	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	228c      	movs	r2, #140	@ 0x8c
 80038d6:	2120      	movs	r1, #32
 80038d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b00e      	add	sp, #56	@ 0x38
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	fffffedf 	.word	0xfffffedf
 80038f4:	effffffe 	.word	0xeffffffe

080038f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003904:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	225e      	movs	r2, #94	@ 0x5e
 800390a:	2100      	movs	r1, #0
 800390c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2256      	movs	r2, #86	@ 0x56
 8003912:	2100      	movs	r1, #0
 8003914:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	0018      	movs	r0, r3
 800391a:	f7ff fc2d 	bl	8003178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}

08003926 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800392e:	f3ef 8310 	mrs	r3, PRIMASK
 8003932:	60bb      	str	r3, [r7, #8]
  return(result);
 8003934:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	2301      	movs	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2140      	movs	r1, #64	@ 0x40
 8003950:	438a      	bics	r2, r1
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2288      	movs	r2, #136	@ 0x88
 8003964:	2120      	movs	r1, #32
 8003966:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0018      	movs	r0, r3
 8003972:	f7fc fd49 	bl	8000408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b006      	add	sp, #24
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	b002      	add	sp, #8
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2284      	movs	r2, #132	@ 0x84
 80039bc:	5c9b      	ldrb	r3, [r3, r2]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e027      	b.n	8003a16 <HAL_UARTEx_DisableFifoMode+0x66>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2284      	movs	r2, #132	@ 0x84
 80039ca:	2101      	movs	r1, #1
 80039cc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2288      	movs	r2, #136	@ 0x88
 80039d2:	2124      	movs	r1, #36	@ 0x24
 80039d4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2101      	movs	r1, #1
 80039ea:	438a      	bics	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003a20 <HAL_UARTEx_DisableFifoMode+0x70>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2288      	movs	r2, #136	@ 0x88
 8003a08:	2120      	movs	r1, #32
 8003a0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2284      	movs	r2, #132	@ 0x84
 8003a10:	2100      	movs	r1, #0
 8003a12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	0018      	movs	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b004      	add	sp, #16
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	46c0      	nop			@ (mov r8, r8)
 8003a20:	dfffffff 	.word	0xdfffffff

08003a24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2284      	movs	r2, #132	@ 0x84
 8003a32:	5c9b      	ldrb	r3, [r3, r2]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e02e      	b.n	8003a9a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2284      	movs	r2, #132	@ 0x84
 8003a40:	2101      	movs	r1, #1
 8003a42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2288      	movs	r2, #136	@ 0x88
 8003a48:	2124      	movs	r1, #36	@ 0x24
 8003a4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2101      	movs	r1, #1
 8003a60:	438a      	bics	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	08d9      	lsrs	r1, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 f854 	bl	8003b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2288      	movs	r2, #136	@ 0x88
 8003a8c:	2120      	movs	r1, #32
 8003a8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2284      	movs	r2, #132	@ 0x84
 8003a94:	2100      	movs	r1, #0
 8003a96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b004      	add	sp, #16
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2284      	movs	r2, #132	@ 0x84
 8003ab2:	5c9b      	ldrb	r3, [r3, r2]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e02f      	b.n	8003b1c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2284      	movs	r2, #132	@ 0x84
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2288      	movs	r2, #136	@ 0x88
 8003ac8:	2124      	movs	r1, #36	@ 0x24
 8003aca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2101      	movs	r1, #1
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	4a0e      	ldr	r2, [pc, #56]	@ (8003b24 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 f813 	bl	8003b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2288      	movs	r2, #136	@ 0x88
 8003b0e:	2120      	movs	r1, #32
 8003b10:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2284      	movs	r2, #132	@ 0x84
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b004      	add	sp, #16
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	f1ffffff 	.word	0xf1ffffff

08003b28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d108      	bne.n	8003b4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	226a      	movs	r2, #106	@ 0x6a
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2268      	movs	r2, #104	@ 0x68
 8003b44:	2101      	movs	r1, #1
 8003b46:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b48:	e043      	b.n	8003bd2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b4a:	260f      	movs	r6, #15
 8003b4c:	19bb      	adds	r3, r7, r6
 8003b4e:	2208      	movs	r2, #8
 8003b50:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b52:	200e      	movs	r0, #14
 8003b54:	183b      	adds	r3, r7, r0
 8003b56:	2208      	movs	r2, #8
 8003b58:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	0e5b      	lsrs	r3, r3, #25
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	240d      	movs	r4, #13
 8003b66:	193b      	adds	r3, r7, r4
 8003b68:	2107      	movs	r1, #7
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	0f5b      	lsrs	r3, r3, #29
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	250c      	movs	r5, #12
 8003b7a:	197b      	adds	r3, r7, r5
 8003b7c:	2107      	movs	r1, #7
 8003b7e:	400a      	ands	r2, r1
 8003b80:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b82:	183b      	adds	r3, r7, r0
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	197a      	adds	r2, r7, r5
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	4914      	ldr	r1, [pc, #80]	@ (8003bdc <UARTEx_SetNbDataToProcess+0xb4>)
 8003b8c:	5c8a      	ldrb	r2, [r1, r2]
 8003b8e:	435a      	muls	r2, r3
 8003b90:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b92:	197b      	adds	r3, r7, r5
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	4a12      	ldr	r2, [pc, #72]	@ (8003be0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	f7fc fb48 	bl	8000230 <__divsi3>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	b299      	uxth	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	226a      	movs	r2, #106	@ 0x6a
 8003ba8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003baa:	19bb      	adds	r3, r7, r6
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	193a      	adds	r2, r7, r4
 8003bb0:	7812      	ldrb	r2, [r2, #0]
 8003bb2:	490a      	ldr	r1, [pc, #40]	@ (8003bdc <UARTEx_SetNbDataToProcess+0xb4>)
 8003bb4:	5c8a      	ldrb	r2, [r1, r2]
 8003bb6:	435a      	muls	r2, r3
 8003bb8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003bba:	193b      	adds	r3, r7, r4
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	4a08      	ldr	r2, [pc, #32]	@ (8003be0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	f7fc fb34 	bl	8000230 <__divsi3>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	b299      	uxth	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2268      	movs	r2, #104	@ 0x68
 8003bd0:	5299      	strh	r1, [r3, r2]
}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b005      	add	sp, #20
 8003bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	08004c98 	.word	0x08004c98
 8003be0:	08004ca0 	.word	0x08004ca0

08003be4 <__assert_func>:
 8003be4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003be6:	0014      	movs	r4, r2
 8003be8:	001a      	movs	r2, r3
 8003bea:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <__assert_func+0x2c>)
 8003bec:	0005      	movs	r5, r0
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	000e      	movs	r6, r1
 8003bf2:	68d8      	ldr	r0, [r3, #12]
 8003bf4:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <__assert_func+0x30>)
 8003bf6:	2c00      	cmp	r4, #0
 8003bf8:	d101      	bne.n	8003bfe <__assert_func+0x1a>
 8003bfa:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <__assert_func+0x34>)
 8003bfc:	001c      	movs	r4, r3
 8003bfe:	4907      	ldr	r1, [pc, #28]	@ (8003c1c <__assert_func+0x38>)
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	9402      	str	r4, [sp, #8]
 8003c04:	002b      	movs	r3, r5
 8003c06:	9600      	str	r6, [sp, #0]
 8003c08:	f000 f8b2 	bl	8003d70 <fiprintf>
 8003c0c:	f000 f9ab 	bl	8003f66 <abort>
 8003c10:	20000024 	.word	0x20000024
 8003c14:	08004ca8 	.word	0x08004ca8
 8003c18:	08004ce3 	.word	0x08004ce3
 8003c1c:	08004cb5 	.word	0x08004cb5

08003c20 <std>:
 8003c20:	2300      	movs	r3, #0
 8003c22:	b510      	push	{r4, lr}
 8003c24:	0004      	movs	r4, r0
 8003c26:	6003      	str	r3, [r0, #0]
 8003c28:	6043      	str	r3, [r0, #4]
 8003c2a:	6083      	str	r3, [r0, #8]
 8003c2c:	8181      	strh	r1, [r0, #12]
 8003c2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c30:	81c2      	strh	r2, [r0, #14]
 8003c32:	6103      	str	r3, [r0, #16]
 8003c34:	6143      	str	r3, [r0, #20]
 8003c36:	6183      	str	r3, [r0, #24]
 8003c38:	0019      	movs	r1, r3
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	305c      	adds	r0, #92	@ 0x5c
 8003c3e:	f000 f90f 	bl	8003e60 <memset>
 8003c42:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <std+0x50>)
 8003c44:	6224      	str	r4, [r4, #32]
 8003c46:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c48:	4b0a      	ldr	r3, [pc, #40]	@ (8003c74 <std+0x54>)
 8003c4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c78 <std+0x58>)
 8003c4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c50:	4b0a      	ldr	r3, [pc, #40]	@ (8003c7c <std+0x5c>)
 8003c52:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <std+0x60>)
 8003c56:	429c      	cmp	r4, r3
 8003c58:	d005      	beq.n	8003c66 <std+0x46>
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c84 <std+0x64>)
 8003c5c:	429c      	cmp	r4, r3
 8003c5e:	d002      	beq.n	8003c66 <std+0x46>
 8003c60:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <std+0x68>)
 8003c62:	429c      	cmp	r4, r3
 8003c64:	d103      	bne.n	8003c6e <std+0x4e>
 8003c66:	0020      	movs	r0, r4
 8003c68:	3058      	adds	r0, #88	@ 0x58
 8003c6a:	f000 f979 	bl	8003f60 <__retarget_lock_init_recursive>
 8003c6e:	bd10      	pop	{r4, pc}
 8003c70:	08003dc9 	.word	0x08003dc9
 8003c74:	08003df1 	.word	0x08003df1
 8003c78:	08003e29 	.word	0x08003e29
 8003c7c:	08003e55 	.word	0x08003e55
 8003c80:	200001b0 	.word	0x200001b0
 8003c84:	20000218 	.word	0x20000218
 8003c88:	20000280 	.word	0x20000280

08003c8c <stdio_exit_handler>:
 8003c8c:	b510      	push	{r4, lr}
 8003c8e:	4a03      	ldr	r2, [pc, #12]	@ (8003c9c <stdio_exit_handler+0x10>)
 8003c90:	4903      	ldr	r1, [pc, #12]	@ (8003ca0 <stdio_exit_handler+0x14>)
 8003c92:	4804      	ldr	r0, [pc, #16]	@ (8003ca4 <stdio_exit_handler+0x18>)
 8003c94:	f000 f87c 	bl	8003d90 <_fwalk_sglue>
 8003c98:	bd10      	pop	{r4, pc}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	20000018 	.word	0x20000018
 8003ca0:	080047fd 	.word	0x080047fd
 8003ca4:	20000028 	.word	0x20000028

08003ca8 <cleanup_stdio>:
 8003ca8:	6841      	ldr	r1, [r0, #4]
 8003caa:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <cleanup_stdio+0x30>)
 8003cac:	b510      	push	{r4, lr}
 8003cae:	0004      	movs	r4, r0
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	d001      	beq.n	8003cb8 <cleanup_stdio+0x10>
 8003cb4:	f000 fda2 	bl	80047fc <_fflush_r>
 8003cb8:	68a1      	ldr	r1, [r4, #8]
 8003cba:	4b08      	ldr	r3, [pc, #32]	@ (8003cdc <cleanup_stdio+0x34>)
 8003cbc:	4299      	cmp	r1, r3
 8003cbe:	d002      	beq.n	8003cc6 <cleanup_stdio+0x1e>
 8003cc0:	0020      	movs	r0, r4
 8003cc2:	f000 fd9b 	bl	80047fc <_fflush_r>
 8003cc6:	68e1      	ldr	r1, [r4, #12]
 8003cc8:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <cleanup_stdio+0x38>)
 8003cca:	4299      	cmp	r1, r3
 8003ccc:	d002      	beq.n	8003cd4 <cleanup_stdio+0x2c>
 8003cce:	0020      	movs	r0, r4
 8003cd0:	f000 fd94 	bl	80047fc <_fflush_r>
 8003cd4:	bd10      	pop	{r4, pc}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	200001b0 	.word	0x200001b0
 8003cdc:	20000218 	.word	0x20000218
 8003ce0:	20000280 	.word	0x20000280

08003ce4 <global_stdio_init.part.0>:
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <global_stdio_init.part.0+0x28>)
 8003ce8:	4a09      	ldr	r2, [pc, #36]	@ (8003d10 <global_stdio_init.part.0+0x2c>)
 8003cea:	2104      	movs	r1, #4
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	4809      	ldr	r0, [pc, #36]	@ (8003d14 <global_stdio_init.part.0+0x30>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f7ff ff95 	bl	8003c20 <std>
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	2109      	movs	r1, #9
 8003cfa:	4807      	ldr	r0, [pc, #28]	@ (8003d18 <global_stdio_init.part.0+0x34>)
 8003cfc:	f7ff ff90 	bl	8003c20 <std>
 8003d00:	2202      	movs	r2, #2
 8003d02:	2112      	movs	r1, #18
 8003d04:	4805      	ldr	r0, [pc, #20]	@ (8003d1c <global_stdio_init.part.0+0x38>)
 8003d06:	f7ff ff8b 	bl	8003c20 <std>
 8003d0a:	bd10      	pop	{r4, pc}
 8003d0c:	200002e8 	.word	0x200002e8
 8003d10:	08003c8d 	.word	0x08003c8d
 8003d14:	200001b0 	.word	0x200001b0
 8003d18:	20000218 	.word	0x20000218
 8003d1c:	20000280 	.word	0x20000280

08003d20 <__sfp_lock_acquire>:
 8003d20:	b510      	push	{r4, lr}
 8003d22:	4802      	ldr	r0, [pc, #8]	@ (8003d2c <__sfp_lock_acquire+0xc>)
 8003d24:	f000 f91d 	bl	8003f62 <__retarget_lock_acquire_recursive>
 8003d28:	bd10      	pop	{r4, pc}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	200002f1 	.word	0x200002f1

08003d30 <__sfp_lock_release>:
 8003d30:	b510      	push	{r4, lr}
 8003d32:	4802      	ldr	r0, [pc, #8]	@ (8003d3c <__sfp_lock_release+0xc>)
 8003d34:	f000 f916 	bl	8003f64 <__retarget_lock_release_recursive>
 8003d38:	bd10      	pop	{r4, pc}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	200002f1 	.word	0x200002f1

08003d40 <__sinit>:
 8003d40:	b510      	push	{r4, lr}
 8003d42:	0004      	movs	r4, r0
 8003d44:	f7ff ffec 	bl	8003d20 <__sfp_lock_acquire>
 8003d48:	6a23      	ldr	r3, [r4, #32]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <__sinit+0x14>
 8003d4e:	f7ff ffef 	bl	8003d30 <__sfp_lock_release>
 8003d52:	bd10      	pop	{r4, pc}
 8003d54:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <__sinit+0x28>)
 8003d56:	6223      	str	r3, [r4, #32]
 8003d58:	4b04      	ldr	r3, [pc, #16]	@ (8003d6c <__sinit+0x2c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f6      	bne.n	8003d4e <__sinit+0xe>
 8003d60:	f7ff ffc0 	bl	8003ce4 <global_stdio_init.part.0>
 8003d64:	e7f3      	b.n	8003d4e <__sinit+0xe>
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	08003ca9 	.word	0x08003ca9
 8003d6c:	200002e8 	.word	0x200002e8

08003d70 <fiprintf>:
 8003d70:	b40e      	push	{r1, r2, r3}
 8003d72:	b517      	push	{r0, r1, r2, r4, lr}
 8003d74:	4c05      	ldr	r4, [pc, #20]	@ (8003d8c <fiprintf+0x1c>)
 8003d76:	ab05      	add	r3, sp, #20
 8003d78:	cb04      	ldmia	r3!, {r2}
 8003d7a:	0001      	movs	r1, r0
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	f000 fa1c 	bl	80041bc <_vfiprintf_r>
 8003d84:	bc1e      	pop	{r1, r2, r3, r4}
 8003d86:	bc08      	pop	{r3}
 8003d88:	b003      	add	sp, #12
 8003d8a:	4718      	bx	r3
 8003d8c:	20000024 	.word	0x20000024

08003d90 <_fwalk_sglue>:
 8003d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d92:	0014      	movs	r4, r2
 8003d94:	2600      	movs	r6, #0
 8003d96:	9000      	str	r0, [sp, #0]
 8003d98:	9101      	str	r1, [sp, #4]
 8003d9a:	68a5      	ldr	r5, [r4, #8]
 8003d9c:	6867      	ldr	r7, [r4, #4]
 8003d9e:	3f01      	subs	r7, #1
 8003da0:	d504      	bpl.n	8003dac <_fwalk_sglue+0x1c>
 8003da2:	6824      	ldr	r4, [r4, #0]
 8003da4:	2c00      	cmp	r4, #0
 8003da6:	d1f8      	bne.n	8003d9a <_fwalk_sglue+0xa>
 8003da8:	0030      	movs	r0, r6
 8003daa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dac:	89ab      	ldrh	r3, [r5, #12]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d908      	bls.n	8003dc4 <_fwalk_sglue+0x34>
 8003db2:	220e      	movs	r2, #14
 8003db4:	5eab      	ldrsh	r3, [r5, r2]
 8003db6:	3301      	adds	r3, #1
 8003db8:	d004      	beq.n	8003dc4 <_fwalk_sglue+0x34>
 8003dba:	0029      	movs	r1, r5
 8003dbc:	9800      	ldr	r0, [sp, #0]
 8003dbe:	9b01      	ldr	r3, [sp, #4]
 8003dc0:	4798      	blx	r3
 8003dc2:	4306      	orrs	r6, r0
 8003dc4:	3568      	adds	r5, #104	@ 0x68
 8003dc6:	e7ea      	b.n	8003d9e <_fwalk_sglue+0xe>

08003dc8 <__sread>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	000c      	movs	r4, r1
 8003dcc:	250e      	movs	r5, #14
 8003dce:	5f49      	ldrsh	r1, [r1, r5]
 8003dd0:	f000 f874 	bl	8003ebc <_read_r>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	db03      	blt.n	8003de0 <__sread+0x18>
 8003dd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003dda:	181b      	adds	r3, r3, r0
 8003ddc:	6563      	str	r3, [r4, #84]	@ 0x54
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	4a02      	ldr	r2, [pc, #8]	@ (8003dec <__sread+0x24>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	81a3      	strh	r3, [r4, #12]
 8003de8:	e7f9      	b.n	8003dde <__sread+0x16>
 8003dea:	46c0      	nop			@ (mov r8, r8)
 8003dec:	ffffefff 	.word	0xffffefff

08003df0 <__swrite>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	001f      	movs	r7, r3
 8003df4:	898b      	ldrh	r3, [r1, #12]
 8003df6:	0005      	movs	r5, r0
 8003df8:	000c      	movs	r4, r1
 8003dfa:	0016      	movs	r6, r2
 8003dfc:	05db      	lsls	r3, r3, #23
 8003dfe:	d505      	bpl.n	8003e0c <__swrite+0x1c>
 8003e00:	230e      	movs	r3, #14
 8003e02:	5ec9      	ldrsh	r1, [r1, r3]
 8003e04:	2200      	movs	r2, #0
 8003e06:	2302      	movs	r3, #2
 8003e08:	f000 f844 	bl	8003e94 <_lseek_r>
 8003e0c:	89a3      	ldrh	r3, [r4, #12]
 8003e0e:	4a05      	ldr	r2, [pc, #20]	@ (8003e24 <__swrite+0x34>)
 8003e10:	0028      	movs	r0, r5
 8003e12:	4013      	ands	r3, r2
 8003e14:	81a3      	strh	r3, [r4, #12]
 8003e16:	0032      	movs	r2, r6
 8003e18:	230e      	movs	r3, #14
 8003e1a:	5ee1      	ldrsh	r1, [r4, r3]
 8003e1c:	003b      	movs	r3, r7
 8003e1e:	f000 f861 	bl	8003ee4 <_write_r>
 8003e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e24:	ffffefff 	.word	0xffffefff

08003e28 <__sseek>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	000c      	movs	r4, r1
 8003e2c:	250e      	movs	r5, #14
 8003e2e:	5f49      	ldrsh	r1, [r1, r5]
 8003e30:	f000 f830 	bl	8003e94 <_lseek_r>
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	1c42      	adds	r2, r0, #1
 8003e38:	d103      	bne.n	8003e42 <__sseek+0x1a>
 8003e3a:	4a05      	ldr	r2, [pc, #20]	@ (8003e50 <__sseek+0x28>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	81a3      	strh	r3, [r4, #12]
 8003e40:	bd70      	pop	{r4, r5, r6, pc}
 8003e42:	2280      	movs	r2, #128	@ 0x80
 8003e44:	0152      	lsls	r2, r2, #5
 8003e46:	4313      	orrs	r3, r2
 8003e48:	81a3      	strh	r3, [r4, #12]
 8003e4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e4c:	e7f8      	b.n	8003e40 <__sseek+0x18>
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	ffffefff 	.word	0xffffefff

08003e54 <__sclose>:
 8003e54:	b510      	push	{r4, lr}
 8003e56:	230e      	movs	r3, #14
 8003e58:	5ec9      	ldrsh	r1, [r1, r3]
 8003e5a:	f000 f809 	bl	8003e70 <_close_r>
 8003e5e:	bd10      	pop	{r4, pc}

08003e60 <memset>:
 8003e60:	0003      	movs	r3, r0
 8003e62:	1882      	adds	r2, r0, r2
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	7019      	strb	r1, [r3, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <_close_r>:
 8003e70:	2300      	movs	r3, #0
 8003e72:	b570      	push	{r4, r5, r6, lr}
 8003e74:	4d06      	ldr	r5, [pc, #24]	@ (8003e90 <_close_r+0x20>)
 8003e76:	0004      	movs	r4, r0
 8003e78:	0008      	movs	r0, r1
 8003e7a:	602b      	str	r3, [r5, #0]
 8003e7c:	f7fc fff6 	bl	8000e6c <_close>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d103      	bne.n	8003e8c <_close_r+0x1c>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d000      	beq.n	8003e8c <_close_r+0x1c>
 8003e8a:	6023      	str	r3, [r4, #0]
 8003e8c:	bd70      	pop	{r4, r5, r6, pc}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	200002ec 	.word	0x200002ec

08003e94 <_lseek_r>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	0004      	movs	r4, r0
 8003e98:	0008      	movs	r0, r1
 8003e9a:	0011      	movs	r1, r2
 8003e9c:	001a      	movs	r2, r3
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	4d05      	ldr	r5, [pc, #20]	@ (8003eb8 <_lseek_r+0x24>)
 8003ea2:	602b      	str	r3, [r5, #0]
 8003ea4:	f7fd f803 	bl	8000eae <_lseek>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d103      	bne.n	8003eb4 <_lseek_r+0x20>
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d000      	beq.n	8003eb4 <_lseek_r+0x20>
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	200002ec 	.word	0x200002ec

08003ebc <_read_r>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	0004      	movs	r4, r0
 8003ec0:	0008      	movs	r0, r1
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	001a      	movs	r2, r3
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	4d05      	ldr	r5, [pc, #20]	@ (8003ee0 <_read_r+0x24>)
 8003eca:	602b      	str	r3, [r5, #0]
 8003ecc:	f7fc ff95 	bl	8000dfa <_read>
 8003ed0:	1c43      	adds	r3, r0, #1
 8003ed2:	d103      	bne.n	8003edc <_read_r+0x20>
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d000      	beq.n	8003edc <_read_r+0x20>
 8003eda:	6023      	str	r3, [r4, #0]
 8003edc:	bd70      	pop	{r4, r5, r6, pc}
 8003ede:	46c0      	nop			@ (mov r8, r8)
 8003ee0:	200002ec 	.word	0x200002ec

08003ee4 <_write_r>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	0004      	movs	r4, r0
 8003ee8:	0008      	movs	r0, r1
 8003eea:	0011      	movs	r1, r2
 8003eec:	001a      	movs	r2, r3
 8003eee:	2300      	movs	r3, #0
 8003ef0:	4d05      	ldr	r5, [pc, #20]	@ (8003f08 <_write_r+0x24>)
 8003ef2:	602b      	str	r3, [r5, #0]
 8003ef4:	f7fc ff9e 	bl	8000e34 <_write>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d103      	bne.n	8003f04 <_write_r+0x20>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d000      	beq.n	8003f04 <_write_r+0x20>
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	200002ec 	.word	0x200002ec

08003f0c <__errno>:
 8003f0c:	4b01      	ldr	r3, [pc, #4]	@ (8003f14 <__errno+0x8>)
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	4770      	bx	lr
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	20000024 	.word	0x20000024

08003f18 <__libc_init_array>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	2600      	movs	r6, #0
 8003f1c:	4c0c      	ldr	r4, [pc, #48]	@ (8003f50 <__libc_init_array+0x38>)
 8003f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003f54 <__libc_init_array+0x3c>)
 8003f20:	1b64      	subs	r4, r4, r5
 8003f22:	10a4      	asrs	r4, r4, #2
 8003f24:	42a6      	cmp	r6, r4
 8003f26:	d109      	bne.n	8003f3c <__libc_init_array+0x24>
 8003f28:	2600      	movs	r6, #0
 8003f2a:	f000 fe2b 	bl	8004b84 <_init>
 8003f2e:	4c0a      	ldr	r4, [pc, #40]	@ (8003f58 <__libc_init_array+0x40>)
 8003f30:	4d0a      	ldr	r5, [pc, #40]	@ (8003f5c <__libc_init_array+0x44>)
 8003f32:	1b64      	subs	r4, r4, r5
 8003f34:	10a4      	asrs	r4, r4, #2
 8003f36:	42a6      	cmp	r6, r4
 8003f38:	d105      	bne.n	8003f46 <__libc_init_array+0x2e>
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	00b3      	lsls	r3, r6, #2
 8003f3e:	58eb      	ldr	r3, [r5, r3]
 8003f40:	4798      	blx	r3
 8003f42:	3601      	adds	r6, #1
 8003f44:	e7ee      	b.n	8003f24 <__libc_init_array+0xc>
 8003f46:	00b3      	lsls	r3, r6, #2
 8003f48:	58eb      	ldr	r3, [r5, r3]
 8003f4a:	4798      	blx	r3
 8003f4c:	3601      	adds	r6, #1
 8003f4e:	e7f2      	b.n	8003f36 <__libc_init_array+0x1e>
 8003f50:	08004d18 	.word	0x08004d18
 8003f54:	08004d18 	.word	0x08004d18
 8003f58:	08004d1c 	.word	0x08004d1c
 8003f5c:	08004d18 	.word	0x08004d18

08003f60 <__retarget_lock_init_recursive>:
 8003f60:	4770      	bx	lr

08003f62 <__retarget_lock_acquire_recursive>:
 8003f62:	4770      	bx	lr

08003f64 <__retarget_lock_release_recursive>:
 8003f64:	4770      	bx	lr

08003f66 <abort>:
 8003f66:	2006      	movs	r0, #6
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	f000 fd3d 	bl	80049e8 <raise>
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f7fc ff36 	bl	8000de0 <_exit>

08003f74 <_free_r>:
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	0005      	movs	r5, r0
 8003f78:	1e0c      	subs	r4, r1, #0
 8003f7a:	d010      	beq.n	8003f9e <_free_r+0x2a>
 8003f7c:	3c04      	subs	r4, #4
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	da00      	bge.n	8003f86 <_free_r+0x12>
 8003f84:	18e4      	adds	r4, r4, r3
 8003f86:	0028      	movs	r0, r5
 8003f88:	f000 f8e0 	bl	800414c <__malloc_lock>
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004004 <_free_r+0x90>)
 8003f8e:	6813      	ldr	r3, [r2, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <_free_r+0x2c>
 8003f94:	6063      	str	r3, [r4, #4]
 8003f96:	6014      	str	r4, [r2, #0]
 8003f98:	0028      	movs	r0, r5
 8003f9a:	f000 f8df 	bl	800415c <__malloc_unlock>
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
 8003fa0:	42a3      	cmp	r3, r4
 8003fa2:	d908      	bls.n	8003fb6 <_free_r+0x42>
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	1821      	adds	r1, r4, r0
 8003fa8:	428b      	cmp	r3, r1
 8003faa:	d1f3      	bne.n	8003f94 <_free_r+0x20>
 8003fac:	6819      	ldr	r1, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	1809      	adds	r1, r1, r0
 8003fb2:	6021      	str	r1, [r4, #0]
 8003fb4:	e7ee      	b.n	8003f94 <_free_r+0x20>
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <_free_r+0x4e>
 8003fbe:	42a3      	cmp	r3, r4
 8003fc0:	d9f9      	bls.n	8003fb6 <_free_r+0x42>
 8003fc2:	6811      	ldr	r1, [r2, #0]
 8003fc4:	1850      	adds	r0, r2, r1
 8003fc6:	42a0      	cmp	r0, r4
 8003fc8:	d10b      	bne.n	8003fe2 <_free_r+0x6e>
 8003fca:	6820      	ldr	r0, [r4, #0]
 8003fcc:	1809      	adds	r1, r1, r0
 8003fce:	1850      	adds	r0, r2, r1
 8003fd0:	6011      	str	r1, [r2, #0]
 8003fd2:	4283      	cmp	r3, r0
 8003fd4:	d1e0      	bne.n	8003f98 <_free_r+0x24>
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	1841      	adds	r1, r0, r1
 8003fdc:	6011      	str	r1, [r2, #0]
 8003fde:	6053      	str	r3, [r2, #4]
 8003fe0:	e7da      	b.n	8003f98 <_free_r+0x24>
 8003fe2:	42a0      	cmp	r0, r4
 8003fe4:	d902      	bls.n	8003fec <_free_r+0x78>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	602b      	str	r3, [r5, #0]
 8003fea:	e7d5      	b.n	8003f98 <_free_r+0x24>
 8003fec:	6820      	ldr	r0, [r4, #0]
 8003fee:	1821      	adds	r1, r4, r0
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	d103      	bne.n	8003ffc <_free_r+0x88>
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	1809      	adds	r1, r1, r0
 8003ffa:	6021      	str	r1, [r4, #0]
 8003ffc:	6063      	str	r3, [r4, #4]
 8003ffe:	6054      	str	r4, [r2, #4]
 8004000:	e7ca      	b.n	8003f98 <_free_r+0x24>
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	200002f8 	.word	0x200002f8

08004008 <sbrk_aligned>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	4e0f      	ldr	r6, [pc, #60]	@ (8004048 <sbrk_aligned+0x40>)
 800400c:	000d      	movs	r5, r1
 800400e:	6831      	ldr	r1, [r6, #0]
 8004010:	0004      	movs	r4, r0
 8004012:	2900      	cmp	r1, #0
 8004014:	d102      	bne.n	800401c <sbrk_aligned+0x14>
 8004016:	f000 fd07 	bl	8004a28 <_sbrk_r>
 800401a:	6030      	str	r0, [r6, #0]
 800401c:	0029      	movs	r1, r5
 800401e:	0020      	movs	r0, r4
 8004020:	f000 fd02 	bl	8004a28 <_sbrk_r>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d103      	bne.n	8004030 <sbrk_aligned+0x28>
 8004028:	2501      	movs	r5, #1
 800402a:	426d      	negs	r5, r5
 800402c:	0028      	movs	r0, r5
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	2303      	movs	r3, #3
 8004032:	1cc5      	adds	r5, r0, #3
 8004034:	439d      	bics	r5, r3
 8004036:	42a8      	cmp	r0, r5
 8004038:	d0f8      	beq.n	800402c <sbrk_aligned+0x24>
 800403a:	1a29      	subs	r1, r5, r0
 800403c:	0020      	movs	r0, r4
 800403e:	f000 fcf3 	bl	8004a28 <_sbrk_r>
 8004042:	3001      	adds	r0, #1
 8004044:	d1f2      	bne.n	800402c <sbrk_aligned+0x24>
 8004046:	e7ef      	b.n	8004028 <sbrk_aligned+0x20>
 8004048:	200002f4 	.word	0x200002f4

0800404c <_malloc_r>:
 800404c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800404e:	2203      	movs	r2, #3
 8004050:	1ccb      	adds	r3, r1, #3
 8004052:	4393      	bics	r3, r2
 8004054:	3308      	adds	r3, #8
 8004056:	0005      	movs	r5, r0
 8004058:	001f      	movs	r7, r3
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d234      	bcs.n	80040c8 <_malloc_r+0x7c>
 800405e:	270c      	movs	r7, #12
 8004060:	42b9      	cmp	r1, r7
 8004062:	d833      	bhi.n	80040cc <_malloc_r+0x80>
 8004064:	0028      	movs	r0, r5
 8004066:	f000 f871 	bl	800414c <__malloc_lock>
 800406a:	4e37      	ldr	r6, [pc, #220]	@ (8004148 <_malloc_r+0xfc>)
 800406c:	6833      	ldr	r3, [r6, #0]
 800406e:	001c      	movs	r4, r3
 8004070:	2c00      	cmp	r4, #0
 8004072:	d12f      	bne.n	80040d4 <_malloc_r+0x88>
 8004074:	0039      	movs	r1, r7
 8004076:	0028      	movs	r0, r5
 8004078:	f7ff ffc6 	bl	8004008 <sbrk_aligned>
 800407c:	0004      	movs	r4, r0
 800407e:	1c43      	adds	r3, r0, #1
 8004080:	d15f      	bne.n	8004142 <_malloc_r+0xf6>
 8004082:	6834      	ldr	r4, [r6, #0]
 8004084:	9400      	str	r4, [sp, #0]
 8004086:	9b00      	ldr	r3, [sp, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d14a      	bne.n	8004122 <_malloc_r+0xd6>
 800408c:	2c00      	cmp	r4, #0
 800408e:	d052      	beq.n	8004136 <_malloc_r+0xea>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	0028      	movs	r0, r5
 8004094:	18e3      	adds	r3, r4, r3
 8004096:	9900      	ldr	r1, [sp, #0]
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	f000 fcc5 	bl	8004a28 <_sbrk_r>
 800409e:	9b01      	ldr	r3, [sp, #4]
 80040a0:	4283      	cmp	r3, r0
 80040a2:	d148      	bne.n	8004136 <_malloc_r+0xea>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	0028      	movs	r0, r5
 80040a8:	1aff      	subs	r7, r7, r3
 80040aa:	0039      	movs	r1, r7
 80040ac:	f7ff ffac 	bl	8004008 <sbrk_aligned>
 80040b0:	3001      	adds	r0, #1
 80040b2:	d040      	beq.n	8004136 <_malloc_r+0xea>
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	19db      	adds	r3, r3, r7
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	6833      	ldr	r3, [r6, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	2a00      	cmp	r2, #0
 80040c0:	d133      	bne.n	800412a <_malloc_r+0xde>
 80040c2:	9b00      	ldr	r3, [sp, #0]
 80040c4:	6033      	str	r3, [r6, #0]
 80040c6:	e019      	b.n	80040fc <_malloc_r+0xb0>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	dac9      	bge.n	8004060 <_malloc_r+0x14>
 80040cc:	230c      	movs	r3, #12
 80040ce:	602b      	str	r3, [r5, #0]
 80040d0:	2000      	movs	r0, #0
 80040d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040d4:	6821      	ldr	r1, [r4, #0]
 80040d6:	1bc9      	subs	r1, r1, r7
 80040d8:	d420      	bmi.n	800411c <_malloc_r+0xd0>
 80040da:	290b      	cmp	r1, #11
 80040dc:	d90a      	bls.n	80040f4 <_malloc_r+0xa8>
 80040de:	19e2      	adds	r2, r4, r7
 80040e0:	6027      	str	r7, [r4, #0]
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	d104      	bne.n	80040f0 <_malloc_r+0xa4>
 80040e6:	6032      	str	r2, [r6, #0]
 80040e8:	6863      	ldr	r3, [r4, #4]
 80040ea:	6011      	str	r1, [r2, #0]
 80040ec:	6053      	str	r3, [r2, #4]
 80040ee:	e005      	b.n	80040fc <_malloc_r+0xb0>
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	e7f9      	b.n	80040e8 <_malloc_r+0x9c>
 80040f4:	6862      	ldr	r2, [r4, #4]
 80040f6:	42a3      	cmp	r3, r4
 80040f8:	d10e      	bne.n	8004118 <_malloc_r+0xcc>
 80040fa:	6032      	str	r2, [r6, #0]
 80040fc:	0028      	movs	r0, r5
 80040fe:	f000 f82d 	bl	800415c <__malloc_unlock>
 8004102:	0020      	movs	r0, r4
 8004104:	2207      	movs	r2, #7
 8004106:	300b      	adds	r0, #11
 8004108:	1d23      	adds	r3, r4, #4
 800410a:	4390      	bics	r0, r2
 800410c:	1ac2      	subs	r2, r0, r3
 800410e:	4298      	cmp	r0, r3
 8004110:	d0df      	beq.n	80040d2 <_malloc_r+0x86>
 8004112:	1a1b      	subs	r3, r3, r0
 8004114:	50a3      	str	r3, [r4, r2]
 8004116:	e7dc      	b.n	80040d2 <_malloc_r+0x86>
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	e7ef      	b.n	80040fc <_malloc_r+0xb0>
 800411c:	0023      	movs	r3, r4
 800411e:	6864      	ldr	r4, [r4, #4]
 8004120:	e7a6      	b.n	8004070 <_malloc_r+0x24>
 8004122:	9c00      	ldr	r4, [sp, #0]
 8004124:	6863      	ldr	r3, [r4, #4]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	e7ad      	b.n	8004086 <_malloc_r+0x3a>
 800412a:	001a      	movs	r2, r3
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	42a3      	cmp	r3, r4
 8004130:	d1fb      	bne.n	800412a <_malloc_r+0xde>
 8004132:	2300      	movs	r3, #0
 8004134:	e7da      	b.n	80040ec <_malloc_r+0xa0>
 8004136:	230c      	movs	r3, #12
 8004138:	0028      	movs	r0, r5
 800413a:	602b      	str	r3, [r5, #0]
 800413c:	f000 f80e 	bl	800415c <__malloc_unlock>
 8004140:	e7c6      	b.n	80040d0 <_malloc_r+0x84>
 8004142:	6007      	str	r7, [r0, #0]
 8004144:	e7da      	b.n	80040fc <_malloc_r+0xb0>
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	200002f8 	.word	0x200002f8

0800414c <__malloc_lock>:
 800414c:	b510      	push	{r4, lr}
 800414e:	4802      	ldr	r0, [pc, #8]	@ (8004158 <__malloc_lock+0xc>)
 8004150:	f7ff ff07 	bl	8003f62 <__retarget_lock_acquire_recursive>
 8004154:	bd10      	pop	{r4, pc}
 8004156:	46c0      	nop			@ (mov r8, r8)
 8004158:	200002f0 	.word	0x200002f0

0800415c <__malloc_unlock>:
 800415c:	b510      	push	{r4, lr}
 800415e:	4802      	ldr	r0, [pc, #8]	@ (8004168 <__malloc_unlock+0xc>)
 8004160:	f7ff ff00 	bl	8003f64 <__retarget_lock_release_recursive>
 8004164:	bd10      	pop	{r4, pc}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	200002f0 	.word	0x200002f0

0800416c <__sfputc_r>:
 800416c:	6893      	ldr	r3, [r2, #8]
 800416e:	b510      	push	{r4, lr}
 8004170:	3b01      	subs	r3, #1
 8004172:	6093      	str	r3, [r2, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	da04      	bge.n	8004182 <__sfputc_r+0x16>
 8004178:	6994      	ldr	r4, [r2, #24]
 800417a:	42a3      	cmp	r3, r4
 800417c:	db07      	blt.n	800418e <__sfputc_r+0x22>
 800417e:	290a      	cmp	r1, #10
 8004180:	d005      	beq.n	800418e <__sfputc_r+0x22>
 8004182:	6813      	ldr	r3, [r2, #0]
 8004184:	1c58      	adds	r0, r3, #1
 8004186:	6010      	str	r0, [r2, #0]
 8004188:	7019      	strb	r1, [r3, #0]
 800418a:	0008      	movs	r0, r1
 800418c:	bd10      	pop	{r4, pc}
 800418e:	f000 fb60 	bl	8004852 <__swbuf_r>
 8004192:	0001      	movs	r1, r0
 8004194:	e7f9      	b.n	800418a <__sfputc_r+0x1e>

08004196 <__sfputs_r>:
 8004196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004198:	0006      	movs	r6, r0
 800419a:	000f      	movs	r7, r1
 800419c:	0014      	movs	r4, r2
 800419e:	18d5      	adds	r5, r2, r3
 80041a0:	42ac      	cmp	r4, r5
 80041a2:	d101      	bne.n	80041a8 <__sfputs_r+0x12>
 80041a4:	2000      	movs	r0, #0
 80041a6:	e007      	b.n	80041b8 <__sfputs_r+0x22>
 80041a8:	7821      	ldrb	r1, [r4, #0]
 80041aa:	003a      	movs	r2, r7
 80041ac:	0030      	movs	r0, r6
 80041ae:	f7ff ffdd 	bl	800416c <__sfputc_r>
 80041b2:	3401      	adds	r4, #1
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d1f3      	bne.n	80041a0 <__sfputs_r+0xa>
 80041b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041bc <_vfiprintf_r>:
 80041bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041be:	b0a1      	sub	sp, #132	@ 0x84
 80041c0:	000f      	movs	r7, r1
 80041c2:	0015      	movs	r5, r2
 80041c4:	001e      	movs	r6, r3
 80041c6:	9003      	str	r0, [sp, #12]
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d004      	beq.n	80041d6 <_vfiprintf_r+0x1a>
 80041cc:	6a03      	ldr	r3, [r0, #32]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <_vfiprintf_r+0x1a>
 80041d2:	f7ff fdb5 	bl	8003d40 <__sinit>
 80041d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041d8:	07db      	lsls	r3, r3, #31
 80041da:	d405      	bmi.n	80041e8 <_vfiprintf_r+0x2c>
 80041dc:	89bb      	ldrh	r3, [r7, #12]
 80041de:	059b      	lsls	r3, r3, #22
 80041e0:	d402      	bmi.n	80041e8 <_vfiprintf_r+0x2c>
 80041e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80041e4:	f7ff febd 	bl	8003f62 <__retarget_lock_acquire_recursive>
 80041e8:	89bb      	ldrh	r3, [r7, #12]
 80041ea:	071b      	lsls	r3, r3, #28
 80041ec:	d502      	bpl.n	80041f4 <_vfiprintf_r+0x38>
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d113      	bne.n	800421c <_vfiprintf_r+0x60>
 80041f4:	0039      	movs	r1, r7
 80041f6:	9803      	ldr	r0, [sp, #12]
 80041f8:	f000 fb6e 	bl	80048d8 <__swsetup_r>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	d00d      	beq.n	800421c <_vfiprintf_r+0x60>
 8004200:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004202:	07db      	lsls	r3, r3, #31
 8004204:	d503      	bpl.n	800420e <_vfiprintf_r+0x52>
 8004206:	2001      	movs	r0, #1
 8004208:	4240      	negs	r0, r0
 800420a:	b021      	add	sp, #132	@ 0x84
 800420c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800420e:	89bb      	ldrh	r3, [r7, #12]
 8004210:	059b      	lsls	r3, r3, #22
 8004212:	d4f8      	bmi.n	8004206 <_vfiprintf_r+0x4a>
 8004214:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004216:	f7ff fea5 	bl	8003f64 <__retarget_lock_release_recursive>
 800421a:	e7f4      	b.n	8004206 <_vfiprintf_r+0x4a>
 800421c:	2300      	movs	r3, #0
 800421e:	ac08      	add	r4, sp, #32
 8004220:	6163      	str	r3, [r4, #20]
 8004222:	3320      	adds	r3, #32
 8004224:	7663      	strb	r3, [r4, #25]
 8004226:	3310      	adds	r3, #16
 8004228:	76a3      	strb	r3, [r4, #26]
 800422a:	9607      	str	r6, [sp, #28]
 800422c:	002e      	movs	r6, r5
 800422e:	7833      	ldrb	r3, [r6, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <_vfiprintf_r+0x7c>
 8004234:	2b25      	cmp	r3, #37	@ 0x25
 8004236:	d148      	bne.n	80042ca <_vfiprintf_r+0x10e>
 8004238:	1b73      	subs	r3, r6, r5
 800423a:	9305      	str	r3, [sp, #20]
 800423c:	42ae      	cmp	r6, r5
 800423e:	d00b      	beq.n	8004258 <_vfiprintf_r+0x9c>
 8004240:	002a      	movs	r2, r5
 8004242:	0039      	movs	r1, r7
 8004244:	9803      	ldr	r0, [sp, #12]
 8004246:	f7ff ffa6 	bl	8004196 <__sfputs_r>
 800424a:	3001      	adds	r0, #1
 800424c:	d100      	bne.n	8004250 <_vfiprintf_r+0x94>
 800424e:	e0ae      	b.n	80043ae <_vfiprintf_r+0x1f2>
 8004250:	6963      	ldr	r3, [r4, #20]
 8004252:	9a05      	ldr	r2, [sp, #20]
 8004254:	189b      	adds	r3, r3, r2
 8004256:	6163      	str	r3, [r4, #20]
 8004258:	7833      	ldrb	r3, [r6, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d100      	bne.n	8004260 <_vfiprintf_r+0xa4>
 800425e:	e0a6      	b.n	80043ae <_vfiprintf_r+0x1f2>
 8004260:	2201      	movs	r2, #1
 8004262:	2300      	movs	r3, #0
 8004264:	4252      	negs	r2, r2
 8004266:	6062      	str	r2, [r4, #4]
 8004268:	a904      	add	r1, sp, #16
 800426a:	3254      	adds	r2, #84	@ 0x54
 800426c:	1852      	adds	r2, r2, r1
 800426e:	1c75      	adds	r5, r6, #1
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	60e3      	str	r3, [r4, #12]
 8004274:	60a3      	str	r3, [r4, #8]
 8004276:	7013      	strb	r3, [r2, #0]
 8004278:	65a3      	str	r3, [r4, #88]	@ 0x58
 800427a:	4b59      	ldr	r3, [pc, #356]	@ (80043e0 <_vfiprintf_r+0x224>)
 800427c:	2205      	movs	r2, #5
 800427e:	0018      	movs	r0, r3
 8004280:	7829      	ldrb	r1, [r5, #0]
 8004282:	9305      	str	r3, [sp, #20]
 8004284:	f000 fbe2 	bl	8004a4c <memchr>
 8004288:	1c6e      	adds	r6, r5, #1
 800428a:	2800      	cmp	r0, #0
 800428c:	d11f      	bne.n	80042ce <_vfiprintf_r+0x112>
 800428e:	6822      	ldr	r2, [r4, #0]
 8004290:	06d3      	lsls	r3, r2, #27
 8004292:	d504      	bpl.n	800429e <_vfiprintf_r+0xe2>
 8004294:	2353      	movs	r3, #83	@ 0x53
 8004296:	a904      	add	r1, sp, #16
 8004298:	185b      	adds	r3, r3, r1
 800429a:	2120      	movs	r1, #32
 800429c:	7019      	strb	r1, [r3, #0]
 800429e:	0713      	lsls	r3, r2, #28
 80042a0:	d504      	bpl.n	80042ac <_vfiprintf_r+0xf0>
 80042a2:	2353      	movs	r3, #83	@ 0x53
 80042a4:	a904      	add	r1, sp, #16
 80042a6:	185b      	adds	r3, r3, r1
 80042a8:	212b      	movs	r1, #43	@ 0x2b
 80042aa:	7019      	strb	r1, [r3, #0]
 80042ac:	782b      	ldrb	r3, [r5, #0]
 80042ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80042b0:	d016      	beq.n	80042e0 <_vfiprintf_r+0x124>
 80042b2:	002e      	movs	r6, r5
 80042b4:	2100      	movs	r1, #0
 80042b6:	200a      	movs	r0, #10
 80042b8:	68e3      	ldr	r3, [r4, #12]
 80042ba:	7832      	ldrb	r2, [r6, #0]
 80042bc:	1c75      	adds	r5, r6, #1
 80042be:	3a30      	subs	r2, #48	@ 0x30
 80042c0:	2a09      	cmp	r2, #9
 80042c2:	d950      	bls.n	8004366 <_vfiprintf_r+0x1aa>
 80042c4:	2900      	cmp	r1, #0
 80042c6:	d111      	bne.n	80042ec <_vfiprintf_r+0x130>
 80042c8:	e017      	b.n	80042fa <_vfiprintf_r+0x13e>
 80042ca:	3601      	adds	r6, #1
 80042cc:	e7af      	b.n	800422e <_vfiprintf_r+0x72>
 80042ce:	9b05      	ldr	r3, [sp, #20]
 80042d0:	6822      	ldr	r2, [r4, #0]
 80042d2:	1ac0      	subs	r0, r0, r3
 80042d4:	2301      	movs	r3, #1
 80042d6:	4083      	lsls	r3, r0
 80042d8:	4313      	orrs	r3, r2
 80042da:	0035      	movs	r5, r6
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	e7cc      	b.n	800427a <_vfiprintf_r+0xbe>
 80042e0:	9b07      	ldr	r3, [sp, #28]
 80042e2:	1d19      	adds	r1, r3, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	9107      	str	r1, [sp, #28]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	db01      	blt.n	80042f0 <_vfiprintf_r+0x134>
 80042ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042ee:	e004      	b.n	80042fa <_vfiprintf_r+0x13e>
 80042f0:	425b      	negs	r3, r3
 80042f2:	60e3      	str	r3, [r4, #12]
 80042f4:	2302      	movs	r3, #2
 80042f6:	4313      	orrs	r3, r2
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	7833      	ldrb	r3, [r6, #0]
 80042fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80042fe:	d10c      	bne.n	800431a <_vfiprintf_r+0x15e>
 8004300:	7873      	ldrb	r3, [r6, #1]
 8004302:	2b2a      	cmp	r3, #42	@ 0x2a
 8004304:	d134      	bne.n	8004370 <_vfiprintf_r+0x1b4>
 8004306:	9b07      	ldr	r3, [sp, #28]
 8004308:	3602      	adds	r6, #2
 800430a:	1d1a      	adds	r2, r3, #4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	9207      	str	r2, [sp, #28]
 8004310:	2b00      	cmp	r3, #0
 8004312:	da01      	bge.n	8004318 <_vfiprintf_r+0x15c>
 8004314:	2301      	movs	r3, #1
 8004316:	425b      	negs	r3, r3
 8004318:	9309      	str	r3, [sp, #36]	@ 0x24
 800431a:	4d32      	ldr	r5, [pc, #200]	@ (80043e4 <_vfiprintf_r+0x228>)
 800431c:	2203      	movs	r2, #3
 800431e:	0028      	movs	r0, r5
 8004320:	7831      	ldrb	r1, [r6, #0]
 8004322:	f000 fb93 	bl	8004a4c <memchr>
 8004326:	2800      	cmp	r0, #0
 8004328:	d006      	beq.n	8004338 <_vfiprintf_r+0x17c>
 800432a:	2340      	movs	r3, #64	@ 0x40
 800432c:	1b40      	subs	r0, r0, r5
 800432e:	4083      	lsls	r3, r0
 8004330:	6822      	ldr	r2, [r4, #0]
 8004332:	3601      	adds	r6, #1
 8004334:	4313      	orrs	r3, r2
 8004336:	6023      	str	r3, [r4, #0]
 8004338:	7831      	ldrb	r1, [r6, #0]
 800433a:	2206      	movs	r2, #6
 800433c:	482a      	ldr	r0, [pc, #168]	@ (80043e8 <_vfiprintf_r+0x22c>)
 800433e:	1c75      	adds	r5, r6, #1
 8004340:	7621      	strb	r1, [r4, #24]
 8004342:	f000 fb83 	bl	8004a4c <memchr>
 8004346:	2800      	cmp	r0, #0
 8004348:	d040      	beq.n	80043cc <_vfiprintf_r+0x210>
 800434a:	4b28      	ldr	r3, [pc, #160]	@ (80043ec <_vfiprintf_r+0x230>)
 800434c:	2b00      	cmp	r3, #0
 800434e:	d122      	bne.n	8004396 <_vfiprintf_r+0x1da>
 8004350:	2207      	movs	r2, #7
 8004352:	9b07      	ldr	r3, [sp, #28]
 8004354:	3307      	adds	r3, #7
 8004356:	4393      	bics	r3, r2
 8004358:	3308      	adds	r3, #8
 800435a:	9307      	str	r3, [sp, #28]
 800435c:	6963      	ldr	r3, [r4, #20]
 800435e:	9a04      	ldr	r2, [sp, #16]
 8004360:	189b      	adds	r3, r3, r2
 8004362:	6163      	str	r3, [r4, #20]
 8004364:	e762      	b.n	800422c <_vfiprintf_r+0x70>
 8004366:	4343      	muls	r3, r0
 8004368:	002e      	movs	r6, r5
 800436a:	2101      	movs	r1, #1
 800436c:	189b      	adds	r3, r3, r2
 800436e:	e7a4      	b.n	80042ba <_vfiprintf_r+0xfe>
 8004370:	2300      	movs	r3, #0
 8004372:	200a      	movs	r0, #10
 8004374:	0019      	movs	r1, r3
 8004376:	3601      	adds	r6, #1
 8004378:	6063      	str	r3, [r4, #4]
 800437a:	7832      	ldrb	r2, [r6, #0]
 800437c:	1c75      	adds	r5, r6, #1
 800437e:	3a30      	subs	r2, #48	@ 0x30
 8004380:	2a09      	cmp	r2, #9
 8004382:	d903      	bls.n	800438c <_vfiprintf_r+0x1d0>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0c8      	beq.n	800431a <_vfiprintf_r+0x15e>
 8004388:	9109      	str	r1, [sp, #36]	@ 0x24
 800438a:	e7c6      	b.n	800431a <_vfiprintf_r+0x15e>
 800438c:	4341      	muls	r1, r0
 800438e:	002e      	movs	r6, r5
 8004390:	2301      	movs	r3, #1
 8004392:	1889      	adds	r1, r1, r2
 8004394:	e7f1      	b.n	800437a <_vfiprintf_r+0x1be>
 8004396:	aa07      	add	r2, sp, #28
 8004398:	9200      	str	r2, [sp, #0]
 800439a:	0021      	movs	r1, r4
 800439c:	003a      	movs	r2, r7
 800439e:	4b14      	ldr	r3, [pc, #80]	@ (80043f0 <_vfiprintf_r+0x234>)
 80043a0:	9803      	ldr	r0, [sp, #12]
 80043a2:	e000      	b.n	80043a6 <_vfiprintf_r+0x1ea>
 80043a4:	bf00      	nop
 80043a6:	9004      	str	r0, [sp, #16]
 80043a8:	9b04      	ldr	r3, [sp, #16]
 80043aa:	3301      	adds	r3, #1
 80043ac:	d1d6      	bne.n	800435c <_vfiprintf_r+0x1a0>
 80043ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043b0:	07db      	lsls	r3, r3, #31
 80043b2:	d405      	bmi.n	80043c0 <_vfiprintf_r+0x204>
 80043b4:	89bb      	ldrh	r3, [r7, #12]
 80043b6:	059b      	lsls	r3, r3, #22
 80043b8:	d402      	bmi.n	80043c0 <_vfiprintf_r+0x204>
 80043ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80043bc:	f7ff fdd2 	bl	8003f64 <__retarget_lock_release_recursive>
 80043c0:	89bb      	ldrh	r3, [r7, #12]
 80043c2:	065b      	lsls	r3, r3, #25
 80043c4:	d500      	bpl.n	80043c8 <_vfiprintf_r+0x20c>
 80043c6:	e71e      	b.n	8004206 <_vfiprintf_r+0x4a>
 80043c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80043ca:	e71e      	b.n	800420a <_vfiprintf_r+0x4e>
 80043cc:	aa07      	add	r2, sp, #28
 80043ce:	9200      	str	r2, [sp, #0]
 80043d0:	0021      	movs	r1, r4
 80043d2:	003a      	movs	r2, r7
 80043d4:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <_vfiprintf_r+0x234>)
 80043d6:	9803      	ldr	r0, [sp, #12]
 80043d8:	f000 f87c 	bl	80044d4 <_printf_i>
 80043dc:	e7e3      	b.n	80043a6 <_vfiprintf_r+0x1ea>
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	08004ce4 	.word	0x08004ce4
 80043e4:	08004cea 	.word	0x08004cea
 80043e8:	08004cee 	.word	0x08004cee
 80043ec:	00000000 	.word	0x00000000
 80043f0:	08004197 	.word	0x08004197

080043f4 <_printf_common>:
 80043f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043f6:	0016      	movs	r6, r2
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	688a      	ldr	r2, [r1, #8]
 80043fc:	690b      	ldr	r3, [r1, #16]
 80043fe:	000c      	movs	r4, r1
 8004400:	9000      	str	r0, [sp, #0]
 8004402:	4293      	cmp	r3, r2
 8004404:	da00      	bge.n	8004408 <_printf_common+0x14>
 8004406:	0013      	movs	r3, r2
 8004408:	0022      	movs	r2, r4
 800440a:	6033      	str	r3, [r6, #0]
 800440c:	3243      	adds	r2, #67	@ 0x43
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	2a00      	cmp	r2, #0
 8004412:	d001      	beq.n	8004418 <_printf_common+0x24>
 8004414:	3301      	adds	r3, #1
 8004416:	6033      	str	r3, [r6, #0]
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	069b      	lsls	r3, r3, #26
 800441c:	d502      	bpl.n	8004424 <_printf_common+0x30>
 800441e:	6833      	ldr	r3, [r6, #0]
 8004420:	3302      	adds	r3, #2
 8004422:	6033      	str	r3, [r6, #0]
 8004424:	6822      	ldr	r2, [r4, #0]
 8004426:	2306      	movs	r3, #6
 8004428:	0015      	movs	r5, r2
 800442a:	401d      	ands	r5, r3
 800442c:	421a      	tst	r2, r3
 800442e:	d027      	beq.n	8004480 <_printf_common+0x8c>
 8004430:	0023      	movs	r3, r4
 8004432:	3343      	adds	r3, #67	@ 0x43
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	1e5a      	subs	r2, r3, #1
 8004438:	4193      	sbcs	r3, r2
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	0692      	lsls	r2, r2, #26
 800443e:	d430      	bmi.n	80044a2 <_printf_common+0xae>
 8004440:	0022      	movs	r2, r4
 8004442:	9901      	ldr	r1, [sp, #4]
 8004444:	9800      	ldr	r0, [sp, #0]
 8004446:	9d08      	ldr	r5, [sp, #32]
 8004448:	3243      	adds	r2, #67	@ 0x43
 800444a:	47a8      	blx	r5
 800444c:	3001      	adds	r0, #1
 800444e:	d025      	beq.n	800449c <_printf_common+0xa8>
 8004450:	2206      	movs	r2, #6
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	2500      	movs	r5, #0
 8004456:	4013      	ands	r3, r2
 8004458:	2b04      	cmp	r3, #4
 800445a:	d105      	bne.n	8004468 <_printf_common+0x74>
 800445c:	6833      	ldr	r3, [r6, #0]
 800445e:	68e5      	ldr	r5, [r4, #12]
 8004460:	1aed      	subs	r5, r5, r3
 8004462:	43eb      	mvns	r3, r5
 8004464:	17db      	asrs	r3, r3, #31
 8004466:	401d      	ands	r5, r3
 8004468:	68a3      	ldr	r3, [r4, #8]
 800446a:	6922      	ldr	r2, [r4, #16]
 800446c:	4293      	cmp	r3, r2
 800446e:	dd01      	ble.n	8004474 <_printf_common+0x80>
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	18ed      	adds	r5, r5, r3
 8004474:	2600      	movs	r6, #0
 8004476:	42b5      	cmp	r5, r6
 8004478:	d120      	bne.n	80044bc <_printf_common+0xc8>
 800447a:	2000      	movs	r0, #0
 800447c:	e010      	b.n	80044a0 <_printf_common+0xac>
 800447e:	3501      	adds	r5, #1
 8004480:	68e3      	ldr	r3, [r4, #12]
 8004482:	6832      	ldr	r2, [r6, #0]
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	42ab      	cmp	r3, r5
 8004488:	ddd2      	ble.n	8004430 <_printf_common+0x3c>
 800448a:	0022      	movs	r2, r4
 800448c:	2301      	movs	r3, #1
 800448e:	9901      	ldr	r1, [sp, #4]
 8004490:	9800      	ldr	r0, [sp, #0]
 8004492:	9f08      	ldr	r7, [sp, #32]
 8004494:	3219      	adds	r2, #25
 8004496:	47b8      	blx	r7
 8004498:	3001      	adds	r0, #1
 800449a:	d1f0      	bne.n	800447e <_printf_common+0x8a>
 800449c:	2001      	movs	r0, #1
 800449e:	4240      	negs	r0, r0
 80044a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044a2:	2030      	movs	r0, #48	@ 0x30
 80044a4:	18e1      	adds	r1, r4, r3
 80044a6:	3143      	adds	r1, #67	@ 0x43
 80044a8:	7008      	strb	r0, [r1, #0]
 80044aa:	0021      	movs	r1, r4
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	3145      	adds	r1, #69	@ 0x45
 80044b0:	7809      	ldrb	r1, [r1, #0]
 80044b2:	18a2      	adds	r2, r4, r2
 80044b4:	3243      	adds	r2, #67	@ 0x43
 80044b6:	3302      	adds	r3, #2
 80044b8:	7011      	strb	r1, [r2, #0]
 80044ba:	e7c1      	b.n	8004440 <_printf_common+0x4c>
 80044bc:	0022      	movs	r2, r4
 80044be:	2301      	movs	r3, #1
 80044c0:	9901      	ldr	r1, [sp, #4]
 80044c2:	9800      	ldr	r0, [sp, #0]
 80044c4:	9f08      	ldr	r7, [sp, #32]
 80044c6:	321a      	adds	r2, #26
 80044c8:	47b8      	blx	r7
 80044ca:	3001      	adds	r0, #1
 80044cc:	d0e6      	beq.n	800449c <_printf_common+0xa8>
 80044ce:	3601      	adds	r6, #1
 80044d0:	e7d1      	b.n	8004476 <_printf_common+0x82>
	...

080044d4 <_printf_i>:
 80044d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d6:	b08b      	sub	sp, #44	@ 0x2c
 80044d8:	9206      	str	r2, [sp, #24]
 80044da:	000a      	movs	r2, r1
 80044dc:	3243      	adds	r2, #67	@ 0x43
 80044de:	9307      	str	r3, [sp, #28]
 80044e0:	9005      	str	r0, [sp, #20]
 80044e2:	9203      	str	r2, [sp, #12]
 80044e4:	7e0a      	ldrb	r2, [r1, #24]
 80044e6:	000c      	movs	r4, r1
 80044e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80044ea:	2a78      	cmp	r2, #120	@ 0x78
 80044ec:	d809      	bhi.n	8004502 <_printf_i+0x2e>
 80044ee:	2a62      	cmp	r2, #98	@ 0x62
 80044f0:	d80b      	bhi.n	800450a <_printf_i+0x36>
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	d100      	bne.n	80044f8 <_printf_i+0x24>
 80044f6:	e0bc      	b.n	8004672 <_printf_i+0x19e>
 80044f8:	497b      	ldr	r1, [pc, #492]	@ (80046e8 <_printf_i+0x214>)
 80044fa:	9104      	str	r1, [sp, #16]
 80044fc:	2a58      	cmp	r2, #88	@ 0x58
 80044fe:	d100      	bne.n	8004502 <_printf_i+0x2e>
 8004500:	e090      	b.n	8004624 <_printf_i+0x150>
 8004502:	0025      	movs	r5, r4
 8004504:	3542      	adds	r5, #66	@ 0x42
 8004506:	702a      	strb	r2, [r5, #0]
 8004508:	e022      	b.n	8004550 <_printf_i+0x7c>
 800450a:	0010      	movs	r0, r2
 800450c:	3863      	subs	r0, #99	@ 0x63
 800450e:	2815      	cmp	r0, #21
 8004510:	d8f7      	bhi.n	8004502 <_printf_i+0x2e>
 8004512:	f7fb fdf9 	bl	8000108 <__gnu_thumb1_case_shi>
 8004516:	0016      	.short	0x0016
 8004518:	fff6001f 	.word	0xfff6001f
 800451c:	fff6fff6 	.word	0xfff6fff6
 8004520:	001ffff6 	.word	0x001ffff6
 8004524:	fff6fff6 	.word	0xfff6fff6
 8004528:	fff6fff6 	.word	0xfff6fff6
 800452c:	003600a1 	.word	0x003600a1
 8004530:	fff60080 	.word	0xfff60080
 8004534:	00b2fff6 	.word	0x00b2fff6
 8004538:	0036fff6 	.word	0x0036fff6
 800453c:	fff6fff6 	.word	0xfff6fff6
 8004540:	0084      	.short	0x0084
 8004542:	0025      	movs	r5, r4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	3542      	adds	r5, #66	@ 0x42
 8004548:	1d11      	adds	r1, r2, #4
 800454a:	6019      	str	r1, [r3, #0]
 800454c:	6813      	ldr	r3, [r2, #0]
 800454e:	702b      	strb	r3, [r5, #0]
 8004550:	2301      	movs	r3, #1
 8004552:	e0a0      	b.n	8004696 <_printf_i+0x1c2>
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	6809      	ldr	r1, [r1, #0]
 8004558:	1d02      	adds	r2, r0, #4
 800455a:	060d      	lsls	r5, r1, #24
 800455c:	d50b      	bpl.n	8004576 <_printf_i+0xa2>
 800455e:	6806      	ldr	r6, [r0, #0]
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	2e00      	cmp	r6, #0
 8004564:	da03      	bge.n	800456e <_printf_i+0x9a>
 8004566:	232d      	movs	r3, #45	@ 0x2d
 8004568:	9a03      	ldr	r2, [sp, #12]
 800456a:	4276      	negs	r6, r6
 800456c:	7013      	strb	r3, [r2, #0]
 800456e:	4b5e      	ldr	r3, [pc, #376]	@ (80046e8 <_printf_i+0x214>)
 8004570:	270a      	movs	r7, #10
 8004572:	9304      	str	r3, [sp, #16]
 8004574:	e018      	b.n	80045a8 <_printf_i+0xd4>
 8004576:	6806      	ldr	r6, [r0, #0]
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	0649      	lsls	r1, r1, #25
 800457c:	d5f1      	bpl.n	8004562 <_printf_i+0x8e>
 800457e:	b236      	sxth	r6, r6
 8004580:	e7ef      	b.n	8004562 <_printf_i+0x8e>
 8004582:	6808      	ldr	r0, [r1, #0]
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	c940      	ldmia	r1!, {r6}
 8004588:	0605      	lsls	r5, r0, #24
 800458a:	d402      	bmi.n	8004592 <_printf_i+0xbe>
 800458c:	0640      	lsls	r0, r0, #25
 800458e:	d500      	bpl.n	8004592 <_printf_i+0xbe>
 8004590:	b2b6      	uxth	r6, r6
 8004592:	6019      	str	r1, [r3, #0]
 8004594:	4b54      	ldr	r3, [pc, #336]	@ (80046e8 <_printf_i+0x214>)
 8004596:	270a      	movs	r7, #10
 8004598:	9304      	str	r3, [sp, #16]
 800459a:	2a6f      	cmp	r2, #111	@ 0x6f
 800459c:	d100      	bne.n	80045a0 <_printf_i+0xcc>
 800459e:	3f02      	subs	r7, #2
 80045a0:	0023      	movs	r3, r4
 80045a2:	2200      	movs	r2, #0
 80045a4:	3343      	adds	r3, #67	@ 0x43
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	6863      	ldr	r3, [r4, #4]
 80045aa:	60a3      	str	r3, [r4, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	db03      	blt.n	80045b8 <_printf_i+0xe4>
 80045b0:	2104      	movs	r1, #4
 80045b2:	6822      	ldr	r2, [r4, #0]
 80045b4:	438a      	bics	r2, r1
 80045b6:	6022      	str	r2, [r4, #0]
 80045b8:	2e00      	cmp	r6, #0
 80045ba:	d102      	bne.n	80045c2 <_printf_i+0xee>
 80045bc:	9d03      	ldr	r5, [sp, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <_printf_i+0x108>
 80045c2:	9d03      	ldr	r5, [sp, #12]
 80045c4:	0030      	movs	r0, r6
 80045c6:	0039      	movs	r1, r7
 80045c8:	f7fb fe2e 	bl	8000228 <__aeabi_uidivmod>
 80045cc:	9b04      	ldr	r3, [sp, #16]
 80045ce:	3d01      	subs	r5, #1
 80045d0:	5c5b      	ldrb	r3, [r3, r1]
 80045d2:	702b      	strb	r3, [r5, #0]
 80045d4:	0033      	movs	r3, r6
 80045d6:	0006      	movs	r6, r0
 80045d8:	429f      	cmp	r7, r3
 80045da:	d9f3      	bls.n	80045c4 <_printf_i+0xf0>
 80045dc:	2f08      	cmp	r7, #8
 80045de:	d109      	bne.n	80045f4 <_printf_i+0x120>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	07db      	lsls	r3, r3, #31
 80045e4:	d506      	bpl.n	80045f4 <_printf_i+0x120>
 80045e6:	6862      	ldr	r2, [r4, #4]
 80045e8:	6923      	ldr	r3, [r4, #16]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	dc02      	bgt.n	80045f4 <_printf_i+0x120>
 80045ee:	2330      	movs	r3, #48	@ 0x30
 80045f0:	3d01      	subs	r5, #1
 80045f2:	702b      	strb	r3, [r5, #0]
 80045f4:	9b03      	ldr	r3, [sp, #12]
 80045f6:	1b5b      	subs	r3, r3, r5
 80045f8:	6123      	str	r3, [r4, #16]
 80045fa:	9b07      	ldr	r3, [sp, #28]
 80045fc:	0021      	movs	r1, r4
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	9805      	ldr	r0, [sp, #20]
 8004602:	9b06      	ldr	r3, [sp, #24]
 8004604:	aa09      	add	r2, sp, #36	@ 0x24
 8004606:	f7ff fef5 	bl	80043f4 <_printf_common>
 800460a:	3001      	adds	r0, #1
 800460c:	d148      	bne.n	80046a0 <_printf_i+0x1cc>
 800460e:	2001      	movs	r0, #1
 8004610:	4240      	negs	r0, r0
 8004612:	b00b      	add	sp, #44	@ 0x2c
 8004614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004616:	2220      	movs	r2, #32
 8004618:	6809      	ldr	r1, [r1, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	6022      	str	r2, [r4, #0]
 800461e:	2278      	movs	r2, #120	@ 0x78
 8004620:	4932      	ldr	r1, [pc, #200]	@ (80046ec <_printf_i+0x218>)
 8004622:	9104      	str	r1, [sp, #16]
 8004624:	0021      	movs	r1, r4
 8004626:	3145      	adds	r1, #69	@ 0x45
 8004628:	700a      	strb	r2, [r1, #0]
 800462a:	6819      	ldr	r1, [r3, #0]
 800462c:	6822      	ldr	r2, [r4, #0]
 800462e:	c940      	ldmia	r1!, {r6}
 8004630:	0610      	lsls	r0, r2, #24
 8004632:	d402      	bmi.n	800463a <_printf_i+0x166>
 8004634:	0650      	lsls	r0, r2, #25
 8004636:	d500      	bpl.n	800463a <_printf_i+0x166>
 8004638:	b2b6      	uxth	r6, r6
 800463a:	6019      	str	r1, [r3, #0]
 800463c:	07d3      	lsls	r3, r2, #31
 800463e:	d502      	bpl.n	8004646 <_printf_i+0x172>
 8004640:	2320      	movs	r3, #32
 8004642:	4313      	orrs	r3, r2
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	2e00      	cmp	r6, #0
 8004648:	d001      	beq.n	800464e <_printf_i+0x17a>
 800464a:	2710      	movs	r7, #16
 800464c:	e7a8      	b.n	80045a0 <_printf_i+0xcc>
 800464e:	2220      	movs	r2, #32
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	4393      	bics	r3, r2
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	e7f8      	b.n	800464a <_printf_i+0x176>
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	680d      	ldr	r5, [r1, #0]
 800465c:	1d10      	adds	r0, r2, #4
 800465e:	6949      	ldr	r1, [r1, #20]
 8004660:	6018      	str	r0, [r3, #0]
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	062e      	lsls	r6, r5, #24
 8004666:	d501      	bpl.n	800466c <_printf_i+0x198>
 8004668:	6019      	str	r1, [r3, #0]
 800466a:	e002      	b.n	8004672 <_printf_i+0x19e>
 800466c:	066d      	lsls	r5, r5, #25
 800466e:	d5fb      	bpl.n	8004668 <_printf_i+0x194>
 8004670:	8019      	strh	r1, [r3, #0]
 8004672:	2300      	movs	r3, #0
 8004674:	9d03      	ldr	r5, [sp, #12]
 8004676:	6123      	str	r3, [r4, #16]
 8004678:	e7bf      	b.n	80045fa <_printf_i+0x126>
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	1d11      	adds	r1, r2, #4
 800467e:	6019      	str	r1, [r3, #0]
 8004680:	6815      	ldr	r5, [r2, #0]
 8004682:	2100      	movs	r1, #0
 8004684:	0028      	movs	r0, r5
 8004686:	6862      	ldr	r2, [r4, #4]
 8004688:	f000 f9e0 	bl	8004a4c <memchr>
 800468c:	2800      	cmp	r0, #0
 800468e:	d001      	beq.n	8004694 <_printf_i+0x1c0>
 8004690:	1b40      	subs	r0, r0, r5
 8004692:	6060      	str	r0, [r4, #4]
 8004694:	6863      	ldr	r3, [r4, #4]
 8004696:	6123      	str	r3, [r4, #16]
 8004698:	2300      	movs	r3, #0
 800469a:	9a03      	ldr	r2, [sp, #12]
 800469c:	7013      	strb	r3, [r2, #0]
 800469e:	e7ac      	b.n	80045fa <_printf_i+0x126>
 80046a0:	002a      	movs	r2, r5
 80046a2:	6923      	ldr	r3, [r4, #16]
 80046a4:	9906      	ldr	r1, [sp, #24]
 80046a6:	9805      	ldr	r0, [sp, #20]
 80046a8:	9d07      	ldr	r5, [sp, #28]
 80046aa:	47a8      	blx	r5
 80046ac:	3001      	adds	r0, #1
 80046ae:	d0ae      	beq.n	800460e <_printf_i+0x13a>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	079b      	lsls	r3, r3, #30
 80046b4:	d415      	bmi.n	80046e2 <_printf_i+0x20e>
 80046b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046b8:	68e0      	ldr	r0, [r4, #12]
 80046ba:	4298      	cmp	r0, r3
 80046bc:	daa9      	bge.n	8004612 <_printf_i+0x13e>
 80046be:	0018      	movs	r0, r3
 80046c0:	e7a7      	b.n	8004612 <_printf_i+0x13e>
 80046c2:	0022      	movs	r2, r4
 80046c4:	2301      	movs	r3, #1
 80046c6:	9906      	ldr	r1, [sp, #24]
 80046c8:	9805      	ldr	r0, [sp, #20]
 80046ca:	9e07      	ldr	r6, [sp, #28]
 80046cc:	3219      	adds	r2, #25
 80046ce:	47b0      	blx	r6
 80046d0:	3001      	adds	r0, #1
 80046d2:	d09c      	beq.n	800460e <_printf_i+0x13a>
 80046d4:	3501      	adds	r5, #1
 80046d6:	68e3      	ldr	r3, [r4, #12]
 80046d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	42ab      	cmp	r3, r5
 80046de:	dcf0      	bgt.n	80046c2 <_printf_i+0x1ee>
 80046e0:	e7e9      	b.n	80046b6 <_printf_i+0x1e2>
 80046e2:	2500      	movs	r5, #0
 80046e4:	e7f7      	b.n	80046d6 <_printf_i+0x202>
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	08004cf5 	.word	0x08004cf5
 80046ec:	08004d06 	.word	0x08004d06

080046f0 <__sflush_r>:
 80046f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046f2:	220c      	movs	r2, #12
 80046f4:	5e8b      	ldrsh	r3, [r1, r2]
 80046f6:	0005      	movs	r5, r0
 80046f8:	000c      	movs	r4, r1
 80046fa:	071a      	lsls	r2, r3, #28
 80046fc:	d456      	bmi.n	80047ac <__sflush_r+0xbc>
 80046fe:	684a      	ldr	r2, [r1, #4]
 8004700:	2a00      	cmp	r2, #0
 8004702:	dc02      	bgt.n	800470a <__sflush_r+0x1a>
 8004704:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004706:	2a00      	cmp	r2, #0
 8004708:	dd4e      	ble.n	80047a8 <__sflush_r+0xb8>
 800470a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800470c:	2f00      	cmp	r7, #0
 800470e:	d04b      	beq.n	80047a8 <__sflush_r+0xb8>
 8004710:	2200      	movs	r2, #0
 8004712:	2080      	movs	r0, #128	@ 0x80
 8004714:	682e      	ldr	r6, [r5, #0]
 8004716:	602a      	str	r2, [r5, #0]
 8004718:	001a      	movs	r2, r3
 800471a:	0140      	lsls	r0, r0, #5
 800471c:	6a21      	ldr	r1, [r4, #32]
 800471e:	4002      	ands	r2, r0
 8004720:	4203      	tst	r3, r0
 8004722:	d033      	beq.n	800478c <__sflush_r+0x9c>
 8004724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	075b      	lsls	r3, r3, #29
 800472a:	d506      	bpl.n	800473a <__sflush_r+0x4a>
 800472c:	6863      	ldr	r3, [r4, #4]
 800472e:	1ad2      	subs	r2, r2, r3
 8004730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <__sflush_r+0x4a>
 8004736:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004738:	1ad2      	subs	r2, r2, r3
 800473a:	2300      	movs	r3, #0
 800473c:	0028      	movs	r0, r5
 800473e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004740:	6a21      	ldr	r1, [r4, #32]
 8004742:	47b8      	blx	r7
 8004744:	89a2      	ldrh	r2, [r4, #12]
 8004746:	1c43      	adds	r3, r0, #1
 8004748:	d106      	bne.n	8004758 <__sflush_r+0x68>
 800474a:	6829      	ldr	r1, [r5, #0]
 800474c:	291d      	cmp	r1, #29
 800474e:	d846      	bhi.n	80047de <__sflush_r+0xee>
 8004750:	4b29      	ldr	r3, [pc, #164]	@ (80047f8 <__sflush_r+0x108>)
 8004752:	410b      	asrs	r3, r1
 8004754:	07db      	lsls	r3, r3, #31
 8004756:	d442      	bmi.n	80047de <__sflush_r+0xee>
 8004758:	2300      	movs	r3, #0
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	6023      	str	r3, [r4, #0]
 8004760:	04d2      	lsls	r2, r2, #19
 8004762:	d505      	bpl.n	8004770 <__sflush_r+0x80>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	d102      	bne.n	800476e <__sflush_r+0x7e>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d100      	bne.n	8004770 <__sflush_r+0x80>
 800476e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004772:	602e      	str	r6, [r5, #0]
 8004774:	2900      	cmp	r1, #0
 8004776:	d017      	beq.n	80047a8 <__sflush_r+0xb8>
 8004778:	0023      	movs	r3, r4
 800477a:	3344      	adds	r3, #68	@ 0x44
 800477c:	4299      	cmp	r1, r3
 800477e:	d002      	beq.n	8004786 <__sflush_r+0x96>
 8004780:	0028      	movs	r0, r5
 8004782:	f7ff fbf7 	bl	8003f74 <_free_r>
 8004786:	2300      	movs	r3, #0
 8004788:	6363      	str	r3, [r4, #52]	@ 0x34
 800478a:	e00d      	b.n	80047a8 <__sflush_r+0xb8>
 800478c:	2301      	movs	r3, #1
 800478e:	0028      	movs	r0, r5
 8004790:	47b8      	blx	r7
 8004792:	0002      	movs	r2, r0
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d1c6      	bne.n	8004726 <__sflush_r+0x36>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0c3      	beq.n	8004726 <__sflush_r+0x36>
 800479e:	2b1d      	cmp	r3, #29
 80047a0:	d001      	beq.n	80047a6 <__sflush_r+0xb6>
 80047a2:	2b16      	cmp	r3, #22
 80047a4:	d11a      	bne.n	80047dc <__sflush_r+0xec>
 80047a6:	602e      	str	r6, [r5, #0]
 80047a8:	2000      	movs	r0, #0
 80047aa:	e01e      	b.n	80047ea <__sflush_r+0xfa>
 80047ac:	690e      	ldr	r6, [r1, #16]
 80047ae:	2e00      	cmp	r6, #0
 80047b0:	d0fa      	beq.n	80047a8 <__sflush_r+0xb8>
 80047b2:	680f      	ldr	r7, [r1, #0]
 80047b4:	600e      	str	r6, [r1, #0]
 80047b6:	1bba      	subs	r2, r7, r6
 80047b8:	9201      	str	r2, [sp, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	079b      	lsls	r3, r3, #30
 80047be:	d100      	bne.n	80047c2 <__sflush_r+0xd2>
 80047c0:	694a      	ldr	r2, [r1, #20]
 80047c2:	60a2      	str	r2, [r4, #8]
 80047c4:	9b01      	ldr	r3, [sp, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	ddee      	ble.n	80047a8 <__sflush_r+0xb8>
 80047ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80047cc:	0032      	movs	r2, r6
 80047ce:	001f      	movs	r7, r3
 80047d0:	0028      	movs	r0, r5
 80047d2:	9b01      	ldr	r3, [sp, #4]
 80047d4:	6a21      	ldr	r1, [r4, #32]
 80047d6:	47b8      	blx	r7
 80047d8:	2800      	cmp	r0, #0
 80047da:	dc07      	bgt.n	80047ec <__sflush_r+0xfc>
 80047dc:	89a2      	ldrh	r2, [r4, #12]
 80047de:	2340      	movs	r3, #64	@ 0x40
 80047e0:	2001      	movs	r0, #1
 80047e2:	4313      	orrs	r3, r2
 80047e4:	b21b      	sxth	r3, r3
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	4240      	negs	r0, r0
 80047ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047ec:	9b01      	ldr	r3, [sp, #4]
 80047ee:	1836      	adds	r6, r6, r0
 80047f0:	1a1b      	subs	r3, r3, r0
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	e7e6      	b.n	80047c4 <__sflush_r+0xd4>
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	dfbffffe 	.word	0xdfbffffe

080047fc <_fflush_r>:
 80047fc:	690b      	ldr	r3, [r1, #16]
 80047fe:	b570      	push	{r4, r5, r6, lr}
 8004800:	0005      	movs	r5, r0
 8004802:	000c      	movs	r4, r1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <_fflush_r+0x12>
 8004808:	2500      	movs	r5, #0
 800480a:	0028      	movs	r0, r5
 800480c:	bd70      	pop	{r4, r5, r6, pc}
 800480e:	2800      	cmp	r0, #0
 8004810:	d004      	beq.n	800481c <_fflush_r+0x20>
 8004812:	6a03      	ldr	r3, [r0, #32]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <_fflush_r+0x20>
 8004818:	f7ff fa92 	bl	8003d40 <__sinit>
 800481c:	220c      	movs	r2, #12
 800481e:	5ea3      	ldrsh	r3, [r4, r2]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f1      	beq.n	8004808 <_fflush_r+0xc>
 8004824:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004826:	07d2      	lsls	r2, r2, #31
 8004828:	d404      	bmi.n	8004834 <_fflush_r+0x38>
 800482a:	059b      	lsls	r3, r3, #22
 800482c:	d402      	bmi.n	8004834 <_fflush_r+0x38>
 800482e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004830:	f7ff fb97 	bl	8003f62 <__retarget_lock_acquire_recursive>
 8004834:	0028      	movs	r0, r5
 8004836:	0021      	movs	r1, r4
 8004838:	f7ff ff5a 	bl	80046f0 <__sflush_r>
 800483c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800483e:	0005      	movs	r5, r0
 8004840:	07db      	lsls	r3, r3, #31
 8004842:	d4e2      	bmi.n	800480a <_fflush_r+0xe>
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	059b      	lsls	r3, r3, #22
 8004848:	d4df      	bmi.n	800480a <_fflush_r+0xe>
 800484a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800484c:	f7ff fb8a 	bl	8003f64 <__retarget_lock_release_recursive>
 8004850:	e7db      	b.n	800480a <_fflush_r+0xe>

08004852 <__swbuf_r>:
 8004852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004854:	0006      	movs	r6, r0
 8004856:	000d      	movs	r5, r1
 8004858:	0014      	movs	r4, r2
 800485a:	2800      	cmp	r0, #0
 800485c:	d004      	beq.n	8004868 <__swbuf_r+0x16>
 800485e:	6a03      	ldr	r3, [r0, #32]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <__swbuf_r+0x16>
 8004864:	f7ff fa6c 	bl	8003d40 <__sinit>
 8004868:	69a3      	ldr	r3, [r4, #24]
 800486a:	60a3      	str	r3, [r4, #8]
 800486c:	89a3      	ldrh	r3, [r4, #12]
 800486e:	071b      	lsls	r3, r3, #28
 8004870:	d502      	bpl.n	8004878 <__swbuf_r+0x26>
 8004872:	6923      	ldr	r3, [r4, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <__swbuf_r+0x3a>
 8004878:	0021      	movs	r1, r4
 800487a:	0030      	movs	r0, r6
 800487c:	f000 f82c 	bl	80048d8 <__swsetup_r>
 8004880:	2800      	cmp	r0, #0
 8004882:	d003      	beq.n	800488c <__swbuf_r+0x3a>
 8004884:	2501      	movs	r5, #1
 8004886:	426d      	negs	r5, r5
 8004888:	0028      	movs	r0, r5
 800488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	6820      	ldr	r0, [r4, #0]
 8004890:	b2ef      	uxtb	r7, r5
 8004892:	1ac0      	subs	r0, r0, r3
 8004894:	6963      	ldr	r3, [r4, #20]
 8004896:	b2ed      	uxtb	r5, r5
 8004898:	4283      	cmp	r3, r0
 800489a:	dc05      	bgt.n	80048a8 <__swbuf_r+0x56>
 800489c:	0021      	movs	r1, r4
 800489e:	0030      	movs	r0, r6
 80048a0:	f7ff ffac 	bl	80047fc <_fflush_r>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d1ed      	bne.n	8004884 <__swbuf_r+0x32>
 80048a8:	68a3      	ldr	r3, [r4, #8]
 80048aa:	3001      	adds	r0, #1
 80048ac:	3b01      	subs	r3, #1
 80048ae:	60a3      	str	r3, [r4, #8]
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	6022      	str	r2, [r4, #0]
 80048b6:	701f      	strb	r7, [r3, #0]
 80048b8:	6963      	ldr	r3, [r4, #20]
 80048ba:	4283      	cmp	r3, r0
 80048bc:	d004      	beq.n	80048c8 <__swbuf_r+0x76>
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	07db      	lsls	r3, r3, #31
 80048c2:	d5e1      	bpl.n	8004888 <__swbuf_r+0x36>
 80048c4:	2d0a      	cmp	r5, #10
 80048c6:	d1df      	bne.n	8004888 <__swbuf_r+0x36>
 80048c8:	0021      	movs	r1, r4
 80048ca:	0030      	movs	r0, r6
 80048cc:	f7ff ff96 	bl	80047fc <_fflush_r>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d0d9      	beq.n	8004888 <__swbuf_r+0x36>
 80048d4:	e7d6      	b.n	8004884 <__swbuf_r+0x32>
	...

080048d8 <__swsetup_r>:
 80048d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004990 <__swsetup_r+0xb8>)
 80048da:	b570      	push	{r4, r5, r6, lr}
 80048dc:	0005      	movs	r5, r0
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	000c      	movs	r4, r1
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d004      	beq.n	80048f0 <__swsetup_r+0x18>
 80048e6:	6a03      	ldr	r3, [r0, #32]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <__swsetup_r+0x18>
 80048ec:	f7ff fa28 	bl	8003d40 <__sinit>
 80048f0:	230c      	movs	r3, #12
 80048f2:	5ee2      	ldrsh	r2, [r4, r3]
 80048f4:	0713      	lsls	r3, r2, #28
 80048f6:	d423      	bmi.n	8004940 <__swsetup_r+0x68>
 80048f8:	06d3      	lsls	r3, r2, #27
 80048fa:	d407      	bmi.n	800490c <__swsetup_r+0x34>
 80048fc:	2309      	movs	r3, #9
 80048fe:	602b      	str	r3, [r5, #0]
 8004900:	2340      	movs	r3, #64	@ 0x40
 8004902:	2001      	movs	r0, #1
 8004904:	4313      	orrs	r3, r2
 8004906:	81a3      	strh	r3, [r4, #12]
 8004908:	4240      	negs	r0, r0
 800490a:	e03a      	b.n	8004982 <__swsetup_r+0xaa>
 800490c:	0752      	lsls	r2, r2, #29
 800490e:	d513      	bpl.n	8004938 <__swsetup_r+0x60>
 8004910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004912:	2900      	cmp	r1, #0
 8004914:	d008      	beq.n	8004928 <__swsetup_r+0x50>
 8004916:	0023      	movs	r3, r4
 8004918:	3344      	adds	r3, #68	@ 0x44
 800491a:	4299      	cmp	r1, r3
 800491c:	d002      	beq.n	8004924 <__swsetup_r+0x4c>
 800491e:	0028      	movs	r0, r5
 8004920:	f7ff fb28 	bl	8003f74 <_free_r>
 8004924:	2300      	movs	r3, #0
 8004926:	6363      	str	r3, [r4, #52]	@ 0x34
 8004928:	2224      	movs	r2, #36	@ 0x24
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	4393      	bics	r3, r2
 800492e:	81a3      	strh	r3, [r4, #12]
 8004930:	2300      	movs	r3, #0
 8004932:	6063      	str	r3, [r4, #4]
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	2308      	movs	r3, #8
 800493a:	89a2      	ldrh	r2, [r4, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	81a3      	strh	r3, [r4, #12]
 8004940:	6923      	ldr	r3, [r4, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10b      	bne.n	800495e <__swsetup_r+0x86>
 8004946:	21a0      	movs	r1, #160	@ 0xa0
 8004948:	2280      	movs	r2, #128	@ 0x80
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	0089      	lsls	r1, r1, #2
 800494e:	0092      	lsls	r2, r2, #2
 8004950:	400b      	ands	r3, r1
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <__swsetup_r+0x86>
 8004956:	0021      	movs	r1, r4
 8004958:	0028      	movs	r0, r5
 800495a:	f000 f8ad 	bl	8004ab8 <__smakebuf_r>
 800495e:	230c      	movs	r3, #12
 8004960:	5ee2      	ldrsh	r2, [r4, r3]
 8004962:	2101      	movs	r1, #1
 8004964:	0013      	movs	r3, r2
 8004966:	400b      	ands	r3, r1
 8004968:	420a      	tst	r2, r1
 800496a:	d00b      	beq.n	8004984 <__swsetup_r+0xac>
 800496c:	2300      	movs	r3, #0
 800496e:	60a3      	str	r3, [r4, #8]
 8004970:	6963      	ldr	r3, [r4, #20]
 8004972:	425b      	negs	r3, r3
 8004974:	61a3      	str	r3, [r4, #24]
 8004976:	2000      	movs	r0, #0
 8004978:	6923      	ldr	r3, [r4, #16]
 800497a:	4283      	cmp	r3, r0
 800497c:	d101      	bne.n	8004982 <__swsetup_r+0xaa>
 800497e:	0613      	lsls	r3, r2, #24
 8004980:	d4be      	bmi.n	8004900 <__swsetup_r+0x28>
 8004982:	bd70      	pop	{r4, r5, r6, pc}
 8004984:	0791      	lsls	r1, r2, #30
 8004986:	d400      	bmi.n	800498a <__swsetup_r+0xb2>
 8004988:	6963      	ldr	r3, [r4, #20]
 800498a:	60a3      	str	r3, [r4, #8]
 800498c:	e7f3      	b.n	8004976 <__swsetup_r+0x9e>
 800498e:	46c0      	nop			@ (mov r8, r8)
 8004990:	20000024 	.word	0x20000024

08004994 <_raise_r>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	0004      	movs	r4, r0
 8004998:	000d      	movs	r5, r1
 800499a:	291f      	cmp	r1, #31
 800499c:	d904      	bls.n	80049a8 <_raise_r+0x14>
 800499e:	2316      	movs	r3, #22
 80049a0:	6003      	str	r3, [r0, #0]
 80049a2:	2001      	movs	r0, #1
 80049a4:	4240      	negs	r0, r0
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d004      	beq.n	80049b8 <_raise_r+0x24>
 80049ae:	008a      	lsls	r2, r1, #2
 80049b0:	189b      	adds	r3, r3, r2
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	2a00      	cmp	r2, #0
 80049b6:	d108      	bne.n	80049ca <_raise_r+0x36>
 80049b8:	0020      	movs	r0, r4
 80049ba:	f000 f831 	bl	8004a20 <_getpid_r>
 80049be:	002a      	movs	r2, r5
 80049c0:	0001      	movs	r1, r0
 80049c2:	0020      	movs	r0, r4
 80049c4:	f000 f81a 	bl	80049fc <_kill_r>
 80049c8:	e7ed      	b.n	80049a6 <_raise_r+0x12>
 80049ca:	2a01      	cmp	r2, #1
 80049cc:	d009      	beq.n	80049e2 <_raise_r+0x4e>
 80049ce:	1c51      	adds	r1, r2, #1
 80049d0:	d103      	bne.n	80049da <_raise_r+0x46>
 80049d2:	2316      	movs	r3, #22
 80049d4:	6003      	str	r3, [r0, #0]
 80049d6:	2001      	movs	r0, #1
 80049d8:	e7e5      	b.n	80049a6 <_raise_r+0x12>
 80049da:	2100      	movs	r1, #0
 80049dc:	0028      	movs	r0, r5
 80049de:	6019      	str	r1, [r3, #0]
 80049e0:	4790      	blx	r2
 80049e2:	2000      	movs	r0, #0
 80049e4:	e7df      	b.n	80049a6 <_raise_r+0x12>
	...

080049e8 <raise>:
 80049e8:	b510      	push	{r4, lr}
 80049ea:	4b03      	ldr	r3, [pc, #12]	@ (80049f8 <raise+0x10>)
 80049ec:	0001      	movs	r1, r0
 80049ee:	6818      	ldr	r0, [r3, #0]
 80049f0:	f7ff ffd0 	bl	8004994 <_raise_r>
 80049f4:	bd10      	pop	{r4, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	20000024 	.word	0x20000024

080049fc <_kill_r>:
 80049fc:	2300      	movs	r3, #0
 80049fe:	b570      	push	{r4, r5, r6, lr}
 8004a00:	4d06      	ldr	r5, [pc, #24]	@ (8004a1c <_kill_r+0x20>)
 8004a02:	0004      	movs	r4, r0
 8004a04:	0008      	movs	r0, r1
 8004a06:	0011      	movs	r1, r2
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	f7fc f9d9 	bl	8000dc0 <_kill>
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	d103      	bne.n	8004a1a <_kill_r+0x1e>
 8004a12:	682b      	ldr	r3, [r5, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d000      	beq.n	8004a1a <_kill_r+0x1e>
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
 8004a1c:	200002ec 	.word	0x200002ec

08004a20 <_getpid_r>:
 8004a20:	b510      	push	{r4, lr}
 8004a22:	f7fc f9c7 	bl	8000db4 <_getpid>
 8004a26:	bd10      	pop	{r4, pc}

08004a28 <_sbrk_r>:
 8004a28:	2300      	movs	r3, #0
 8004a2a:	b570      	push	{r4, r5, r6, lr}
 8004a2c:	4d06      	ldr	r5, [pc, #24]	@ (8004a48 <_sbrk_r+0x20>)
 8004a2e:	0004      	movs	r4, r0
 8004a30:	0008      	movs	r0, r1
 8004a32:	602b      	str	r3, [r5, #0]
 8004a34:	f7fc fa46 	bl	8000ec4 <_sbrk>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d103      	bne.n	8004a44 <_sbrk_r+0x1c>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d000      	beq.n	8004a44 <_sbrk_r+0x1c>
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	46c0      	nop			@ (mov r8, r8)
 8004a48:	200002ec 	.word	0x200002ec

08004a4c <memchr>:
 8004a4c:	b2c9      	uxtb	r1, r1
 8004a4e:	1882      	adds	r2, r0, r2
 8004a50:	4290      	cmp	r0, r2
 8004a52:	d101      	bne.n	8004a58 <memchr+0xc>
 8004a54:	2000      	movs	r0, #0
 8004a56:	4770      	bx	lr
 8004a58:	7803      	ldrb	r3, [r0, #0]
 8004a5a:	428b      	cmp	r3, r1
 8004a5c:	d0fb      	beq.n	8004a56 <memchr+0xa>
 8004a5e:	3001      	adds	r0, #1
 8004a60:	e7f6      	b.n	8004a50 <memchr+0x4>
	...

08004a64 <__swhatbuf_r>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	000e      	movs	r6, r1
 8004a68:	001d      	movs	r5, r3
 8004a6a:	230e      	movs	r3, #14
 8004a6c:	5ec9      	ldrsh	r1, [r1, r3]
 8004a6e:	0014      	movs	r4, r2
 8004a70:	b096      	sub	sp, #88	@ 0x58
 8004a72:	2900      	cmp	r1, #0
 8004a74:	da0c      	bge.n	8004a90 <__swhatbuf_r+0x2c>
 8004a76:	89b2      	ldrh	r2, [r6, #12]
 8004a78:	2380      	movs	r3, #128	@ 0x80
 8004a7a:	0011      	movs	r1, r2
 8004a7c:	4019      	ands	r1, r3
 8004a7e:	421a      	tst	r2, r3
 8004a80:	d114      	bne.n	8004aac <__swhatbuf_r+0x48>
 8004a82:	2380      	movs	r3, #128	@ 0x80
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	2000      	movs	r0, #0
 8004a88:	6029      	str	r1, [r5, #0]
 8004a8a:	6023      	str	r3, [r4, #0]
 8004a8c:	b016      	add	sp, #88	@ 0x58
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	466a      	mov	r2, sp
 8004a92:	f000 f853 	bl	8004b3c <_fstat_r>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	dbed      	blt.n	8004a76 <__swhatbuf_r+0x12>
 8004a9a:	23f0      	movs	r3, #240	@ 0xf0
 8004a9c:	9901      	ldr	r1, [sp, #4]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	4019      	ands	r1, r3
 8004aa2:	4b04      	ldr	r3, [pc, #16]	@ (8004ab4 <__swhatbuf_r+0x50>)
 8004aa4:	18c9      	adds	r1, r1, r3
 8004aa6:	424b      	negs	r3, r1
 8004aa8:	4159      	adcs	r1, r3
 8004aaa:	e7ea      	b.n	8004a82 <__swhatbuf_r+0x1e>
 8004aac:	2100      	movs	r1, #0
 8004aae:	2340      	movs	r3, #64	@ 0x40
 8004ab0:	e7e9      	b.n	8004a86 <__swhatbuf_r+0x22>
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	ffffe000 	.word	0xffffe000

08004ab8 <__smakebuf_r>:
 8004ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aba:	2602      	movs	r6, #2
 8004abc:	898b      	ldrh	r3, [r1, #12]
 8004abe:	0005      	movs	r5, r0
 8004ac0:	000c      	movs	r4, r1
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	4233      	tst	r3, r6
 8004ac6:	d007      	beq.n	8004ad8 <__smakebuf_r+0x20>
 8004ac8:	0023      	movs	r3, r4
 8004aca:	3347      	adds	r3, #71	@ 0x47
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	6123      	str	r3, [r4, #16]
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	6163      	str	r3, [r4, #20]
 8004ad4:	b005      	add	sp, #20
 8004ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad8:	ab03      	add	r3, sp, #12
 8004ada:	aa02      	add	r2, sp, #8
 8004adc:	f7ff ffc2 	bl	8004a64 <__swhatbuf_r>
 8004ae0:	9f02      	ldr	r7, [sp, #8]
 8004ae2:	9001      	str	r0, [sp, #4]
 8004ae4:	0039      	movs	r1, r7
 8004ae6:	0028      	movs	r0, r5
 8004ae8:	f7ff fab0 	bl	800404c <_malloc_r>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d108      	bne.n	8004b02 <__smakebuf_r+0x4a>
 8004af0:	220c      	movs	r2, #12
 8004af2:	5ea3      	ldrsh	r3, [r4, r2]
 8004af4:	059a      	lsls	r2, r3, #22
 8004af6:	d4ed      	bmi.n	8004ad4 <__smakebuf_r+0x1c>
 8004af8:	2203      	movs	r2, #3
 8004afa:	4393      	bics	r3, r2
 8004afc:	431e      	orrs	r6, r3
 8004afe:	81a6      	strh	r6, [r4, #12]
 8004b00:	e7e2      	b.n	8004ac8 <__smakebuf_r+0x10>
 8004b02:	2380      	movs	r3, #128	@ 0x80
 8004b04:	89a2      	ldrh	r2, [r4, #12]
 8004b06:	6020      	str	r0, [r4, #0]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	9b03      	ldr	r3, [sp, #12]
 8004b0e:	6120      	str	r0, [r4, #16]
 8004b10:	6167      	str	r7, [r4, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00c      	beq.n	8004b30 <__smakebuf_r+0x78>
 8004b16:	0028      	movs	r0, r5
 8004b18:	230e      	movs	r3, #14
 8004b1a:	5ee1      	ldrsh	r1, [r4, r3]
 8004b1c:	f000 f820 	bl	8004b60 <_isatty_r>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d005      	beq.n	8004b30 <__smakebuf_r+0x78>
 8004b24:	2303      	movs	r3, #3
 8004b26:	89a2      	ldrh	r2, [r4, #12]
 8004b28:	439a      	bics	r2, r3
 8004b2a:	3b02      	subs	r3, #2
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	9a01      	ldr	r2, [sp, #4]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	e7cc      	b.n	8004ad4 <__smakebuf_r+0x1c>
	...

08004b3c <_fstat_r>:
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	b570      	push	{r4, r5, r6, lr}
 8004b40:	4d06      	ldr	r5, [pc, #24]	@ (8004b5c <_fstat_r+0x20>)
 8004b42:	0004      	movs	r4, r0
 8004b44:	0008      	movs	r0, r1
 8004b46:	0011      	movs	r1, r2
 8004b48:	602b      	str	r3, [r5, #0]
 8004b4a:	f7fc f999 	bl	8000e80 <_fstat>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	d103      	bne.n	8004b5a <_fstat_r+0x1e>
 8004b52:	682b      	ldr	r3, [r5, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d000      	beq.n	8004b5a <_fstat_r+0x1e>
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	200002ec 	.word	0x200002ec

08004b60 <_isatty_r>:
 8004b60:	2300      	movs	r3, #0
 8004b62:	b570      	push	{r4, r5, r6, lr}
 8004b64:	4d06      	ldr	r5, [pc, #24]	@ (8004b80 <_isatty_r+0x20>)
 8004b66:	0004      	movs	r4, r0
 8004b68:	0008      	movs	r0, r1
 8004b6a:	602b      	str	r3, [r5, #0]
 8004b6c:	f7fc f996 	bl	8000e9c <_isatty>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d103      	bne.n	8004b7c <_isatty_r+0x1c>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d000      	beq.n	8004b7c <_isatty_r+0x1c>
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	bd70      	pop	{r4, r5, r6, pc}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	200002ec 	.word	0x200002ec

08004b84 <_init>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	46c0      	nop			@ (mov r8, r8)
 8004b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8a:	bc08      	pop	{r3}
 8004b8c:	469e      	mov	lr, r3
 8004b8e:	4770      	bx	lr

08004b90 <_fini>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	46c0      	nop			@ (mov r8, r8)
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr
